<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>题解 - Codeforces Round #639 Div. 1 &amp; Div. 2</title>
    <url>/article/solution-codeforces-639-2/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1344,1345" target="_blank" rel="noopener">比赛链接</a></p>
<p>emm, 打一半改成unrated了海星</p>
<p>惨 Monogon 惨</p>
<a id="more"></a>
<!-- Div 2的C~F对应Div 1 的A~D -->
<h1 id="A-Puzzle-Pieces"><a href="#A-Puzzle-Pieces" class="headerlink" title="A. Puzzle Pieces"></a>A. Puzzle Pieces</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有$n\times m$个完全相同的拼图块, 每个均一凹三凸, 如图</p>
<p><img src="A_1.bmp" alt=""></p>
<p>问对给定的$n$和$m$, 能不能拼出$n\times m$的矩形</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>不妨假设$n\leqslant m$</p>
<p>首先当$n=1$时和$n=m=2$时显然可以</p>
<p><img src="A_2.bmp" alt=""></p>
<p><img src="A_3.bmp" alt=""></p>
<p>而如果想拼出$n\times m,2&lt;n\leqslant m$的矩形, 必然需要先拼出$(n-1)\times m$和$n\times(m-1)$的矩形</p>
<p>观察发现, 如果矩形可以拼出, 则每条拼图块的公共边必然为一凹一凸, 可以发现$m=3$和$n=3$时的矩形一共$7$条公共边, 但所有拼图块一共只有$6$个凹边</p>
<p>故可能的情况只有$n=1$时和$n=m=2$时</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Tiphereth</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-07 00:27:19</span></span><br><span class="line"><span class="comment"> * @FilePath: \cpp\codeforces\Round #639 (Div. 2)\a.cpp</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> _T_;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; _T_;</span><br><span class="line">  <span class="keyword">while</span> (_T_--) &#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || m == <span class="number">1</span> || (n == <span class="number">2</span> &amp;&amp; m == <span class="number">2</span>))</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="B-Card-Constructions"><a href="#B-Card-Constructions" class="headerlink" title="B. Card Constructions"></a>B. Card Constructions</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>输入$n$, 计算能搭出几个卡牌金字塔</p>
<p>图示即为卡牌金字塔高度$h=1,2,3$时的情况</p>
<p><img src="B_1.bmp" alt=""></p>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>易得高度为$h$的卡牌金字塔所消耗的卡牌总数为${1\over2}(3h^2+h)$</p>
<p>所以直接打个表然后二分查找就好了</p>
<p>其实不用二分也能过, 直接从高到低遍历一遍就行</p>
<h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>不需要二分就可以做到单次$O(\sqrt n)$ (实际上我比赛时的二分做法也是$O(\sqrt{n})$的, 常数反而更大些)</p>
<p>此时的总体复杂度显然是$O(\sum_{i=1}^t\sqrt{n_i})$, 不过可以将其写成更好看的形式</p>
<p>令$N=\displaystyle\sum_{i=1}^tn_i$, 由Cauchy-Schwarz不等式可知</p>
<script type="math/tex; mode=display">\sum_{i=1}^t\sqrt{n_i}\leqslant\sqrt{\sum_{i=1}^t1\cdot\sum_{i=1}^tn_i}=\sqrt{tN}</script><p>所以可以记作$O(\sqrt{tN})$</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Tiphereth</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-07 00:34:48</span></span><br><span class="line"><span class="comment"> * @FilePath: \cpp\codeforces\Round #639 (Div. 2)\b.cpp</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">u64 f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (u64 i = <span class="number">1</span>; i &lt; N; ++i) &#123; f[i] = (<span class="number">3</span> * i * i + i) / <span class="number">2</span>; &#125;</span><br><span class="line">  <span class="keyword">int</span> _T_;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; _T_;</span><br><span class="line">  <span class="keyword">while</span> (_T_--) &#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pos = lower_bound(f, f + N, n) - f, cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (pos) &#123;</span><br><span class="line">      <span class="keyword">if</span> (pos == <span class="number">0</span> || f[pos] == n) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      n -= f[pos - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ++cnt;</span><br><span class="line">      pos = lower_bound(f, f + N, n) - f;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="C-Hilbert’s-Hotel"><a href="#C-Hilbert’s-Hotel" class="headerlink" title="C. Hilbert’s Hotel"></a>C. Hilbert’s Hotel</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给出$n$和一组数$a_0,a_1,…,a_{n-1}$, 问是否$\exists x,y\in\Bbb{Z}, x\ne y s.t. x+a_{x\operatorname{mod}n}=y+a_{y\operatorname{mod}n}$</p>
<h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>首先我们可以发现</p>
<ul>
<li>$x=y+kn,k\in\Bbb{Z}\iff x+a_{x\operatorname{mod}n}=y+a_{y\operatorname{mod}n}+kn$</li>
<li>$x+a_{x\operatorname{mod}n}=y+a_{y\operatorname{mod}n}\impliedby \begin{cases}<br>x+a_{x\operatorname{mod}n}\equiv y+a_{y\operatorname{mod}n}\pmod n\\<br>x\ne y+kn,k\in\Bbb{Z}<br>\end{cases}$</li>
</ul>
<p>所以我们只需在$\Bbb{Z}_n$下考虑即可</p>
<p>若</p>
<script type="math/tex; mode=display">\exists x,y\in\Bbb{Z}_n, x\ne y\ s.t.\ x+a_{x\operatorname{mod}n}\equiv y+a_{y\operatorname{mod}n}\pmod n</script><p>则</p>
<script type="math/tex; mode=display">\exists x,y\in\Bbb{Z}, x\ne y\ s.t.\ x+a_{x\operatorname{mod}n}=y+a_{y\operatorname{mod}n}</script><h2 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h2><p>单次$\Theta(n)$</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Tiphereth</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-07 00:37:12</span></span><br><span class="line"><span class="comment"> * @FilePath: \cpp\codeforces\Round #639 (Div. 2)\c.cpp</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> _T_;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; _T_;</span><br><span class="line">  <span class="keyword">while</span> (_T_--) &#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span>      n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123; <span class="built_in">cin</span> &gt;&gt; a[i]; &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s.count(((i + a[i % n]) % n + n) % n)) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">goto</span> __END;</span><br><span class="line">      &#125;</span><br><span class="line">      s.insert(((i + a[i % n]) % n + n) % n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  __END:;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="D-Monopole-Magnets"><a href="#D-Monopole-Magnets" class="headerlink" title="D. Monopole Magnets"></a>D. Monopole Magnets</h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>有个$n\times m$的地图, 每个格子都染成了黑色或白色, 每个格子还可以放单极磁铁(当然这玩意现实中不存在), 如果N极和S极同行或同列, 则N级可以向S极方向移动一格, 要求</p>
<ol>
<li>每行和每列都至少放一个S极</li>
<li>N极能经过所有黑格</li>
<li>N极不能有经过白格的可能</li>
</ol>
<p>问对给定的地图是否存在放置单极磁铁的方案, 如果有的话一共可以放几个N极</p>
<h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>如果有方案的话, N极个数显然为黑格连通块个数</p>
<p>如果在某行/列出现两个黑格中间有白格的情况, 则中间的白格有可能被经过, 否则该行/列没有S极</p>
<p>如果某一行/列全白, 则必有某一列/行全白, 从而S极可置于交点处. 否则白格有可能被经过, 或该行/列没有S极</p>
<p>所以只需要先遍历看看是否存在上述情况, 如果没有再求个连通块个数就行了</p>
<h2 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h2><p>$\Theta(nm)$</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Tiphereth</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-07 11:47:49</span></span><br><span class="line"><span class="comment"> * @FilePath: \cpp\codeforces\Round #639 (Div. 2)\d.cpp</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> _[N][N];</span><br><span class="line"><span class="keyword">bool</span> vis[N][N];</span><br><span class="line"><span class="keyword">int</span>  n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (vis[x][y] || _[x][y] == <span class="string">'.'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  vis[x][y] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span>* i : d) &#123;</span><br><span class="line">    <span class="keyword">int</span> now_x = x + *i, now_y = y + *(i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (now_x &lt;= <span class="number">0</span> || now_y &lt;= <span class="number">0</span> || now_x &gt; n || now_y &gt; m) <span class="keyword">continue</span>;</span><br><span class="line">    dfs(now_x, now_y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d\n"</span>, &amp;n, &amp;m);</span><br><span class="line">  _for(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">    fgets(_[i] + <span class="number">1</span>, m + <span class="number">1</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> (_[i][<span class="number">1</span>] == <span class="number">10</span>) fgets(_[i] + <span class="number">1</span>, m + <span class="number">1</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> while_line = <span class="number">0</span>, while_col = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, f; i &lt;= n; ++i) &#123;</span><br><span class="line">    f = <span class="number">1</span>;</span><br><span class="line">    _for(j, <span class="number">1</span>, m) <span class="keyword">if</span> (_[i][j] == <span class="string">'#'</span>) f = <span class="number">0</span>;</span><br><span class="line">    while_line += f;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, f; i &lt;= m; ++i) &#123;</span><br><span class="line">    f = <span class="number">1</span>;</span><br><span class="line">    _for(j, <span class="number">1</span>, n) <span class="keyword">if</span> (_[j][i] == <span class="string">'#'</span>) f = <span class="number">0</span>;</span><br><span class="line">    while_col += f;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((while_line == <span class="number">0</span>) ^ (while_col == <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l, r; i &lt;= n; ++i) &#123;</span><br><span class="line">    l = r = <span class="number">0</span>;</span><br><span class="line">    _for(j, <span class="number">1</span>, m) <span class="keyword">if</span> (_[i][j] == <span class="string">'#'</span>) &#123;</span><br><span class="line">      l = j;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _fd(j, m, <span class="number">1</span>) <span class="keyword">if</span> (_[i][j] == <span class="string">'#'</span>) &#123;</span><br><span class="line">      r = j;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _for(j, l, r) <span class="keyword">if</span> (_[i][j] == <span class="string">'.'</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l, r; i &lt;= m; ++i) &#123;</span><br><span class="line">    l = r = <span class="number">0</span>;</span><br><span class="line">    _for(j, <span class="number">1</span>, n) <span class="keyword">if</span> (_[j][i] == <span class="string">'#'</span>) &#123;</span><br><span class="line">      l = j;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _fd(j, n, <span class="number">1</span>) <span class="keyword">if</span> (_[j][i] == <span class="string">'#'</span>) &#123;</span><br><span class="line">      r = j;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _for(j, l, r) <span class="keyword">if</span> (_[j][i] == <span class="string">'.'</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  _for(i, <span class="number">1</span>, n) _for(j, <span class="number">1</span>, m) cnt += dfs(i, j);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="剩下的在补了"><a href="#剩下的在补了" class="headerlink" title="剩下的在补了"></a>剩下的在补了</h1><h1 id="E-Quantifier-Question"><a href="#E-Quantifier-Question" class="headerlink" title="E. Quantifier Question"></a>E. Quantifier Question</h1><h2 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h2><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><h2 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h2><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><h1 id="F-Resume-Review"><a href="#F-Resume-Review" class="headerlink" title="F. Résumé Review"></a>F. Résumé Review</h1><h2 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h2><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><h2 id="复杂度-4"><a href="#复杂度-4" class="headerlink" title="复杂度"></a>复杂度</h2><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><h1 id="Div-1-E-Train-Tracks"><a href="#Div-1-E-Train-Tracks" class="headerlink" title="(Div. 1) E. Train Tracks"></a>(Div. 1) E. Train Tracks</h1><h2 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h2><h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><h2 id="复杂度-5"><a href="#复杂度-5" class="headerlink" title="复杂度"></a>复杂度</h2><h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><h1 id="Div-1-F-Piet’s-Palette"><a href="#Div-1-F-Piet’s-Palette" class="headerlink" title="(Div. 1) F. Piet’s Palette"></a>(Div. 1) F. Piet’s Palette</h1><h2 id="题意-7"><a href="#题意-7" class="headerlink" title="题意"></a>题意</h2><h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><h2 id="复杂度-6"><a href="#复杂度-6" class="headerlink" title="复杂度"></a>复杂度</h2><h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2>]]></content>
      <tags>
        <tag>程序设计</tag>
        <tag>题解</tag>
        <tag>CodeForces</tag>
      </tags>
  </entry>
  <entry>
    <title>mhchem指令手册-中文文档</title>
    <url>/article/mhchem-function/</url>
    <content><![CDATA[<p>汉化自<a href="https://mhchem.github.io/MathJax-mhchem/" target="_blank" rel="noopener">Manual for: mhchem for MathJax, mhchem for KaTeX</a></p>
<p>按笔者习惯调整了顺序</p>
<a id="more"></a>
<h2 id="数学模式-math-mode-斜体"><a href="#数学模式-math-mode-斜体" class="headerlink" title="数学模式(math mode)/斜体"></a>数学模式(math mode)/斜体</h2><p><code>\ce</code>支持嵌套<code>$...$</code>切换至数学模式(math mode)/使用斜体</p>
<script type="math/tex; mode=display">\ce{X_$i$^$x$}</script><p><code>\ce{X_$i$^$x$}</code></p>
<script type="math/tex; mode=display">\ce{$cis${-}[PtCl2(NH3)2]}</script><p><code>\ce{$cis${-}[PtCl2(NH3)2]}</code></p>
<script type="math/tex; mode=display">\ce{CuS($hP12$)}</script><p><code>\ce{CuS($hP12$)}</code></p>
<p>可使用<code>~</code>代表空格</p>
<h2 id="直体"><a href="#直体" class="headerlink" title="直体"></a>直体</h2><ul>
<li><p>使用<code>{...}</code>嵌套</p>
<p>$\ce{ {Gluconic Acid} + H2O2}$  <code>\ce{ {Gluconic Acid} + H2O2}</code></p>
</li>
<li><p>使用<code>-</code>(不应作为化学键)</p>
<p>$\ce{ {(+)}_589{-}[Co(en)3]Cl3}$  <code>\ce{ {(+)}_589{-}[Co(en)3]Cl3}</code></p>
</li>
</ul>
<h2 id="化学方程式-CE"><a href="#化学方程式-CE" class="headerlink" title="化学方程式(CE)"></a>化学方程式(CE)</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{CO2 + C -&gt; 2 CO}$</td>
<td><code>\ce{CO2 + C -&gt; 2 CO}</code></td>
</tr>
<tr>
<td>$\ce{Hg^2+ -&gt;[I-] HgI2 -&gt;[I-] [Hg^{II}I4]^2-}$</td>
<td><code>\ce{Hg^2+ -&gt;[I-] HgI2 -&gt;[I-] [Hg^{II}I4]^2-}</code></td>
</tr>
<tr>
<td>$C_p[\ce{H2O(l)}] = \pu{75.3 J // mol K}$</td>
<td><code>C_p[\ce{H2O(l)}] = \pu{75.3 J // mol K}</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="物理单位-PU"><a href="#物理单位-PU" class="headerlink" title="物理单位(PU)"></a>物理单位(PU)</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\pu{1.2e3 kJ/mol}$</td>
<td><code>\pu{1.2e3 kJ/mol}</code></td>
</tr>
<tr>
<td>$\pu{1,2e3 kJ//mol}$</td>
<td><code>\pu{1,2e3 kJ//mol}</code></td>
</tr>
<tr>
<td>$\pu{1.2E3 kJ mol-1}$</td>
<td><code>\pu{1.2E3 kJ mol-1}</code></td>
</tr>
<tr>
<td>$\pu{1,2E3 kJ*mol-1}$</td>
<td><code>\pu{1,2E3 kJ*mol-1}</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="化学式"><a href="#化学式" class="headerlink" title="化学式"></a>化学式</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{H2O}$</td>
<td><code>\ce{H2O}</code></td>
</tr>
<tr>
<td>$\ce{Sb2O3}$</td>
<td><code>\ce{Sb2O3}</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="离子"><a href="#离子" class="headerlink" title="离子"></a>离子</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{H+}$</td>
<td><code>\ce{H+}</code></td>
</tr>
<tr>
<td>$\ce{CrO4^2-}$</td>
<td><code>\ce{CrO4^2-}</code></td>
</tr>
<tr>
<td>$\ce{[AgCl2]-}$</td>
<td><code>\ce{[AgCl2]-}</code></td>
</tr>
<tr>
<td>$\ce{Y^99+}$</td>
<td><code>\ce{Y^99+}</code></td>
</tr>
<tr>
<td>$\ce{Y^{99+}}$</td>
<td><code>\ce{Y^{99+}}</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="带化学计量数"><a href="#带化学计量数" class="headerlink" title="带化学计量数"></a>带化学计量数</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{2 H2O}$</td>
<td><code>\ce{2 H2O}</code></td>
</tr>
<tr>
<td>$\ce{2H2O}$</td>
<td><code>\ce{2H2O}</code></td>
</tr>
<tr>
<td>$\ce{0.5 H2O}$</td>
<td><code>\ce{0.5 H2O}</code></td>
</tr>
<tr>
<td>$\ce{1/2 H2O}$</td>
<td><code>\ce{1/2 H2O}</code></td>
</tr>
<tr>
<td>$\ce{(1/2) H2O}$</td>
<td><code>\ce{(1/2) H2O}</code></td>
</tr>
</tbody>
</table>
</div>
<script type="math/tex; mode=display">\ce{$n$ H2O}</script><p><code>\ce{$n$ H2O}</code></p>
<h2 id="核素"><a href="#核素" class="headerlink" title="核素"></a>核素</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{^{227}_{90}Th+}$</td>
<td><code>\ce{^{227}_{90}Th+}</code></td>
</tr>
<tr>
<td>$\ce{^227_90Th+}$</td>
<td><code>\ce{^227_90Th+}</code></td>
</tr>
<tr>
<td>$\ce{^{0}_{-1}n^{-}}$</td>
<td><code>\ce{^{0}_{-1}n^{-}}</code></td>
</tr>
<tr>
<td>$\ce{^0_-1n-}$</td>
<td><code>\ce{^0_-1n-}</code></td>
</tr>
</tbody>
</table>
</div>
<p>上标属于左边还是右边可能是不确定的, mhchem会自动检测<br>可以用<code>{}</code>指定</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{H{}^3HO}$</td>
<td><code>\ce{H{}^3HO}</code></td>
</tr>
<tr>
<td>$\ce{H^3HO}$</td>
<td><code>\ce{H^3HO}</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="反应式箭头"><a href="#反应式箭头" class="headerlink" title="反应式箭头"></a>反应式箭头</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{A -&gt; B}$</td>
<td><code>\ce{A -&gt; B}</code></td>
</tr>
<tr>
<td>$\ce{A &lt;- B}$</td>
<td><code>\ce{A &lt;- B}</code></td>
</tr>
<tr>
<td>$\ce{A &lt;-&gt; B}$</td>
<td><code>\ce{A &lt;-&gt; B}</code></td>
</tr>
<tr>
<td>$\ce{A &lt;—&gt; B}$</td>
<td><code>\ce{A &lt;--&gt; B}</code></td>
</tr>
<tr>
<td>$\ce{A &lt;=&gt; B}$</td>
<td><code>\ce{A &lt;=&gt; B}</code></td>
</tr>
<tr>
<td>$\ce{A &lt;=&gt;&gt; B}$</td>
<td><code>\ce{A &lt;=&gt;&gt; B}</code></td>
</tr>
<tr>
<td>$\ce{A &lt;&lt;=&gt; B}$</td>
<td><code>\ce{A &lt;&lt;=&gt; B}</code></td>
</tr>
<tr>
<td>$\ce{A -&gt;[{text above}][{text below}] B}$</td>
<td><code>\ce{A -&gt;[{text above}][{text below}] B}</code></td>
</tr>
</tbody>
</table>
</div>
<script type="math/tex; mode=display">\ce{A ->[$x$][$x_i$] B}</script><p><code>\ce{A -&gt;[$x$][$x_i$] B</code></p>
<p>MathJax无法正确伸长&lt;-&gt;，&lt;=&gt;，&lt;=&gt;&gt;和&lt;&lt;=&gt;箭头 <a href="https://github.com/mathjax/MathJax/issues/1491" target="_blank" rel="noopener">Issue#1491</a></p>
<h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{(NH4)2S}$</td>
<td><code>\ce{(NH4)2S}</code></td>
</tr>
<tr>
<td>$\ce{[\{(X2)3\}2]^3+}$</td>
<td><code>\ce{[\{(X2)3\}2]^3+}</code></td>
</tr>
</tbody>
</table>
</div>
<p><code>\left</code>和<code>\right</code>应在同一环境内</p>
<script type="math/tex; mode=display">\ce{CH4 + 2 $\left( \ce{O2 + 79/21 N2} \right)$}</script><p><code>\ce{CH4 + 2 $\left( \ce{O2 + 79/21 N2} \right)$}</code></p>
<h2 id="聚集状态"><a href="#聚集状态" class="headerlink" title="聚集状态"></a>聚集状态</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{H2(aq)}$</td>
<td><code>\ce{H2(aq)}</code></td>
</tr>
<tr>
<td>$\ce{CO3^2-_{(aq)}}$</td>
<td><code>\ce{CO3^2-_{(aq)}}</code></td>
</tr>
</tbody>
</table>
</div>
<script type="math/tex; mode=display">\ce{NaOH(aq,$\infty$)}</script><p><code>\ce{NaOH(aq,$\infty$)}</code> </p>
<h2 id="晶系"><a href="#晶系" class="headerlink" title="晶系"></a>晶系</h2><script type="math/tex; mode=display">\ce{ZnS($c$)}</script><p><code>\ce{ZnS($c$)}</code></p>
<script type="math/tex; mode=display">\ce{ZnS(\ca$c$)}</script><p><code>\ce{ZnS(\ca$c$)}</code></p>
<h2 id="含有变量-使用斜体渲染"><a href="#含有变量-使用斜体渲染" class="headerlink" title="含有变量(使用斜体渲染)"></a>含有变量(使用斜体渲染)</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{NO_x}$</td>
<td><code>\ce{NO_x}</code></td>
</tr>
<tr>
<td>$\ce{Fe^n+}$</td>
<td><code>\ce{Fe^n+}</code></td>
</tr>
<tr>
<td>$\ce{x Na(NH4)HPO4 -&gt;[\Delta] (NaPO3)_x + x NH3 ^ + x H2O}$</td>
<td><code>\ce{x Na(NH4)HPO4 -&gt;[\Delta] (NaPO3)_x + x NH3 ^ + x H2O}</code></td>
</tr>
</tbody>
</table>
</div>
<p>如果未识别, 可使用数学模式(math mode)</p>
<h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><p>MathJax和KaTeX均不支持小写直体希腊字母</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{\mu-Cl}$</td>
<td><code>\ce{\mu-Cl}</code></td>
</tr>
<tr>
<td>$\ce{[Pt(\eta^2-C2H4)Cl3]-}$</td>
<td><code>\ce{[Pt(\eta^2-C2H4)Cl3]-}</code></td>
</tr>
</tbody>
</table>
</div>
<p>注意希腊字母后的空格会被忽略, 可使用<code>{}</code>分割</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{\beta +}$</td>
<td><code>\ce{\beta +}</code> (<code>+</code>识别为上标)</td>
</tr>
<tr>
<td>$\ce{^40_18Ar + \gamma{} + \nu_e}$</td>
<td><code>\ce{^40_18Ar + \gamma{} + \nu_e}</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="化学键"><a href="#化学键" class="headerlink" title="化学键"></a>化学键</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{C6H5-CHO}$</td>
<td><code>\ce{C6H5-CHO}</code></td>
</tr>
<tr>
<td>$\ce{A-B=C#D}$</td>
<td><code>\ce{A-B=C#D}</code></td>
</tr>
</tbody>
</table>
</div>
<p>可使用<code>\bond</code>指令强制按化学键解析</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{A\bond{~}B\bond{~-}C}$</td>
<td><code>\ce{A\bond{~}B\bond{~-}C}</code></td>
</tr>
<tr>
<td>$\ce{A\bond{…}B\bond{….}C}$</td>
<td><code>\ce{A\bond{...}B\bond{....}C}</code></td>
</tr>
<tr>
<td>$\ce{A\bond{-&gt;}B\bond{&lt;-}C}$</td>
<td><code>\ce{A\bond{-&gt;}B\bond{&lt;-}C}</code></td>
</tr>
<tr>
<td>$\ce{A\bond{1}B\bond{2}C\bond{3}D}$</td>
<td><code>\ce{A\bond{1}B\bond{2}C\bond{3}D}</code></td>
</tr>
<tr>
<td>$\ce{A\bond{~—}B\bond{~=}C\bond{-~-}D}$</td>
<td><code>\ce{A\bond{~--}B\bond{~=}C\bond{-~-}D}</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="附加化合物"><a href="#附加化合物" class="headerlink" title="附加化合物"></a>附加化合物</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{KCr(SO4)2*12H2O}$</td>
<td><code>\ce{KCr(SO4)2*12H2O}</code></td>
</tr>
<tr>
<td>$\ce{KCr(SO4)2.12H2O}$</td>
<td><code>\ce{KCr(SO4)2.12H2O}</code></td>
</tr>
<tr>
<td>$\ce{KCr(SO4)2 * 12 H2O}$</td>
<td><code>\ce{KCr(SO4)2 * 12 H2O}</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="氧化态"><a href="#氧化态" class="headerlink" title="氧化态"></a>氧化态</h2><p>$\ce{Fe^{II}Fe^{III}2O4}$ <code>\ce{Fe^{II}Fe^{III}2O4}</code></p>
<h2 id="不成对电子-自由基"><a href="#不成对电子-自由基" class="headerlink" title="不成对电子, 自由基"></a>不成对电子, 自由基</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{OCO^{.-}}$</td>
<td><code>\ce{OCO^{.-}}</code></td>
</tr>
<tr>
<td>$\ce{NO^{(2.)-}}$</td>
<td><code>\ce{NO^{(2.)-}}</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Kroger-Vink表示法"><a href="#Kroger-Vink表示法" class="headerlink" title="Kröger-Vink表示法"></a>Kröger-Vink表示法</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{O’’_{i,x}}$</td>
<td><code>\ce{O&#39;&#39;_{i,x}}</code></td>
</tr>
<tr>
<td>$\ce{M^{..}_i}$</td>
<td><code>\ce{M^{..}_i}</code></td>
</tr>
</tbody>
</table>
</div>
<script type="math/tex; mode=display">\ce{$V$^{4'}_{Ti}}</script><p><code>\ce{$V$^{4&#39;}_{Ti}}</code></p>
<script type="math/tex; mode=display">\ce{V_{V,1}C_{C,0.8}$V$_{C,0.2}}</script><p><code>\ce{V_{V,1}C_{C,0.8}$V$_{C,0.2}}</code></p>
<script type="math/tex; mode=display">\ce{Li^x_{Li,1-2x}Mg^._{Li,x}$V$'_{Li,x}Cl^x_{Cl}}</script><p><code>\ce{Li^x_{Li,1-2x}Mg^._{Li,x}$V$&#39;_{Li,x}Cl^x_{Cl}}</code></p>
<h2 id="方程式操作符"><a href="#方程式操作符" class="headerlink" title="方程式操作符"></a>方程式操作符</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{A + B}$</td>
<td><code>\ce{A + B}</code></td>
</tr>
<tr>
<td>$\ce{A - B}$</td>
<td><code>\ce{A - B}</code></td>
</tr>
<tr>
<td>$\ce{A = B}$</td>
<td><code>\ce{A = B}</code></td>
</tr>
<tr>
<td>$\ce{A \pm B}$</td>
<td><code>\ce{A \pm B}</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="沉淀与气体"><a href="#沉淀与气体" class="headerlink" title="沉淀与气体"></a>沉淀与气体</h2><p>$\ce{A v B (v) -&gt; B ^ B (^)}$<br><code>\ce{A v B (v) -&gt; B ^ B (^)}</code></p>
<h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ce{NO^*}$</td>
<td><code>\ce{NO^*}</code></td>
</tr>
<tr>
<td>$\ce{1s^2-N}$</td>
<td><code>\ce{1s^2-N}</code></td>
</tr>
<tr>
<td>$\ce{n-Pr}$</td>
<td><code>\ce{n-Pr}</code></td>
</tr>
<tr>
<td>$\ce{iPr}$</td>
<td><code>\ce{iPr}</code></td>
</tr>
<tr>
<td>$\ce{\ca Fe}$</td>
<td><code>\ce{\ca Fe}</code></td>
</tr>
<tr>
<td>$\ce{A, B, C; F}$</td>
<td><code>\ce{A, B, C; F}</code></td>
</tr>
</tbody>
</table>
</div>
<script type="math/tex; mode=display">\ce{Zn^2+  <=>[+ 2OH-][+ 2H+]  $\underset{\text{amphoteres Hydroxid}}{\ce{Zn(OH)2 v}}$  <=>[+ 2OH-][+ 2H+]  $\underset{\text{Hydroxozikat}}{\ce{[Zn(OH)4]^2-}}$}</script><p><code>\ce{Zn^2+  &lt;=&gt;[+ 2OH-][+ 2H+]  $\underset{\text{amphoteres Hydroxid}}{\ce{Zn(OH)2 v}}$  &lt;=&gt;[+ 2OH-][+ 2H+]  $\underset{\text{Hydroxozikat}}{\ce{[Zn(OH)4]^2-}}$}</code></p>
<script type="math/tex; mode=display">\ce{$K = \frac{[\ce{Hg^2+}][\ce{Hg}]}{[\ce{Hg2^2+}]}$}</script><p><code>\ce{$K = \frac{[\ce{Hg^2+}][\ce{Hg}]}{[\ce{Hg2^2+}]}$}</code></p>
<script type="math/tex; mode=display">\ce{$K = \ce{\frac{[Hg^2+][Hg]}{[Hg2^2+]}}$}</script><p><code>\ce{$K = \ce{\frac{[Hg^2+][Hg]}{[Hg2^2+]}}$}</code></p>
<script type="math/tex; mode=display">\ce{Hg^2+ ->[I-] $\underset{\mathrm{red}}{\ce{HgI2}}$ ->[I-] 
 $\underset{\mathrm{red}}{\ce{[Hg^{II}I4]^2-}}$}</script><p><code>\ce{Hg^2+ -&gt;[I-] $\underset{\mathrm{red}}{\ce{HgI2}}$ -&gt;[I-]  $\underset{\mathrm{red}}{\ce{[Hg^{II}I4]^2-}}$}</code></p>
]]></content>
      <tags>
        <tag>测试</tag>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title>KaTeX指令手册-中文文档</title>
    <url>/article/katex-supported-functions/</url>
    <content><![CDATA[<p>汉化自 <a href="https://katex.org/docs/supported.html" target="_blank" rel="noopener">Supported functions - KaTeX</a></p>
<p>注意: 本博客采用MathJax渲染, 写这篇博客的初衷也是比较二者支持指令的异同, 渲染结果请以原文为准</p>
<a id="more"></a>
<p>此处列出KaTeX所支持所有的TeX指令, 按字母顺序排列的表格(包括不支持的指令)<a href="https://katex.org/docs/support_table.html" target="_blank" rel="noopener">点此</a></p>
<h2 id="变音符号"><a href="#变音符号" class="headerlink" title="变音符号"></a>变音符号</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$a’$ <code>a&#39;</code></td>
<td style="text-align:left">$\tilde{a}$ <code>\tilde{a}</code></td>
<td style="text-align:left">$\mathring{g}$ <code>\mathring{g}</code></td>
</tr>
<tr>
<td style="text-align:left">$a’’$ <code>a&#39;&#39;</code></td>
<td style="text-align:left">$\widetilde{ac}$ <code>\widetilde{ac}</code></td>
<td style="text-align:left">$\overgroup{AB}$ <code>\overgroup{AB}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$a^{\prime}$ <code>a^{\prime}</code></td>
<td style="text-align:left">$\utilde{AB}$ <code>\utilde{AB}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\undergroup{AB}$ <code>\undergroup{AB}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\acute{a}$ <code>\acute{a}</code></td>
<td style="text-align:left">$\vec{F}$ <code>\vec{F}</code></td>
<td style="text-align:left">$\Overrightarrow{AB}$ <code>\Overrightarrow{AB}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\bar{y}$ <code>\bar{y}</code></td>
<td style="text-align:left">$\overleftarrow{AB}$ <code>\overleftarrow{AB}</code></td>
<td style="text-align:left">$\overrightarrow{AB}$ <code>\overrightarrow{AB}</code></td>
</tr>
<tr>
<td style="text-align:left">$\breve{a}$ <code>\breve{a}</code></td>
<td style="text-align:left">$\underleftarrow{AB}$ <code>\underleftarrow{AB}</code></td>
<td style="text-align:left">$\underrightarrow{AB}$ <code>\underrightarrow{AB}</code></td>
</tr>
<tr>
<td style="text-align:left">$\check{a}$ <code>\check{a}</code></td>
<td style="text-align:left">$\overleftharpoon{ac}$ <code>\overleftharpoon{ac}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\overrightharpoon{ac}$ <code>\overrightharpoon{ac}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\dot{a}$ <code>\dot{a}</code></td>
<td style="text-align:left">$\overleftrightarrow{AB}$ <code>\overleftrightarrow{AB}</code></td>
<td style="text-align:left">$\overbrace{AB}$ <code>\overbrace{AB}</code></td>
</tr>
<tr>
<td style="text-align:left">$\ddot{a}$ <code>\ddot{a}</code></td>
<td style="text-align:left">$\underleftrightarrow{AB}$ <code>\underleftrightarrow{AB}</code></td>
<td style="text-align:left">$\underbrace{AB}$ <code>\underbrace{AB}</code></td>
</tr>
<tr>
<td style="text-align:left">$\grave{a}$ <code>\grave{a}</code></td>
<td style="text-align:left">$\overline{AB}$ <code>\overline{AB}</code></td>
<td style="text-align:left">$\overlinesegment{AB}$ <code>\overlinesegment{AB}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\hat{\theta}$ <code>\hat{\theta}</code></td>
<td style="text-align:left">$\underline{AB}$ <code>\underline{AB}</code></td>
<td style="text-align:left">$\underlinesegment{AB}$ <code>\underlinesegment{AB}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\widehat{ac}$ <code>\widehat{ac}</code></td>
<td style="text-align:left">$\widecheck{ac}$ <code>\widecheck{ac}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
</tbody>
</table>
</div>
<h3 id="用在-text-…-内的指令7"><a href="#用在-text-…-内的指令7" class="headerlink" title="用在\\text{…}内的指令7"></a>用在\\text{…}内的指令<sup><a href="#fn_7" id="reffn_7">7</a></sup></h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\text{\’{a}}$ <code>\&#39;{a}</code></td>
<td style="text-align:left">$\text{~{a}}$ <code>\~{a}</code></td>
<td style="text-align:left">$\text{.{a}}$ <code>\.{a}</code></td>
<td style="text-align:left">$\text{\H{a}}$ <code>\H{a}</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{`{a}}$ <code>\\&#96;{a}</code></td>
<td style="text-align:left">$\text{\={a}}$ <code>\={a}</code></td>
<td style="text-align:left">$\text{\”{a}}$ <code>\&quot;{a}</code></td>
<td style="text-align:left">$\text{\v{a}}$ <code>\v{a}</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\^{a}}$ <code>\^{a}</code></td>
<td style="text-align:left">$\text{\u{a}}$ <code>\u{a}</code></td>
<td style="text-align:left">$\text{\r{a}}$ <code>\r{a}</code></td>
</tr>
</tbody>
</table>
</div>
<p>另见 <a href="#字母和Unicode字符">字母和Unicode字符</a></p>
<h2 id="定界符"><a href="#定界符" class="headerlink" title="定界符"></a>定界符</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(~)$ <code>( )</code></td>
<td style="text-align:left">$\lparen~\rparen$ <code>\lparen</code> <code>\rparen</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$⌈~⌉$ <code>⌈ ⌉</code></td>
<td style="text-align:left">$\lceil~\rceil$ <code>\lceil</code> <code>\rceil</code></td>
<td style="text-align:left">$\uparrow$ <code>\uparrow</code></td>
</tr>
<tr>
<td style="text-align:left">$[~]$ <code>[ ]</code></td>
<td style="text-align:left">$\lbrack~\rbrack$ <code>\lbrack</code> <code>\rbrack</code></td>
<td style="text-align:left">$⌊~⌋$ <code>⌊ ⌋</code></td>
<td style="text-align:left">$\lfloor~\rfloor$ <code>\lfloor</code> <code>\rfloor</code></td>
<td style="text-align:left">$\downarrow$ <code>\downarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\{ \}$ <code>\{ \}</code></td>
<td style="text-align:left">$\lbrace \rbrace$ <code>\lbrace</code> <code>\rbrace</code></td>
<td style="text-align:left">$⎰⎱$ <code>⎰⎱</code></td>
<td style="text-align:left">$\lmoustache \rmoustache$ <code>\lmoustache</code> <code>\rmoustache</code></td>
<td style="text-align:left">$\updownarrow$ <code>\updownarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$⟨~⟩$ <code>⟨ ⟩</code></td>
<td style="text-align:left">$\langle~\rangle$ <code>\langle</code> <code>\rangle</code></td>
<td style="text-align:left">$⟮~⟯$ <code>⟮ ⟯</code></td>
<td style="text-align:left">$\lgroup~\rgroup$ <code>\lgroup</code> <code>\rgroup</code></td>
<td style="text-align:left">$\Uparrow$ <code>\Uparrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\vert$ <code>&#124;</code></td>
<td style="text-align:left">$\vert$ <code>\vert</code></td>
<td style="text-align:left">$┌ ┐$ <code>┌ ┐</code></td>
<td style="text-align:left">$\ulcorner \urcorner$ <code>\ulcorner</code> <code>\urcorner</code></td>
<td style="text-align:left">$\Downarrow$ <code>\Downarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\Vert$ <code>&#92;&#124;</code></td>
<td style="text-align:left">$\Vert$ <code>\Vert</code></td>
<td style="text-align:left">$└ ┘$ <code>└ ┘</code></td>
<td style="text-align:left">$\llcorner \lrcorner$ <code>\llcorner</code> <code>\lrcorner</code></td>
<td style="text-align:left">$\Updownarrow$ <code>\Updownarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\lvert~\rvert$ <code>\lvert</code> <code>\rvert</code></td>
<td style="text-align:left">$\lVert~\rVert$ <code>\lVert</code> <code>\rVert</code></td>
<td style="text-align:left"><code>\left.</code></td>
<td style="text-align:left"><code>\right.</code></td>
<td style="text-align:left">$\backslash$ <code>\backslash</code></td>
</tr>
<tr>
<td style="text-align:left">$\lang~\rang$ <code>\lang</code> <code>\rang</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\lt~\gt$ <code>\lt \gt</code></td>
<td style="text-align:left">$⟦~⟧$ <code>⟦ ⟧</code></td>
<td style="text-align:left">$\llbracket~\rrbracket$ <code>\llbracket</code> <code>\rrbracket</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\lBrace~\rBrace$ <code>\lBrace \rBrace</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
</tbody>
</table>
</div>
<h3 id="控制大小"><a href="#控制大小" class="headerlink" title="控制大小"></a>控制大小</h3><p>$\left(\LARGE{AB}\right)$ <code>\left(\LARGE{AB}\right)</code><sup><a href="#fn_5" id="reffn_5">5</a></sup></p>
<p>$( \big( \Big( \bigg( \Bigg($ <code>( \big( \Big( \bigg( \Bigg(</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>\left</code></td>
<td style="text-align:left"><code>\big</code></td>
<td style="text-align:left"><code>\bigl</code></td>
<td style="text-align:left"><code>\bigm</code></td>
<td style="text-align:left"><code>\bigr</code></td>
</tr>
<tr>
<td style="text-align:left"><code>\middle</code></td>
<td style="text-align:left"><code>\Big</code></td>
<td style="text-align:left"><code>\Bigl</code></td>
<td style="text-align:left"><code>\Bigm</code></td>
<td style="text-align:left"><code>\Bigr</code></td>
</tr>
<tr>
<td style="text-align:left"><code>\right</code></td>
<td style="text-align:left"><code>\bigg</code></td>
<td style="text-align:left"><code>\biggl</code></td>
<td style="text-align:left"><code>\biggm</code></td>
<td style="text-align:left"><code>\biggr</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>\Bigg</code></td>
<td style="text-align:left"><code>\Biggl</code></td>
<td style="text-align:left"><code>\Biggm</code></td>
<td style="text-align:left"><code>\Biggr</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>因为表格内换行不是很方便, 所以这里选择直接列出</p>
<p>$\begin{matrix}<br>  a &amp; b \\<br>  c &amp; d<br>\end{matrix}$<br> <code>\begin{matrix} a &amp; b \\ c &amp; d \end{matrix}</code> </p>
<p>$\begin{array}{cc}<br>  a &amp; b\\<br>  c &amp; d<br>\end{array}$<br> <code>\begin{array}{cc} a &amp; b \\ c &amp; d \end{array}</code></p>
<p>$\begin{pmatrix}<br>  a &amp; b \\<br>  c &amp; d<br>\end{pmatrix}$<br><code>\begin{pmatrix} a &amp; b \\ c &amp; d \end{pmatrix}</code> </p>
<p>$\begin{bmatrix}<br>  a &amp; b \\<br>  c &amp; d<br>\end{bmatrix}$<br> <code>\begin{bmatrix} a &amp; b \\ c &amp; d \end{bmatrix}</code></p>
<p>$\begin{vmatrix}<br>  a &amp; b \\<br>  c &amp; d<br>\end{vmatrix}$<br><code>\begin{vmatrix} a &amp; b \\ c &amp; d \end{vmatrix}</code> </p>
<p>$\begin{Vmatrix}<br>  a &amp; b \\<br>  c &amp; d<br>\end{Vmatrix}$<br><code>\begin{Vmatrix} a &amp; b \\ c &amp; d \end{Vmatrix}</code></p>
<p>$\begin{Bmatrix}<br>  a &amp; b \\<br>  c &amp; d<br>\end{Bmatrix}$<br><code>\begin{Bmatrix} a &amp; b \\ c &amp; d \end{Bmatrix}</code></p>
<p>$\def\arraystretch{1.5}\begin{array}{c:c:c}<br>  a &amp; b &amp; c \\<br>  \hline d &amp; e &amp; f \\<br>  \hdashline g &amp; h &amp; i<br>\end{array}$<br><code>\def\arraystretch{1.5} \begin{array}{c:c:c} a &amp; b &amp; c \\ \hline d &amp; e &amp; f \\ \hdashline g &amp; h &amp; i \end{array}</code></p>
<p>$\begin{aligned}<br>  a&amp;=b+c \\<br>  d+e&amp;=f<br>\end{aligned}$<br><code>\begin{aligned} a&amp;=b+c \\ d+e&amp;=f \end{aligned}</code></p>
<p>$\begin{alignedat}{2}<br>  10&amp;x+&amp;3&amp;y=2\\<br>  3&amp;x+&amp;13&amp;y=4<br>\end{alignedat}$<br><code>\begin{alignedat}{2} 10&amp;x+ &amp;3&amp;y = 2 \\  3&amp;x+&amp;13&amp;y = 4 \end{alignedat}</code></p>
<p>$\begin{gathered}<br>  a=b \\<br>  e=b+c<br>\end{gathered}$<br><code>\begin{gathered} a=b \\ e=b+c \end{gathered}</code></p>
<p>$x = \begin{cases}<br>  a &amp;\text{if } b \\<br>  c &amp;\text{if } d<br>\end{cases}$<br><code>x = \begin{cases} a &amp;\text{if } b \\ c &amp;\text{if } d \end{cases}</code></p>
<p>$\begin{smallmatrix}<br>  a &amp; b \\<br>  c &amp; d<br>\end{smallmatrix}$<br> <code>\begin{smallmatrix} a &amp; b \\ c &amp; d \end{smallmatrix}</code> </p>
<p>$\begin{rcases}<br>  a &amp;\text{if } b \\<br>  c &amp;\text{if } d<br>\end{rcases}⇒…$<br><code>\begin{rcases} a &amp;\text{if } b \\ c &amp;\text{if } d \end{rcases}⇒…</code><sup><a href="#fn_3" id="reffn_3">3</a></sup></p>
<p>KaTeX也支持 <code>darray</code>, <code>dcases</code>, 和 <code>drcases</code></p>
<p>支持的换行符有: <code>\\</code>, <code>\cr</code>, <code>\\[distance]</code>, and <code>\cr[distance]</code>, Distance允许<a href="#单位">单位</a>中提到的一切单位</p>
<p><code>{array}</code>下支持的垂直分隔符有 <code>|</code>和<code>:</code></p>
<p><code>{array}</code>下目前不支持<code>\cline</code>和<code>\multicolumn</code></p>
<h2 id="HTML8"><a href="#HTML8" class="headerlink" title="HTML8"></a>HTML<sup><a href="#fn_8" id="reffn_8">8</a></sup></h2><p>“原始HTML”功能对于不受信任的链接可能具有风险, 所以该功能默认关闭, 在调用时会变红 (可配置<code>errorColor</code>选项改变 <a href="https://katex.org/docs/options.html" target="_blank" rel="noopener">参见</a>)</p>
<p>若要完全信任LaTeX输入, 需要将<code>trust</code>选项设置为<code>true</code>, 你也可以通过该选项来设置信任命令或URL <a href="https://katex.org/docs/options.html" target="_blank" rel="noopener">参见</a></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\href{<a href="https://katex.org/}{\KaTeX}$" target="_blank" rel="noopener">https://katex.org/}{\KaTeX}$</a></td>
<td style="text-align:left"><code>\href{https://katex.org/}{\KaTeX}</code></td>
</tr>
<tr>
<td style="text-align:left">$\url{<a href="https://katex.org/}$" target="_blank" rel="noopener">https://katex.org/}$</a></td>
<td style="text-align:left"><code>\url{https://katex.org/}</code></td>
</tr>
<tr>
<td style="text-align:left">$\includegraphics[height=0.8em, totalheight=0.9em, width=0.9em, alt=KA logo]{<a href="https://katex.org/img/khan-academy.png}$" target="_blank" rel="noopener">https://katex.org/img/khan-academy.png}$</a></td>
<td style="text-align:left"><code>\includegraphics[height=0.8em, totalheight=0.9em, width=0.9em, alt=KA logo]{https://katex.org/img/khan-academy.png}</code></td>
</tr>
<tr>
<td style="text-align:left">$\htmlId{bar}{x}$</td>
<td style="text-align:left"><code>\htmlId{bar}{x}</code></td>
</tr>
<tr>
<td style="text-align:left">$\htmlClass{foo}{x}$</td>
<td style="text-align:left"><code>\htmlClass{foo}{x}</code></td>
</tr>
<tr>
<td style="text-align:left">$\htmlStyle{color: red;}{x}$</td>
<td style="text-align:left"><code>\htmlStyle{color: red;}{x}</code></td>
</tr>
<tr>
<td style="text-align:left">$\htmlData{foo=a, bar=b}{x}$</td>
<td style="text-align:left"><code>\htmlData{foo=a, bar=b}{x}</code></td>
</tr>
</tbody>
</table>
</div>
<p><code>\includegraphics</code> 的第一个参数可填 <code>height</code>, <code>width</code>, <code>totalheight</code>, 和 <code>alt</code>, 其中<code>height</code>是必要的</p>
<p>HTML扩展(以<code>\html</code>为前缀)命令是非标准命令, 因此需要取消<code>htmlExtension</code>的<code>strict</code>选项</p>
<h2 id="字母和Unicode字符"><a href="#字母和Unicode字符" class="headerlink" title="字母和Unicode字符"></a>字母和Unicode字符</h2><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><p>可直接使用如下符号:<br>$Α Β Γ Δ Ε Ζ Η Θ Ι Κ Λ Μ Ν Ξ Ο Π Ρ Σ Τ Υ Φ Χ Ψ Ω$<br>$α β γ δ ϵ ζ η θ ι κ λ μ ν ξ o π ρ σ τ υ ϕ χ ψ ω ε ϑ ϖ ϱ ς φ ϝ$</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\Alpha$ <code>\Alpha</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Beta$ <code>\Beta</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Gamma$ <code>\Gamma</code></td>
<td>$\Delta$ <code>\Delta</code></td>
</tr>
<tr>
<td>$\Epsilon$ <code>\Epsilon</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Zeta$ <code>\Zeta</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Eta$ <code>\Eta</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Theta$ <code>\Theta</code></td>
</tr>
<tr>
<td>$\Iota$ <code>\Iota</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Kappa$ <code>\Kappa</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Lambda$ <code>\Lambda</code></td>
<td>$\Mu$ <code>\Mu</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td>$\Nu$ <code>\Nu</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Xi$ <code>\Xi</code></td>
<td>$\Omicron$ <code>\Omicron</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Pi$ <code>\Pi</code></td>
</tr>
<tr>
<td>$\Rho$ <code>\Rho</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Sigma$ <code>\Sigma</code></td>
<td>$\Tau$ <code>\Tau</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Upsilon$ <code>\Upsilon</code></td>
</tr>
<tr>
<td>$\Phi$ <code>\Phi</code></td>
<td>$\Chi$ <code>\Chi</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Psi$ <code>\Psi</code></td>
<td>$\Omega$ <code>\Omega</code></td>
</tr>
<tr>
<td>$\varGamma$ <code>\varGamma</code></td>
<td>$\varDelta$ <code>\varDelta</code></td>
<td>$\varTheta$ <code>\varTheta</code></td>
<td>$\varLambda$ <code>\varLambda</code></td>
</tr>
<tr>
<td>$\varXi$ <code>\varXi</code></td>
<td>$\varPi$ <code>\varPi</code></td>
<td>$\varSigma$ <code>\varSigma</code></td>
<td>$\varUpsilon$ <code>\varUpsilon</code></td>
</tr>
<tr>
<td>$\varPhi$ <code>\varPhi</code></td>
<td>$\varPsi$ <code>\varPsi</code></td>
<td>$\varOmega$ <code>\varOmega</code></td>
<td></td>
</tr>
<tr>
<td>$\alpha$ <code>\alpha</code></td>
<td>$\beta$ <code>\beta</code></td>
<td>$\gamma$ <code>\gamma</code></td>
<td>$\delta$ <code>\delta</code></td>
</tr>
<tr>
<td>$\epsilon$ <code>\epsilon</code></td>
<td>$\zeta$ <code>\zeta</code></td>
<td>$\eta$ <code>\eta</code></td>
<td>$\theta$ <code>\theta</code></td>
</tr>
<tr>
<td>$\iota$ <code>\iota</code></td>
<td>$\kappa$ <code>\kappa</code></td>
<td>$\lambda$ <code>\lambda</code></td>
<td>$\mu$ <code>\mu</code></td>
</tr>
<tr>
<td>$\nu$ <code>\nu</code></td>
<td>$\xi$ <code>\xi</code></td>
<td>$\omicron$ <code>\omicron</code></td>
<td>$\pi$ <code>\pi</code></td>
</tr>
<tr>
<td>$\rho$ <code>\rho</code></td>
<td>$\sigma$ <code>\sigma</code></td>
<td>$\tau$ <code>\tau</code></td>
<td>$\upsilon$ <code>\upsilon</code></td>
</tr>
<tr>
<td>$\phi$ <code>\phi</code></td>
<td>$\chi$ <code>\chi</code></td>
<td>$\psi$ <code>\psi</code></td>
<td>$\omega$ <code>\omega</code></td>
</tr>
<tr>
<td>$\varepsilon$ <code>\varepsilon</code></td>
<td>$\varkappa$ <code>\varkappa</code></td>
<td>$\vartheta$ <code>\vartheta</code></td>
<td>$\thetasym$ <code>\thetasym</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td>$\varpi$ <code>\varpi</code></td>
<td>$\varrho$ <code>\varrho</code></td>
<td>$\varsigma$ <code>\varsigma</code></td>
<td>$\varphi$ <code>\varphi</code></td>
</tr>
<tr>
<td>$\digamma$ <code>\digamma</code></td>
</tr>
</tbody>
</table>
</div>
<h3 id="其他字母"><a href="#其他字母" class="headerlink" title="其他字母"></a>其他字母</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\imath$ <code>\imath</code></td>
<td style="text-align:left">$\nabla$ <code>\nabla</code></td>
<td style="text-align:left">$\Im$ <code>\Im</code></td>
<td style="text-align:left">$\Reals$ <code>\Reals</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\text{\OE}$ <code>\text{\OE}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\jmath$ <code>\jmath</code></td>
<td style="text-align:left">$\partial$ <code>\partial</code></td>
<td style="text-align:left">$\image$ <code>\image</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\wp$ <code>\wp</code></td>
<td style="text-align:left">$\text{\o}$ <code>\text{\o}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\aleph$ <code>\aleph</code></td>
<td style="text-align:left">$\Game$ <code>\Game</code></td>
<td style="text-align:left">$\Bbbk$ <code>\Bbbk</code></td>
<td style="text-align:left">$\weierp$ <code>\weierp</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\text{\O}$ <code>\text{\O}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\alef$ <code>\alef</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\Finv$ <code>\Finv</code></td>
<td style="text-align:left">$\N$ <code>\N</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\Z$ <code>\Z</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\text{\ss}$ <code>\text{\ss}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\alefsym$ <code>\alefsym</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\cnums$ <code>\cnums</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\natnums$ <code>\natnums</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\text{\aa}$ <code>\text{\aa}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\text{\i}$ <code>\text{\i}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\beth$ <code>\beth</code></td>
<td style="text-align:left">$\Complex$ <code>\Complex</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\R$ <code>\R</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\text{\AA}$ <code>\text{\AA}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\text{\j}$ <code>\text{\j}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\gimel$ <code>\gimel</code></td>
<td style="text-align:left">$\ell$ <code>\ell</code></td>
<td style="text-align:left">$\Re$ <code>\Re</code></td>
<td style="text-align:left">$\text{\ae}$ <code>\text{\ae}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\daleth$ <code>\daleth</code></td>
<td style="text-align:left">$\hbar$ <code>\hbar</code></td>
<td style="text-align:left">$\real$ <code>\real</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\text{\AE}$ <code>\text{\AE}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\eth$ <code>\eth</code></td>
<td style="text-align:left">$\hslash$ <code>\hslash</code></td>
<td style="text-align:left">$\reals$ <code>\reals</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\text{\oe}$ <code>\text{\oe}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
</tbody>
</table>
</div>
<p>可直接使用如下符号:<br>$∂ ∇ ℑ Ⅎ ℵ ℶ ℷ ℸ ⅁ ℏ ð$<br>ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖÙÚÛÜÝÞßàáâãäåçèéêëìíîïðñòóôöùúûüýþÿ</p>
<h3 id="Unicode字符"><a href="#Unicode字符" class="headerlink" title="Unicode字符"></a>Unicode字符</h3><div class="table-container">
<table>
<thead>
<tr>
<th>条目</th>
<th>范围</th>
<th>条目</th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bold</td>
<td>$\text{𝐀-𝐙 𝐚-𝐳 𝟎-𝟗}$</td>
<td>Double-struck</td>
<td>$\text{𝔸-}ℤ 𝕜$</td>
</tr>
<tr>
<td>Italic</td>
<td>$\text{𝐴-𝑍 𝑎-𝑧}$</td>
<td>Sans serif</td>
<td>$\text{𝖠-𝖹 𝖺-𝗓 𝟢-𝟫}$</td>
</tr>
<tr>
<td>Bold Italic</td>
<td>$\text{𝑨-𝒁 𝒂-𝒛}$</td>
<td>Sans serif bold</td>
<td>$\text{𝗔-𝗭 𝗮-𝘇 𝟬-𝟵}$</td>
</tr>
<tr>
<td>Script</td>
<td>$\text{𝒜-𝒵}$</td>
<td>Sans serif italic</td>
<td>$\text{𝘈-𝘡 𝘢-𝘻}$</td>
</tr>
<tr>
<td>Fractur</td>
<td>$\text{𝔄-}ℨ\text{ 𝔞-𝔷}$</td>
<td>Monospace</td>
<td>$\text{𝙰-𝚉 𝚊-𝚣 𝟶-𝟿}$</td>
</tr>
</tbody>
</table>
</div>
<p><strong>Unicode</strong></p>
<p>上表列出的所有字母在KaTeX任何渲染模式下都能正确渲染</p>
<p>此外, 文本模式(text mode)支持梵文, 格鲁吉亚文, 中文, 日文和韩文字形, 但只能以系统字体渲染, 所以可能发生版式冲突<br>你可以在CSS类中提供规则 <code>.latin-fallback</code>, <code>.cyrillic-fallback</code>, <code>.brahmic-fallback</code>, <code>.georgian-fallback</code>, <code>.cjk-fallback</code> 和 <code>.hangul-fallback</code> 来提供备选字体<br>这些字体可能导致轻微的垂直对齐问题. 因为KaTeX对绝大多数拉丁字母, 希腊字母和西里尔字母均有详细的度量标准, 其他字形均视作与当前KaTeX字体中的M等高</p>
<p>如果KaTeX渲染模式为 <code>strict: false</code> 或 <code>strict: &quot;warn&quot;</code> (默认), 则KaTeX在文本模式(text mode)和数学模式(math mode)下均支持所有Unicode字符<br>所有未识别字符均按照文本模式(text mode)处理, 因此同样可能会出现上述垂直对齐问题</p>
<p>对于波斯语复合字符, 有一个<a href="https://github.com/HosseinAgha/persian-katex-plugin" target="_blank" rel="noopener">第三方插件</a>正在开发</p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\cancel{5}$ <code>\cancel{5}</code></td>
<td style="text-align:left">$\overbrace{a+b+c}^{\text{note}}$ <code>\overbrace{a+b+c}^{\text{note}}</code></td>
</tr>
<tr>
<td style="text-align:left">$\bcancel{5}$ <code>\bcancel{5}</code></td>
<td style="text-align:left">$\underbrace{a+b+c}_{\text{note}}$ <code>\underbrace{a+b+c}_{\text{note}}</code></td>
</tr>
<tr>
<td style="text-align:left">$\xcancel{ABC}$ <code>\xcancel{ABC}</code></td>
<td style="text-align:left">$\not =$ <code>\not =</code></td>
</tr>
<tr>
<td style="text-align:left">$\sout{abc}$ <code>\sout{abc}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\boxed{\pi=\frac c d}$ <code>\boxed{\pi=\frac c d}</code></td>
</tr>
</tbody>
</table>
</div>
<p><code>\tag{hi} x+y^{2x}</code></p>
<script type="math/tex; mode=display">\tag{hi} x+y^{2x}</script><p><code>\tag*{hi} x+y^{2x}</code></p>
<script type="math/tex; mode=display">\tag*{hi} x+y^{2x}</script><h3 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h3><p>0.10.0以上版本的KaTeX会在行内表达式(inline math)中的关系符或二元运算符(如”=”或”+”)之后自动换行, 可通过<code>\nobreak</code>指令或将表达式置于大括号内(如<code>{F=ma}</code>)来取消. <code>\allowbreak</code>指令允许在除关系符和运算符之外的位置自动换行</p>
<p>强制换行符(Hard line breaks)为<code>\\</code> 和 <code>\newline</code></p>
<p>在行间公式(display math)中, KaTeX不会自动换行. 当渲染选项为<code>strict: true</code>时忽略行间公式(display math)中的强制换行符(Hard line breaks)</p>
<h3 id="垂直布局"><a href="#垂直布局" class="headerlink" title="垂直布局"></a>垂直布局</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$x_n$ <code>x_n</code></td>
<td style="text-align:left">$\stackrel{!}{=}$ <code>\stackrel{!}{=}</code></td>
<td style="text-align:left">$a \atop b$ <code>a \atop b</code></td>
</tr>
<tr>
<td style="text-align:left">$e^x$ <code>e^x</code></td>
<td style="text-align:left">$\overset{!}{=}$ <code>\overset{!}{=}</code></td>
<td style="text-align:left">$a\raisebox{0.25em}{b}c$ <code>a\raisebox{0.25em}{b}c</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$_u^o $ <code>_u^o</code></td>
<td style="text-align:left">$\underset{!}{=}$ <code>\underset{!}{=}</code></td>
<td style="text-align:left">$\sum_{\substack{0&lt;i&lt;m\\0&lt;j&lt;n}}$ <code>\sum_{\substack{0&lt;i&lt;m\\0&lt;j&lt;n}}</code></td>
</tr>
</tbody>
</table>
</div>
<p><code>\raisebox</code>的第二个参数可嵌套<code>$...$</code>片段, 如<code>\raisebox{0.25em}{$\frac a b$}</code></p>
<h3 id="重叠与间距"><a href="#重叠与间距" class="headerlink" title="重叠与间距"></a>重叠与间距</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">${=}\mathllap{/\,}$ <code>{=}\mathllap{/\,}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\left(x^{\smash{2}}\right)$ <code>\left(x^{\smash{2}}\right)</code></td>
</tr>
<tr>
<td style="text-align:left">$\mathrlap{\,/}{=}$ <code>\mathrlap{\,/}{=}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\sqrt{\smash[b]{y}}$ <code>\sqrt{\smash[b]{y}}</code></td>
</tr>
</tbody>
</table>
</div>
<p>$\displaystyle\sum_{\mathclap{1\le i\le j\le n}} x_{ij}$ <code>\sum_{\mathclap{1\le i\le j\le n}} x_{ij}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></p>
<p>(当$\Sigma$下界过长时, <code>\mathclap</code>可以让式子更紧凑)</p>
<p>KaTeX也支持<code>\llap</code>, <code>\rlap</code> 和 <code>\clap</code>, 但只能接受文字参数<sup><a href="#fn_1" id="reffn_1">1</a></sup></p>
<h4 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">指令</th>
<th style="text-align:left">结果</th>
<th style="text-align:left">指令</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>\,</code></td>
<td style="text-align:left">³∕₁₈ em space</td>
<td style="text-align:left"><code>\kern{distance}</code></td>
<td style="text-align:left">space, width = *distance*</td>
</tr>
<tr>
<td style="text-align:left"><code>\thinspace</code></td>
<td style="text-align:left">³∕₁₈ em space</td>
<td style="text-align:left"><code>\mkern{distance}</code></td>
<td style="text-align:left">space, width = *distance*</td>
</tr>
<tr>
<td style="text-align:left"><code>\&gt;</code></td>
<td style="text-align:left">⁴∕₁₈ em space</td>
<td style="text-align:left"><code>\mskip{distance}</code></td>
<td style="text-align:left">space, width = *distance*</td>
</tr>
<tr>
<td style="text-align:left"><code>\:</code></td>
<td style="text-align:left">⁴∕₁₈ em space</td>
<td style="text-align:left"><code>\hskip{distance}</code></td>
<td style="text-align:left">space, width = *distance*</td>
</tr>
<tr>
<td style="text-align:left"><code>\medspace</code></td>
<td style="text-align:left">⁴∕₁₈ em space</td>
<td style="text-align:left"><code>\hspace{distance}</code></td>
<td style="text-align:left">space, width = *distance*</td>
</tr>
<tr>
<td style="text-align:left"><code>\;</code></td>
<td style="text-align:left">⁵∕₁₈ em space</td>
<td style="text-align:left"><code>\hspace*{distance}</code></td>
<td style="text-align:left">space, width = *distance*</td>
</tr>
<tr>
<td style="text-align:left"><code>\thickspace</code></td>
<td style="text-align:left">⁵∕₁₈ em space</td>
<td style="text-align:left"><code>\phantom{content}</code></td>
<td style="text-align:left">space the width and height of content</td>
</tr>
<tr>
<td style="text-align:left"><code>\enspace</code></td>
<td style="text-align:left">½ em space</td>
<td style="text-align:left"><code>\hphantom{content}</code></td>
<td style="text-align:left">space the width of content</td>
</tr>
<tr>
<td style="text-align:left"><code>\quad</code></td>
<td style="text-align:left">1 em space</td>
<td style="text-align:left"><code>\vphantom{content}</code></td>
<td style="text-align:left">a strut the height of content</td>
</tr>
<tr>
<td style="text-align:left"><code>\qquad</code></td>
<td style="text-align:left">2 em space</td>
<td style="text-align:left"><code>\!</code></td>
<td style="text-align:left">– ³∕₁₈ em space</td>
</tr>
<tr>
<td style="text-align:left"><code>~</code></td>
<td style="text-align:left">non-breaking space</td>
<td style="text-align:left"><code>\negthinspace</code></td>
<td style="text-align:left">– ³∕₁₈ em space</td>
</tr>
<tr>
<td style="text-align:left"><code>\&lt;space&gt;</code></td>
<td style="text-align:left">space</td>
<td style="text-align:left"><code>\negmedspace</code></td>
<td style="text-align:left">– ⁴∕₁₈ em space</td>
</tr>
<tr>
<td style="text-align:left"><code>\nobreakspace</code></td>
<td style="text-align:left">non-breaking space</td>
<td style="text-align:left"><code>\negthickspace</code></td>
<td style="text-align:left">– ⁵∕₁₈ em space</td>
</tr>
<tr>
<td style="text-align:left"><code>\space</code></td>
<td style="text-align:left">space</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意:</strong></p>
<p><code>distance</code>允许<a href="#单位">单位</a>中提到的一切单位</p>
<p><code>\kern</code>, <code>\mkern</code>, <code>\mskip</code> 和 <code>\hspace</code> 接受无支撑距离(unbraced distances), 如 <code>\kern1em</code></p>
<p><code>\mkern</code> 和 <code>\mskip</code> 在文本模式(text mode)下无效, 且二者均会为除<code>mu</code>外的任何单元输出控制台警告</p>
<h2 id="逻辑与集合论符号"><a href="#逻辑与集合论符号" class="headerlink" title="逻辑与集合论符号"></a>逻辑与集合论符号</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\forall$ <code>\forall</code></td>
<td style="text-align:left">$\complement$ <code>\complement</code></td>
<td style="text-align:left">$\therefore$ <code>\therefore</code></td>
<td style="text-align:left">$\emptyset$ <code>\emptyset</code></td>
</tr>
<tr>
<td style="text-align:left">$\exists$ <code>\exists</code></td>
<td style="text-align:left">$\subset$ <code>\subset</code></td>
<td style="text-align:left">$\because$ <code>\because</code></td>
<td style="text-align:left">$\empty$ <code>\empty</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\exist$ <code>\exist</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\supset$ <code>\supset</code></td>
<td style="text-align:left">$\mapsto$ <code>\mapsto</code></td>
<td style="text-align:left">$\varnothing$ <code>\varnothing</code></td>
</tr>
<tr>
<td style="text-align:left">$\nexists$ <code>\nexists</code></td>
<td style="text-align:left">$\mid$ <code>\mid</code></td>
<td style="text-align:left">$\to$ <code>\to</code></td>
<td style="text-align:left">$\implies$ <code>\implies</code></td>
</tr>
<tr>
<td style="text-align:left">$\in$ <code>\in</code></td>
<td style="text-align:left">$\land$ <code>\land</code></td>
<td style="text-align:left">$\gets$ <code>\gets</code></td>
<td style="text-align:left">$\impliedby$ <code>\impliedby</code></td>
</tr>
<tr>
<td style="text-align:left">$\isin$ <code>\isin</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\lor$ <code>\lor</code></td>
<td style="text-align:left">$\leftrightarrow$ <code>\leftrightarrow</code></td>
<td style="text-align:left">$\iff$ <code>\iff</code></td>
</tr>
<tr>
<td style="text-align:left">$\notin$ <code>\notin</code></td>
<td style="text-align:left">$\ni$ <code>\ni</code></td>
<td style="text-align:left">$\notni$ <code>\notni</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\neg$ <code>\neg</code> or <code>\lnot</code></td>
</tr>
</tbody>
</table>
</div>
<p>可直接使用如下符号:<br>$∀ ∴ ∁ ∵ ∃ ∣ ∈ ∉ ∋ ⊂ ⊃ ∧ ∨ ↦ → ← ↔ ¬$ ℂ ℍ ℕ ℙ ℚ ℝ</p>
<h2 id="宏指令"><a href="#宏指令" class="headerlink" title="宏指令"></a>宏指令</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\def\foo{x^2} \foo + \foo$</td>
<td style="text-align:left"><code>\def\foo{x^2} \foo + \foo</code></td>
</tr>
<tr>
<td style="text-align:left">$\gdef\bar#1{ #1^2} \bar{y} + \bar{y}$<sup><a href="#fn_8" id="reffn_8">8</a></sup></td>
<td style="text-align:left"><code>\gdef\bar#1{&#35;1^2} \bar{y} + \bar{y}</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>\edef\macroname#1#2…{definition to be expanded}</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>\xdef\macroname#1#2…{definition to be expanded}</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>\let\foo=\bar</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>\futurelet\foo\bar x</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>\global\def\macroname#1#2…{definition}</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>\newcommand\macroname[numargs]{definition}</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>\renewcommand\macroname[numargs]{definition}</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>\providecommand\macroname[numargs]{definition}</code></td>
</tr>
</tbody>
</table>
</div>
<p>宏指令也可在KaTeX<a href="https://katex.org/docs/options.html" target="_blank" rel="noopener">渲染模式</a>中设置</p>
<p>宏指令最多接受九个参数: #1, #2,..</p>
<p><code>\gdef</code>, <code>\xdef</code>, <code>\global\def</code>, <code>\global\edef</code>, <code>\global\let</code> 和 <code>\global\futurelet</code> 可在多条数学表达式中保留</p>
<p>KaTeX没有<code>\par</code>, 故所有宏指令长度固定且<code>\long</code>指令无效</p>
<p>可由指令包括<br><code>\char</code> <code>\mathchoice</code> <code>\TextOrMath</code> <code>\@ifstar</code> <code>\@ifnextchar</code> <code>\@firstoftwo</code> <code>\@secondoftwo</code> <code>\relax</code> <code>\expandafter</code> <code>\noexpand</code></p>
<p>@ 在指令中是合法字符, 和<code>\makeatletter</code>作用相同</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="大型运算符"><a href="#大型运算符" class="headerlink" title="大型运算符"></a>大型运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\sum$ <code>\sum</code></td>
<td>$\prod$ <code>\prod</code></td>
<td>$\bigotimes$ <code>\bigotimes</code></td>
<td>$\bigvee$ <code>\bigvee</code></td>
</tr>
<tr>
<td>$\int$ <code>\int</code></td>
<td>$\coprod$ <code>\coprod</code></td>
<td>$\bigoplus$ <code>\bigoplus</code></td>
<td>$\bigwedge$ <code>\bigwedge</code></td>
</tr>
<tr>
<td>$\iint$ <code>\iint</code></td>
<td>$\intop$ <code>\intop</code></td>
<td>$\bigodot$ <code>\bigodot</code></td>
<td>$\bigcap$ <code>\bigcap</code></td>
</tr>
<tr>
<td>$\iiint$ <code>\iiint</code></td>
<td>$\smallint$ <code>\smallint</code></td>
<td>$\biguplus$ <code>\biguplus</code></td>
<td>$\bigcup$ <code>\bigcup</code></td>
</tr>
<tr>
<td>$\oint$ <code>\oint</code></td>
<td>$\oiint$ <code>\oiint</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\oiiint$ <code>\oiiint</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\bigsqcup$ <code>\bigsqcup</code></td>
</tr>
</tbody>
</table>
</div>
<p>可直接使用如下符号:<br>$∫ ∬ ∭ ∮ ∏ ∐ ∑ ⋀ ⋁ ⋂ ⋃ ⨀ ⨁ ⨂ ⨄ ⨆$</p>
<h3 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$+$ <code>+</code></td>
<td>$\cdot$ <code>\cdot</code></td>
<td>$\gtrdot$ <code>\gtrdot</code></td>
<td>$x \pmod a$ <code>x \pmod a</code></td>
</tr>
<tr>
<td>$-$ <code>-</code></td>
<td>$\cdotp$ <code>\cdotp</code></td>
<td>$\intercal$ <code>\intercal</code></td>
<td>$x \pod a$ <code>x \pod a</code></td>
</tr>
<tr>
<td>$/$ <code>/</code></td>
<td>$\centerdot$ <code>\centerdot</code></td>
<td>$\land$ <code>\land</code></td>
<td>$\rhd$ <code>\rhd</code></td>
</tr>
<tr>
<td>$*$ <code>*</code></td>
<td>$\circ$ <code>\circ</code></td>
<td>$\leftthreetimes$ <code>\leftthreetimes</code></td>
<td>$\rightthreetimes$ <code>\rightthreetimes</code></td>
</tr>
<tr>
<td>$\amalg$ <code>\amalg</code></td>
<td>$\circledast$ <code>\circledast</code></td>
<td>$\ldotp$ <code>\ldotp</code></td>
<td>$\rtimes$ <code>\rtimes</code></td>
</tr>
<tr>
<td>$\And$ <code>\And</code></td>
<td>$\circledcirc$ <code>\circledcirc</code></td>
<td>$\lor$ <code>\lor</code></td>
<td>$\setminus$ <code>\setminus</code></td>
</tr>
<tr>
<td>$\ast$ <code>\ast</code></td>
<td>$\circleddash$ <code>\circleddash</code></td>
<td>$\lessdot$ <code>\lessdot</code></td>
<td>$\smallsetminus$ <code>\smallsetminus</code></td>
</tr>
<tr>
<td>$\barwedge$ <code>\barwedge</code></td>
<td>$\Cup$ <code>\Cup</code></td>
<td>$\lhd$ <code>\lhd</code></td>
<td>$\sqcap$ <code>\sqcap</code></td>
</tr>
<tr>
<td>$\bigcirc$ <code>\bigcirc</code></td>
<td>$\cup$ <code>\cup</code></td>
<td>$\ltimes$ <code>\ltimes</code></td>
<td>$\sqcup$ <code>\sqcup</code></td>
</tr>
<tr>
<td>$\bmod$ <code>\bmod</code></td>
<td>$\curlyvee$ <code>\curlyvee</code></td>
<td>$x \mod a$ <code>x\mod a</code></td>
<td>$\times$ <code>\times</code></td>
</tr>
<tr>
<td>$\boxdot$ <code>\boxdot</code></td>
<td>$\curlywedge$ <code>\curlywedge</code></td>
<td>$\mp$ <code>\mp</code></td>
<td>$\unlhd$ <code>\unlhd</code></td>
</tr>
<tr>
<td>$\boxminus$ <code>\boxminus</code></td>
<td>$\div$ <code>\div</code></td>
<td>$\odot$ <code>\odot</code></td>
<td>$\unrhd$ <code>\unrhd</code></td>
</tr>
<tr>
<td>$\boxplus$ <code>\boxplus</code></td>
<td>$\divideontimes$ <code>\divideontimes</code></td>
<td>$\ominus$ <code>\ominus</code></td>
<td>$\uplus$ <code>\uplus</code></td>
</tr>
<tr>
<td>$\boxtimes$ <code>\boxtimes</code></td>
<td>$\dotplus$ <code>\dotplus</code></td>
<td>$\oplus$ <code>\oplus</code></td>
<td>$\vee$ <code>\vee</code></td>
</tr>
<tr>
<td>$\bullet$ <code>\bullet</code></td>
<td>$\doublebarwedge$ <code>\doublebarwedge</code></td>
<td>$\otimes$ <code>\otimes</code></td>
<td>$\veebar$ <code>\veebar</code></td>
</tr>
<tr>
<td>$\Cap$ <code>\Cap</code></td>
<td>$\doublecap$ <code>\doublecap</code></td>
<td>$\oslash$ <code>\oslash</code></td>
<td>$\wedge$ <code>\wedge</code></td>
</tr>
<tr>
<td>$\cap$ <code>\cap</code></td>
<td>$\doublecup$ <code>\doublecup</code></td>
<td>$\pm$ <code>\pm</code> or <code>\plusmn</code></td>
<td>$\wr$ <code>\wr</code></td>
</tr>
</tbody>
</table>
</div>
<p>可直接使用如下符号:<br>$+ - / * ⋅ ± × ÷ ∓ ∔ ∧ ∨ ∩ ∪ ≀ ⊎ ⊓ ⊔ ⊕ ⊖ ⊗ ⊘ ⊙ ⊚ ⊛ ⊝$</p>
<h3 id="分数与二项式"><a href="#分数与二项式" class="headerlink" title="分数与二项式"></a>分数与二项式</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\frac{a}{b}$ <code>\frac{a}{b}</code></td>
<td style="text-align:left">$\tfrac{a}{b}$ <code>\tfrac{a}{b}</code></td>
<td style="text-align:left">$\genfrac ( ] {2pt}{1}a{a+1}$ <code>\genfrac ( ] {2pt}{1}a{a+1}</code></td>
</tr>
<tr>
<td style="text-align:left">${a \over b}$ <code>{a \over b}</code></td>
<td style="text-align:left">$\dfrac{a}{b}$ <code>\dfrac{a}{b}</code></td>
<td style="text-align:left">${a \above{2pt} b+1}$ <code>{a \above{2pt} b+1}</code></td>
</tr>
<tr>
<td style="text-align:left">$a/b$ <code>a/b</code></td>
<td style="text-align:left"></td>
<td style="text-align:left">$\cfrac{a}{1 + \cfrac{1}{b}}$ <code>\cfrac{a}{1 + \cfrac{1}{b}}</code></td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\binom{n}{k}$ <code>\binom{n}{k}</code></td>
<td style="text-align:left">$\dbinom{n}{k}$ <code>\dbinom{n}{k}</code></td>
<td style="text-align:left">${n\brace k}$ <code>{n\brace k}</code></td>
</tr>
<tr>
<td style="text-align:left">${n \choose k}$ <code>{n \choose k}</code></td>
<td style="text-align:left">$\tbinom{n}{k}$ <code>\tbinom{n}{k}</code></td>
<td style="text-align:left">${n\brack k}$ <code>{n\brack k}</code></td>
</tr>
</tbody>
</table>
</div>
<h3 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\arcsin$ <code>\arcsin</code></td>
<td>$\cotg$ <code>\cotg</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\ln$ <code>\ln</code></td>
<td>$\det$ <code>\det</code></td>
</tr>
<tr>
<td>$\arccos$ <code>\arccos</code></td>
<td>$\coth$ <code>\coth</code></td>
<td>$\log$ <code>\log</code></td>
<td>$\gcd$ <code>\gcd</code></td>
</tr>
<tr>
<td>$\arctan$ <code>\arctan</code></td>
<td>$\csc$ <code>\csc</code></td>
<td>$\sec$ <code>\sec</code></td>
<td>$\inf$ <code>\inf</code></td>
</tr>
<tr>
<td>$\arctg$ <code>\arctg</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\ctg$ <code>\ctg</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\sin$ <code>\sin</code></td>
<td>$\lim$ <code>\lim</code></td>
</tr>
<tr>
<td>$\arcctg$ <code>\arcctg</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\cth$ <code>\cth</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\sinh$ <code>\sinh</code></td>
<td>$\liminf$ <code>\liminf</code></td>
</tr>
<tr>
<td>$\arg$ <code>\arg</code></td>
<td>$\deg$ <code>\deg</code></td>
<td>$\sh$ <code>\sh</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\limsup$ <code>\limsup</code></td>
</tr>
<tr>
<td>$\ch$ <code>\ch</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\dim$ <code>\dim</code></td>
<td>$\tan$ <code>\tan</code></td>
<td>$\max$ <code>\max</code></td>
</tr>
<tr>
<td>$\cos$ <code>\cos</code></td>
<td>$\exp$ <code>\exp</code></td>
<td>$\tanh$ <code>\tanh</code></td>
<td>$\min$ <code>\min</code></td>
</tr>
<tr>
<td>$\cosec$ <code>\cosec</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\hom$ <code>\hom</code></td>
<td>$\tg$ <code>\tg</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\Pr$ <code>\Pr</code></td>
</tr>
<tr>
<td>$\cosh$ <code>\cosh</code></td>
<td>$\ker$ <code>\ker</code></td>
<td>$\th$ <code>\th</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\sup$ <code>\sup</code></td>
</tr>
<tr>
<td>$\cot$ <code>\cot</code></td>
<td>$\lg$ <code>\lg</code></td>
<td>$\argmax$ <code>\argmax</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\argmin$ <code>\argmin</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td>$\plim$ <code>\plim</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\operatorname{f}$ <code>\operatorname{f}</code></td>
<td>$\operatorname*{f}$ <code>\operatorname*{f}</code></td>
</tr>
</tbody>
</table>
</div>
<p>该表右列的指令可带有<code>\limits</code></p>
<h3 id="sqrt"><a href="#sqrt" class="headerlink" title="\sqrt"></a>\sqrt</h3><p>$\sqrt{x}$ <code>\sqrt{x}</code></p>
<p>$\sqrt[3]{x}$ <code>\sqrt[3]{x}</code></p>
<h2 id="关系符"><a href="#关系符" class="headerlink" title="关系符"></a>关系符</h2><p>$\stackrel{!}{=}$ <code>\stackrel{!}{=}</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$=$ <code>=</code></td>
<td style="text-align:left">$\eqcirc$ <code>\eqcirc</code></td>
<td style="text-align:left">$\lesseqgtr$ <code>\lesseqgtr</code></td>
<td style="text-align:left">$\sqsupset$ <code>\sqsupset</code></td>
</tr>
<tr>
<td style="text-align:left">$&lt;$ <code>&lt;</code></td>
<td style="text-align:left">$\eqcolon$ <code>\eqcolon</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\lesseqqgtr$ <code>\lesseqqgtr</code></td>
<td style="text-align:left">$\sqsupseteq$ <code>\sqsupseteq</code></td>
</tr>
<tr>
<td style="text-align:left">$&gt;$ <code>&gt;</code></td>
<td style="text-align:left">$\Eqcolon$ <code>\Eqcolon</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\lessgtr$ <code>\lessgtr</code></td>
<td style="text-align:left">$\Subset$ <code>\Subset</code></td>
</tr>
<tr>
<td style="text-align:left">$:$ <code>:</code></td>
<td style="text-align:left">$\eqqcolon$ <code>\eqqcolon</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\lesssim$ <code>\lesssim</code></td>
<td style="text-align:left">$\subset$ <code>\subset</code> or <code>\sub</code></td>
</tr>
<tr>
<td style="text-align:left">$\approx$ <code>\approx</code></td>
<td style="text-align:left">$\Eqqcolon$ <code>\Eqqcolon</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\ll$ <code>\ll</code></td>
<td style="text-align:left">$\subseteq$ <code>\subseteq</code> or <code>\sube</code></td>
</tr>
<tr>
<td style="text-align:left">$\approxeq$ <code>\approxeq</code></td>
<td style="text-align:left">$\eqsim$ <code>\eqsim</code></td>
<td style="text-align:left">$\lll$ <code>\lll</code></td>
<td style="text-align:left">$\subseteqq$ <code>\subseteqq</code></td>
</tr>
<tr>
<td style="text-align:left">$\asymp$ <code>\asymp</code></td>
<td style="text-align:left">$\eqslantgtr$ <code>\eqslantgtr</code></td>
<td style="text-align:left">$\llless$ <code>\llless</code></td>
<td style="text-align:left">$\succ$ <code>\succ</code></td>
</tr>
<tr>
<td style="text-align:left">$\backepsilon$ <code>\backepsilon</code></td>
<td style="text-align:left">$\eqslantless$ <code>\eqslantless</code></td>
<td style="text-align:left">$\lt$ <code>\lt</code></td>
<td style="text-align:left">$\succapprox$ <code>\succapprox</code></td>
</tr>
<tr>
<td style="text-align:left">$\backsim$ <code>\backsim</code></td>
<td style="text-align:left">$\equiv$ <code>\equiv</code></td>
<td style="text-align:left">$\mid$ <code>\mid</code></td>
<td style="text-align:left">$\succcurlyeq$ <code>\succcurlyeq</code></td>
</tr>
<tr>
<td style="text-align:left">$\backsimeq$ <code>\backsimeq</code></td>
<td style="text-align:left">$\fallingdotseq$ <code>\fallingdotseq</code></td>
<td style="text-align:left">$\models$ <code>\models</code></td>
<td style="text-align:left">$\succeq$ <code>\succeq</code></td>
</tr>
<tr>
<td style="text-align:left">$\between$ <code>\between</code></td>
<td style="text-align:left">$\frown$ <code>\frown</code></td>
<td style="text-align:left">$\multimap$ <code>\multimap</code></td>
<td style="text-align:left">$\succsim$ <code>\succsim</code></td>
</tr>
<tr>
<td style="text-align:left">$\bowtie$ <code>\bowtie</code></td>
<td style="text-align:left">$\ge$ <code>\ge</code></td>
<td style="text-align:left">$\owns$ <code>\owns</code></td>
<td style="text-align:left">$\Supset$ <code>\Supset</code></td>
</tr>
<tr>
<td style="text-align:left">$\bumpeq$ <code>\bumpeq</code></td>
<td style="text-align:left">$\geq$ <code>\geq</code></td>
<td style="text-align:left">$\parallel$ <code>\parallel</code></td>
<td style="text-align:left">$\supset$ <code>\supset</code></td>
</tr>
<tr>
<td style="text-align:left">$\Bumpeq$ <code>\Bumpeq</code></td>
<td style="text-align:left">$\geqq$ <code>\geqq</code></td>
<td style="text-align:left">$\perp$ <code>\perp</code></td>
<td style="text-align:left">$\supseteq$ <code>\supseteq</code> or <code>\supe</code></td>
</tr>
<tr>
<td style="text-align:left">$\circeq$ <code>\circeq</code></td>
<td style="text-align:left">$\geqslant$ <code>\geqslant</code></td>
<td style="text-align:left">$\pitchfork$ <code>\pitchfork</code></td>
<td style="text-align:left">$\supseteqq$ <code>\supseteqq</code></td>
</tr>
<tr>
<td style="text-align:left">$\colonapprox$ <code>\colonapprox</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\gg$ <code>\gg</code></td>
<td style="text-align:left">$\prec$ <code>\prec</code></td>
<td style="text-align:left">$\thickapprox$ <code>\thickapprox</code></td>
</tr>
<tr>
<td style="text-align:left">$\Colonapprox$ <code>\Colonapprox</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\ggg$ <code>\ggg</code></td>
<td style="text-align:left">$\precapprox$ <code>\precapprox</code></td>
<td style="text-align:left">$\thicksim$ <code>\thicksim</code></td>
</tr>
<tr>
<td style="text-align:left">$\coloneq$ <code>\coloneq</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\gggtr$ <code>\gggtr</code></td>
<td style="text-align:left">$\preccurlyeq$ <code>\preccurlyeq</code></td>
<td style="text-align:left">$\trianglelefteq$ <code>\trianglelefteq</code></td>
</tr>
<tr>
<td style="text-align:left">$\Coloneq$ <code>\Coloneq</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\gt$ <code>\gt</code></td>
<td style="text-align:left">$\preceq$ <code>\preceq</code></td>
<td style="text-align:left">$\triangleq$ <code>\triangleq</code></td>
</tr>
<tr>
<td style="text-align:left">$\coloneqq$ <code>\coloneqq</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\gtrapprox$ <code>\gtrapprox</code></td>
<td style="text-align:left">$\precsim$ <code>\precsim</code></td>
<td style="text-align:left">$\trianglerighteq$ <code>\trianglerighteq</code></td>
</tr>
<tr>
<td style="text-align:left">$\Coloneqq$ <code>\Coloneqq</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\gtreqless$ <code>\gtreqless</code></td>
<td style="text-align:left">$\propto$ <code>\propto</code></td>
<td style="text-align:left">$\varpropto$ <code>\varpropto</code></td>
</tr>
<tr>
<td style="text-align:left">$\colonsim$ <code>\colonsim</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\gtreqqless$ <code>\gtreqqless</code></td>
<td style="text-align:left">$\risingdotseq$ <code>\risingdotseq</code></td>
<td style="text-align:left">$\vartriangle$ <code>\vartriangle</code></td>
</tr>
<tr>
<td style="text-align:left">$\Colonsim$ <code>\Colonsim</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\gtrless$ <code>\gtrless</code></td>
<td style="text-align:left">$\shortmid$ <code>\shortmid</code></td>
<td style="text-align:left">$\vartriangleleft$ <code>\vartriangleleft</code></td>
</tr>
<tr>
<td style="text-align:left">$\cong$ <code>\cong</code></td>
<td style="text-align:left">$\gtrsim$ <code>\gtrsim</code></td>
<td style="text-align:left">$\shortparallel$ <code>\shortparallel</code></td>
<td style="text-align:left">$\vartriangleright$ <code>\vartriangleright</code></td>
</tr>
<tr>
<td style="text-align:left">$\curlyeqprec$ <code>\curlyeqprec</code></td>
<td style="text-align:left">$\in$ <code>\in</code> or <code>\isin</code></td>
<td style="text-align:left">$\sim$ <code>\sim</code></td>
<td style="text-align:left">$\vcentcolon$ <code>\vcentcolon</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\curlyeqsucc$ <code>\curlyeqsucc</code></td>
<td style="text-align:left">$\Join$ <code>\Join</code></td>
<td style="text-align:left">$\simeq$ <code>\simeq</code></td>
<td style="text-align:left">$\vdash$ <code>\vdash</code></td>
</tr>
<tr>
<td style="text-align:left">$\dashv$ <code>\dashv</code></td>
<td style="text-align:left">$\le$ <code>\le</code></td>
<td style="text-align:left">$\smallfrown$ <code>\smallfrown</code></td>
<td style="text-align:left">$\vDash$ <code>\vDash</code></td>
</tr>
<tr>
<td style="text-align:left">$\dblcolon$ <code>\dblcolon</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\leq$ <code>\leq</code></td>
<td style="text-align:left">$\smallsmile$ <code>\smallsmile</code></td>
<td style="text-align:left">$\Vdash$ <code>\Vdash</code></td>
</tr>
<tr>
<td style="text-align:left">$\doteq$ <code>\doteq</code></td>
<td style="text-align:left">$\leqq$ <code>\leqq</code></td>
<td style="text-align:left">$\smile$ <code>\smile</code></td>
<td style="text-align:left">$\Vvdash$ <code>\Vvdash</code></td>
</tr>
<tr>
<td style="text-align:left">$\Doteq$ <code>\Doteq</code></td>
<td style="text-align:left">$\leqslant$ <code>\leqslant</code></td>
<td style="text-align:left">$\sqsubset$ <code>\sqsubset</code></td>
</tr>
<tr>
<td style="text-align:left">$\doteqdot$ <code>\doteqdot</code></td>
<td style="text-align:left">$\lessapprox$ <code>\lessapprox</code></td>
<td style="text-align:left">$\sqsubseteq$ <code>\sqsubseteq</code></td>
</tr>
</tbody>
</table>
</div>
<p>可直接使用如下符号:<br>$= &lt; &gt; : ∈ ∋ ∝ ∼ ∽ ≂ ≃ ≅ ≈ ≊ ≍ ≎ ≏ ≐ ≑ ≒ ≓ ≖ ≗ ≜ ≡ ≤ ≥ ≦ ≧ ≫$<br>$≬ ≳ ≷ ≺ ≻ ≼ ≽ ≾ ≿ ⊂ ⊃ ⊆ ⊇ ⊏ ⊐ ⊑ ⊒ ⊢ ⊣ ⊩ ⊪ ⊸ ⋈ ⋍ ⋐ ⋑ ⋔ ⋙ $<br>$⋛ ⋞ ⋟ ⌢ ⌣ ⩾ ⪆ ⪌ ⪕ ⪖ ⪯ ⪰ ⪷ ⪸ ⫅ ⫆ ≲ ⩽ ⪅ ≶ ⋚ ⪋ ⟂ ⊨$<br><code>≔ ≕ ⩴</code></p>
<h3 id="否定关系符"><a href="#否定关系符" class="headerlink" title="否定关系符"></a>否定关系符</h3><p>$\not =$ <code>\not =</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$\gnapprox$ <code>\gnapprox</code></td>
<td>$\ngeqslant$ <code>\ngeqslant</code></td>
<td>$\nsubseteq$ <code>\nsubseteq</code></td>
<td>$\precneqq$ <code>\precneqq</code></td>
</tr>
<tr>
<td>$\gneq$ <code>\gneq</code></td>
<td>$\ngtr$ <code>\ngtr</code></td>
<td>$\nsubseteqq$ <code>\nsubseteqq</code></td>
<td>$\precnsim$ <code>\precnsim</code></td>
</tr>
<tr>
<td>$\gneqq$ <code>\gneqq</code></td>
<td>$\nleq$ <code>\nleq</code></td>
<td>$\nsucc$ <code>\nsucc</code></td>
<td>$\subsetneq$ <code>\subsetneq</code></td>
</tr>
<tr>
<td>$\gnsim$ <code>\gnsim</code></td>
<td>$\nleqq$ <code>\nleqq</code></td>
<td>$\nsucceq$ <code>\nsucceq</code></td>
<td>$\subsetneqq$ <code>\subsetneqq</code></td>
</tr>
<tr>
<td>$\gvertneqq$ <code>\gvertneqq</code></td>
<td>$\nleqslant$ <code>\nleqslant</code></td>
<td>$\nsupseteq$ <code>\nsupseteq</code></td>
<td>$\succnapprox$ <code>\succnapprox</code></td>
</tr>
<tr>
<td>$\lnapprox$ <code>\lnapprox</code></td>
<td>$\nless$ <code>\nless</code></td>
<td>$\nsupseteqq$ <code>\nsupseteqq</code></td>
<td>$\succneqq$ <code>\succneqq</code></td>
</tr>
<tr>
<td>$\lneq$ <code>\lneq</code></td>
<td>$\nmid$ <code>\nmid</code></td>
<td>$\ntriangleleft$ <code>\ntriangleleft</code></td>
<td>$\succnsim$ <code>\succnsim</code></td>
</tr>
<tr>
<td>$\lneqq$ <code>\lneqq</code></td>
<td>$\notin$ <code>\notin</code></td>
<td>$\ntrianglelefteq$ <code>\ntrianglelefteq</code></td>
<td>$\supsetneq$ <code>\supsetneq</code></td>
</tr>
<tr>
<td>$\lnsim$ <code>\lnsim</code></td>
<td>$\notni$ <code>\notni</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td>$\ntriangleright$ <code>\ntriangleright</code></td>
<td>$\supsetneqq$ <code>\supsetneqq</code></td>
</tr>
<tr>
<td>$\lvertneqq$ <code>\lvertneqq</code></td>
<td>$\nparallel$ <code>\nparallel</code></td>
<td>$\ntrianglerighteq$ <code>\ntrianglerighteq</code></td>
<td>$\varsubsetneq$ <code>\varsubsetneq</code></td>
</tr>
<tr>
<td>$\ncong$ <code>\ncong</code></td>
<td>$\nprec$ <code>\nprec</code></td>
<td>$\nvdash$ <code>\nvdash</code></td>
<td>$\varsubsetneqq$ <code>\varsubsetneqq</code></td>
</tr>
<tr>
<td>$\ne$ <code>\ne</code></td>
<td>$\npreceq$ <code>\npreceq</code></td>
<td>$\nvDash$ <code>\nvDash</code></td>
<td>$\varsupsetneq$ <code>\varsupsetneq</code></td>
</tr>
<tr>
<td>$\neq$ <code>\neq</code></td>
<td>$\nshortmid$ <code>\nshortmid</code></td>
<td>$\nVDash$ <code>\nVDash</code></td>
<td>$\varsupsetneqq$ <code>\varsupsetneqq</code></td>
</tr>
<tr>
<td>$\ngeq$ <code>\ngeq</code></td>
<td>$\nshortparallel$ <code>\nshortparallel</code></td>
<td>$\nVdash$ <code>\nVdash</code></td>
</tr>
<tr>
<td>$\ngeqq$ <code>\ngeqq</code></td>
<td>$\nsim$ <code>\nsim</code></td>
<td>$\precnapprox$ <code>\precnapprox</code></td>
</tr>
</tbody>
</table>
</div>
<p>可直接使用如下符号:<br>$∉ ∌ ∤ ∦ ≁ ≆ ≠ ≨ ≩ ≮ ≯ ≰ ≱ ⊀ ⊁ ⊈ ⊉ ⊊ ⊋ ⊬ ⊭ ⊮ ⊯$<br>$⋠ ⋡ ⋦ ⋧ ⋨ ⋩ ⋬ ⋭ ⪇ ⪈ ⪉ ⪊ ⪵ ⪶ ⪹ ⪺ ⫋ ⫌$</p>
<h3 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\circlearrowleft$ <code>\circlearrowleft</code></td>
<td style="text-align:left">$\leftharpoonup$ <code>\leftharpoonup</code></td>
<td style="text-align:left">$\rArr$ <code>\rArr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\circlearrowright$ <code>\circlearrowright</code></td>
<td style="text-align:left">$\leftleftarrows$ <code>\leftleftarrows</code></td>
<td style="text-align:left">$\rarr$ <code>\rarr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\curvearrowleft$ <code>\curvearrowleft</code></td>
<td style="text-align:left">$\leftrightarrow$ <code>\leftrightarrow</code></td>
<td style="text-align:left">$\restriction$ <code>\restriction</code></td>
</tr>
<tr>
<td style="text-align:left">$\curvearrowright$ <code>\curvearrowright</code></td>
<td style="text-align:left">$\Leftrightarrow$ <code>\Leftrightarrow</code></td>
<td style="text-align:left">$\rightarrow$ <code>\rightarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\Darr$ <code>\Darr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\leftrightarrows$ <code>\leftrightarrows</code></td>
<td style="text-align:left">$\Rightarrow$ <code>\Rightarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\dArr$ <code>\dArr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\leftrightharpoons$ <code>\leftrightharpoons</code></td>
<td style="text-align:left">$\rightarrowtail$ <code>\rightarrowtail</code></td>
</tr>
<tr>
<td style="text-align:left">$\darr$ <code>\darr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\leftrightsquigarrow$ <code>\leftrightsquigarrow</code></td>
<td style="text-align:left">$\rightharpoondown$ <code>\rightharpoondown</code></td>
</tr>
<tr>
<td style="text-align:left">$\dashleftarrow$ <code>\dashleftarrow</code></td>
<td style="text-align:left">$\Lleftarrow$ <code>\Lleftarrow</code></td>
<td style="text-align:left">$\rightharpoonup$ <code>\rightharpoonup</code></td>
</tr>
<tr>
<td style="text-align:left">$\dashrightarrow$ <code>\dashrightarrow</code></td>
<td style="text-align:left">$\longleftarrow$ <code>\longleftarrow</code></td>
<td style="text-align:left">$\rightleftarrows$ <code>\rightleftarrows</code></td>
</tr>
<tr>
<td style="text-align:left">$\downarrow$ <code>\downarrow</code></td>
<td style="text-align:left">$\Longleftarrow$ <code>\Longleftarrow</code></td>
<td style="text-align:left">$\rightleftharpoons$ <code>\rightleftharpoons</code></td>
</tr>
<tr>
<td style="text-align:left">$\Downarrow$ <code>\Downarrow</code></td>
<td style="text-align:left">$\longleftrightarrow$ <code>\longleftrightarrow</code></td>
<td style="text-align:left">$\rightrightarrows$ <code>\rightrightarrows</code></td>
</tr>
<tr>
<td style="text-align:left">$\downdownarrows$ <code>\downdownarrows</code></td>
<td style="text-align:left">$\Longleftrightarrow$ <code>\Longleftrightarrow</code></td>
<td style="text-align:left">$\rightsquigarrow$ <code>\rightsquigarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\downharpoonleft$ <code>\downharpoonleft</code></td>
<td style="text-align:left">$\longmapsto$ <code>\longmapsto</code></td>
<td style="text-align:left">$\Rrightarrow$ <code>\Rrightarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\downharpoonright$ <code>\downharpoonright</code></td>
<td style="text-align:left">$\longrightarrow$ <code>\longrightarrow</code></td>
<td style="text-align:left">$\Rsh$ <code>\Rsh</code></td>
</tr>
<tr>
<td style="text-align:left">$\gets$ <code>\gets</code></td>
<td style="text-align:left">$\Longrightarrow$ <code>\Longrightarrow</code></td>
<td style="text-align:left">$\searrow$ <code>\searrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\Harr$ <code>\Harr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\looparrowleft$ <code>\looparrowleft</code></td>
<td style="text-align:left">$\swarrow$ <code>\swarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\hArr$ <code>\hArr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\looparrowright$ <code>\looparrowright</code></td>
<td style="text-align:left">$\to$ <code>\to</code></td>
</tr>
<tr>
<td style="text-align:left">$\harr$ <code>\harr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\Lrarr$ <code>\Lrarr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\twoheadleftarrow$ <code>\twoheadleftarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\hookleftarrow$ <code>\hookleftarrow</code></td>
<td style="text-align:left">$\lrArr$ <code>\lrArr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\twoheadrightarrow$ <code>\twoheadrightarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\hookrightarrow$ <code>\hookrightarrow</code></td>
<td style="text-align:left">$\lrarr$ <code>\lrarr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\Uarr$ <code>\Uarr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\iff$ <code>\iff</code></td>
<td style="text-align:left">$\Lsh$ <code>\Lsh</code></td>
<td style="text-align:left">$\uArr$ <code>\uArr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\impliedby$ <code>\impliedby</code></td>
<td style="text-align:left">$\mapsto$ <code>\mapsto</code></td>
<td style="text-align:left">$\uarr$ <code>\uarr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\implies$ <code>\implies</code></td>
<td style="text-align:left">$\nearrow$ <code>\nearrow</code></td>
<td style="text-align:left">$\uparrow$ <code>\uparrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\Larr$ <code>\Larr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\nleftarrow$ <code>\nleftarrow</code></td>
<td style="text-align:left">$\Uparrow$ <code>\Uparrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\lArr$ <code>\lArr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\nLeftarrow$ <code>\nLeftarrow</code></td>
<td style="text-align:left">$\updownarrow$ <code>\updownarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\larr$ <code>\larr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\nleftrightarrow$ <code>\nleftrightarrow</code></td>
<td style="text-align:left">$\Updownarrow$ <code>\Updownarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\leadsto$ <code>\leadsto</code></td>
<td style="text-align:left">$\nLeftrightarrow$ <code>\nLeftrightarrow</code></td>
<td style="text-align:left">$\upharpoonleft$ <code>\upharpoonleft</code></td>
</tr>
<tr>
<td style="text-align:left">$\leftarrow$ <code>\leftarrow</code></td>
<td style="text-align:left">$\nrightarrow$ <code>\nrightarrow</code></td>
<td style="text-align:left">$\upharpoonright$ <code>\upharpoonright</code></td>
</tr>
<tr>
<td style="text-align:left">$\Leftarrow$ <code>\Leftarrow</code></td>
<td style="text-align:left">$\nRightarrow$ <code>\nRightarrow</code></td>
<td style="text-align:left">$\upuparrows$ <code>\upuparrows</code></td>
</tr>
<tr>
<td style="text-align:left">$\leftarrowtail$ <code>\leftarrowtail</code></td>
<td style="text-align:left">$\nwarrow$ <code>\nwarrow</code></td>
</tr>
<tr>
<td style="text-align:left">$\leftharpoondown$ <code>\leftharpoondown</code></td>
<td style="text-align:left">$\Rarr$ <code>\Rarr</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
</tbody>
</table>
</div>
<p>可直接使用如下符号:<br>$← ↑ → ↓ ↔ ↕ ↖ ↗ ↘ ↙ ↚ ↛ ↞ ↠ ↢ ↣ ↦ ↩ ↪ ↫ ↬ ↭ ↮ ↰ ↱$<br>$↶ ↷ ↺ ↻ ↼ ↽ ↾ ↾ ↿ ⇀ ⇁ ⇂ ⇃ ⇄ ⇆ ⇇ ⇈ ⇉ ⇊ ⇋ ⇌⇍ ⇎ ⇏$<br>$⇐ ⇑ ⇒ ⇓ ⇔ ⇕ ⇚ ⇛ ⇝ ⇠ ⇢ ⟵ ⟶ ⟷ ⟸ ⟹ ⟺ ⟼$ ↽</p>
<h4 id="可扩展箭头"><a href="#可扩展箭头" class="headerlink" title="可扩展箭头"></a>可扩展箭头</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\xleftarrow{abc}$ <code>\xleftarrow{abc}</code></td>
<td style="text-align:left">$\xrightarrow[under]{over}$ <code>\xrightarrow[under]{over}</code></td>
</tr>
<tr>
<td style="text-align:left">$\xLeftarrow{abc}$ <code>\xLeftarrow{abc}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\xRightarrow{abc}$ <code>\xRightarrow{abc}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\xleftrightarrow{abc}$ <code>\xleftrightarrow{abc}</code></td>
<td style="text-align:left">$\xLeftrightarrow{abc}$ <code>\xLeftrightarrow{abc}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\xhookleftarrow{abc}$ <code>\xhookleftarrow{abc}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\xhookrightarrow{abc}$ <code>\xhookrightarrow{abc}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\xtwoheadleftarrow{abc}$ <code>\xtwoheadleftarrow{abc}</code></td>
<td style="text-align:left">$\xtwoheadrightarrow{abc}$ <code>\xtwoheadrightarrow{abc}</code></td>
</tr>
<tr>
<td style="text-align:left">$\xleftharpoonup{abc}$ <code>\xleftharpoonup{abc}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\xrightharpoonup{abc}$ <code>\xrightharpoonup{abc}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\xleftharpoondown{abc}$ <code>\xleftharpoondown{abc}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\xrightharpoondown{abc}$ <code>\xrightharpoondown{abc}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\xleftrightharpoons{abc}$ <code>\xleftrightharpoons{abc}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\xrightleftharpoons{abc}$ <code>\xrightleftharpoons{abc}</code></td>
</tr>
<tr>
<td style="text-align:left">$\xtofrom{abc}$ <code>\xtofrom{abc}</code></td>
<td style="text-align:left">$\xmapsto{abc}$ <code>\xmapsto{abc}</code></td>
</tr>
<tr>
<td style="text-align:left">$\xlongequal{abc}$ <code>\xlongequal{abc}</code></td>
</tr>
</tbody>
</table>
</div>
<p>上表所列均可按 <code>\xrightarrow[under]{over}</code> 方式接受可选参数</p>
<h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><h3 id="Bra-ket符号4"><a href="#Bra-ket符号4" class="headerlink" title="Bra-ket符号4"></a>Bra-ket符号<sup><a href="#fn_4" id="reffn_4">4</a></sup></h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\bra{\phi}$ <code>\bra{\phi}</code></td>
<td style="text-align:left">$\ket{\psi}$ <code>\ket{\psi}</code></td>
<td style="text-align:left">$\braket{\phi\vert\psi}$ <code>\braket{\phi\vert\psi}</code></td>
</tr>
<tr>
<td style="text-align:left">$\Bra{\phi}$ <code>\Bra{\phi}</code></td>
<td style="text-align:left">$\Ket{\psi}$ <code>\Ket{\psi}</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="样式-颜色-大小和字体"><a href="#样式-颜色-大小和字体" class="headerlink" title="样式, 颜色, 大小和字体"></a>样式, 颜色, 大小和字体</h2><h3 id="类目"><a href="#类目" class="headerlink" title="类目"></a>类目</h3><p><code>\mathbin</code> <code>\mathclose</code> <code>\mathinner</code> <code>\mathop</code><br><code>\mathopen</code> <code>\mathord</code> <code>\mathpunct</code> <code>\mathrel</code></p>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>$\color{blue} F=ma$  <code>\color{blue} F=ma</code></p>
<p>注意KaTeX的<code>\color</code>作用方式就像开关, 这与LaTeX一致, 与MathJax不同</p>
<p>其他KaTeX颜色指令要求颜色以参数形式传入:</p>
<p>$\textcolor{blue}{F=ma}$ <code>\textcolor{blue}{F=ma}</code><br>$\textcolor{228B22}{F=ma}$ <code>\textcolor{228B22}{F=ma}</code><br>$\colorbox{aqua}{A}$ <code>\colorbox{aqua}{A}</code><br>$\fcolorbox{red}{aqua}{A}$ <code>\fcolorbox{red}{aqua}{A}</code>  </p>
<p>KaTeX颜色指令接受标准HTML<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords" target="_blank" rel="noopener">预定义颜色名称</a>, 也接受CSS十六进制格式的RGB参数. 如果以六位数的格式给出, “#”可以省略</p>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\mathrm{Ab0}$ <code>\mathrm{Ab0}</code></td>
<td style="text-align:left">$\mathbf{Ab0}$ <code>\mathbf{Ab0}</code></td>
<td style="text-align:left">$\mathit{Ab0}$ <code>\mathit{Ab0}</code></td>
</tr>
<tr>
<td style="text-align:left">$\mathnormal{Ab0}$ <code>\mathnormal{Ab0}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\textbf{Ab0}$ <code>\textbf{Ab0}</code></td>
<td style="text-align:left">$\textit{Ab0}$ <code>\textit{Ab0}</code></td>
</tr>
<tr>
<td style="text-align:left">$\textrm{Ab0}$ <code>\textrm{Ab0}</code></td>
<td style="text-align:left">$\bf Ab0$ <code>\bf Ab0</code></td>
<td style="text-align:left">$\it Ab0$ <code>\it Ab0</code></td>
</tr>
<tr>
<td style="text-align:left">$\rm Ab0$ <code>\rm Ab0</code></td>
<td style="text-align:left">$\bold{Ab0}$ <code>\bold{Ab0}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\textup{Ab0}$ <code>\textup{Ab0}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\textnormal{Ab0}$ <code>\textnormal{Ab0}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\boldsymbol{Ab0}$ <code>\boldsymbol{Ab}</code></td>
<td style="text-align:left">$\Bbb{AB}$ <code>\Bbb{AB}</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{Ab0}$ <code>\text{Ab0}</code></td>
<td style="text-align:left">$\bm{Ab0}$ <code>\bm{Ab0}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\mathbb{AB}$ <code>\mathbb{AB}</code></td>
</tr>
<tr>
<td style="text-align:left">$\mathsf{Ab0}$ <code>\mathsf{Ab0}</code></td>
<td style="text-align:left">$\textmd{Ab0}$ <code>\textmd{Ab0}</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\frak{Ab0}$ <code>\frak{Ab0}</code></td>
</tr>
<tr>
<td style="text-align:left">$\textsf{Ab0}$ <code>\textsf{Ab0}</code></td>
<td style="text-align:left">$\mathtt{Ab0}$ <code>\mathtt{Ab0}</code></td>
<td style="text-align:left">$\mathfrak{Ab0}$ <code>\mathfrak{Ab0}</code></td>
</tr>
<tr>
<td style="text-align:left">$\sf Ab0$ <code>\sf Ab0</code></td>
<td style="text-align:left">$\texttt{Ab0}$ <code>\texttt{Ab0}</code></td>
<td style="text-align:left">$\mathcal{AB0}$ <code>\mathcal{AB0}</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">$\tt Ab0$ <code>\tt Ab0</code></td>
<td style="text-align:left">$\cal AB0$ <code>\cal AB0</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">$\mathscr{AB}$ <code>\mathscr{AB}</code></td>
</tr>
</tbody>
</table>
</div>
<p>形如<code>\textXX</code>的指令可叠加控制字体家族, 粗细和形状. 所以<code>\textsf{\textbf{H}}</code> 渲染效果为 $\textsf{\textbf{H}}$. 其它形式的指令则不能, 例如 <code>\mathsf{\mathbf{H}}</code> 渲染效果为 $\mathsf{\mathbf{H}}$</p>
<p>如果KaTeX字体没有粗体形式, 可用 <code>\pmb</code> 模拟, 如 <code>\pmb{\mu}</code> 渲染效果为 $\pmb{\mu}$</p>
<h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\Huge AB$ <code>\Huge AB</code></td>
<td style="text-align:left">$\normalsize AB$ <code>\normalsize AB</code></td>
</tr>
<tr>
<td style="text-align:left">$\huge AB$ <code>\huge AB</code></td>
<td style="text-align:left">$\small AB$ <code>\small AB</code></td>
</tr>
<tr>
<td style="text-align:left">$\LARGE AB$ <code>\LARGE AB</code></td>
<td style="text-align:left">$\footnotesize AB$ <code>\footnotesize AB</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\Large AB$ <code>\Large AB</code></td>
<td style="text-align:left">$\scriptsize AB$ <code>\scriptsize AB</code></td>
</tr>
<tr>
<td style="text-align:left">$\large AB$ <code>\large AB</code></td>
<td style="text-align:left">$\tiny AB$ <code>\tiny AB</code></td>
</tr>
</tbody>
</table>
</div>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\displaystyle\sum_{i=1}^n$ <code>\displaystyle\sum_{i=1}^n</code></td>
</tr>
<tr>
<td style="text-align:left">$\textstyle\sum_{i=1}^n$ <code>\textstyle\sum_{i=1}^n</code></td>
</tr>
<tr>
<td style="text-align:left">$\scriptstyle x$ <code>\scriptstyle x</code>         (一级上/下标的大小)</td>
</tr>
<tr>
<td style="text-align:left">$\scriptscriptstyle x$ <code>\scriptscriptstyle x</code> (之后的上/下标大小)</td>
</tr>
<tr>
<td style="text-align:left">$\lim\limits_x$ <code>\lim\limits_x</code></td>
</tr>
<tr>
<td style="text-align:left">$\lim\nolimits_x$ <code>\lim\nolimits_x</code></td>
</tr>
<tr>
<td style="text-align:left">$\verb!x^2!$ <code>\verb!x^2!</code></td>
</tr>
</tbody>
</table>
</div>
<p><code>\text{...}</code> 接受嵌套 <code>$...$</code>片段, 并按照数学模式(math mode)渲染</p>
<h2 id="其他符号"><a href="#其他符号" class="headerlink" title="其他符号"></a>其他符号</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>% comment</code></td>
<td style="text-align:left">$\dots$ <code>\dots</code></td>
<td style="text-align:left">$\KaTeX$ <code>\KaTeX</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\%$ <code>\%</code></td>
<td style="text-align:left">$\cdots$ <code>\cdots</code></td>
<td style="text-align:left">$\LaTeX$ <code>\LaTeX</code></td>
</tr>
<tr>
<td style="text-align:left">$#$ <code>\#</code><sup><a href="#fn_8" id="reffn_8">8</a></sup></td>
<td style="text-align:left">$\ddots$ <code>\ddots</code></td>
<td style="text-align:left">$\TeX$ <code>\TeX</code></td>
</tr>
<tr>
<td style="text-align:left">$\&amp;$ <code>\&amp;</code></td>
<td style="text-align:left">$\ldots$ <code>\ldots</code></td>
<td style="text-align:left">$\nabla$ <code>\nabla</code></td>
</tr>
<tr>
<td style="text-align:left">$_$ <code>\_</code><sup><a href="#fn_8" id="reffn_8">8</a></sup></td>
<td style="text-align:left">$\vdots$ <code>\vdots</code></td>
<td style="text-align:left">$\infty$ <code>\infty</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textunderscore}$ <code>\text{\textunderscore}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\dotsb$ <code>\dotsb</code></td>
<td style="text-align:left">$\infin$ <code>\infin</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\text{—}$ <code>\text{--}</code></td>
<td style="text-align:left">$\dotsc$ <code>\dotsc</code></td>
<td style="text-align:left">$\checkmark$ <code>\checkmark</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textendash}$ <code>\text{\textendash}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\dotsi$ <code>\dotsi</code></td>
<td style="text-align:left">$\dag$ <code>\dag</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\text{—-}$ <code>\text{---}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\dotsm$ <code>\dotsm</code></td>
<td style="text-align:left">$\dagger$ <code>\dagger</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textemdash}$ <code>\text{\textemdash}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\dotso$ <code>\dotso</code></td>
<td style="text-align:left">$\text{\textdagger}$ <code>\text{\textdagger}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textasciitilde}$ <code>\text{\textasciitilde}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\sdot$ <code>\sdot</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\ddag$ <code>\ddag</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textasciicircum}$ <code>\text{\textasciicircum}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\mathellipsis$ <code>\mathellipsis</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\ddagger$ <code>\ddagger</code></td>
</tr>
<tr>
<td style="text-align:left"><sup><a href="#fn_2" id="reffn_2">2</a></sup></td>
<td style="text-align:left">$\text{\textellipsis}$ <code>\text{\textellipsis}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\text{\textdaggerdbl}$ <code>\text{\textdaggerdbl}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textquoteleft}$ <code>text{\textquoteleft}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\Box$ <code>\Box</code></td>
<td style="text-align:left">$\Dagger$ <code>\Dagger</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\lq$ <code>\lq</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\square$ <code>\square</code></td>
<td style="text-align:left">$\angle$ <code>\angle</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textquoteright}$ <code>\text{\textquoteright}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\blacksquare$ <code>\blacksquare</code></td>
<td style="text-align:left">$\measuredangle$ <code>\measuredangle</code></td>
</tr>
<tr>
<td style="text-align:left">$\rq$ <code>\rq</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\triangle$ <code>\triangle</code></td>
<td style="text-align:left">$\sphericalangle$ <code>\sphericalangle</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textquotedblleft}$ <code>\text{\textquotedblleft}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\triangledown$ <code>\triangledown</code></td>
<td style="text-align:left">$\top$ <code>\top</code></td>
</tr>
<tr>
<td style="text-align:left">$”$ <code>&quot;</code></td>
<td style="text-align:left">$\triangleleft$ <code>\triangleleft</code></td>
<td style="text-align:left">$\bot$ <code>\bot</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textquotedblright}$ <code>\text{\textquotedblright}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\triangleright$ <code>\triangleright</code></td>
<td style="text-align:left">$\$$ <code>\$</code></td>
</tr>
<tr>
<td style="text-align:left">$\colon$ <code>\colon</code></td>
<td style="text-align:left">$\bigtriangledown$ <code>\bigtriangledown</code></td>
<td style="text-align:left">$\text{\textdollar}$ <code>\text{\textdollar}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\backprime$ <code>\backprime</code></td>
<td style="text-align:left">$\bigtriangleup$ <code>\bigtriangleup</code></td>
<td style="text-align:left">$\pounds$ <code>\pounds</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\prime$ <code>\prime</code></td>
<td style="text-align:left">$\blacktriangle$ <code>\blacktriangle</code></td>
<td style="text-align:left">$\mathsterling$ <code>\mathsterling</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textless}$ <code>\text{\textless}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\blacktriangledown$ <code>\blacktriangledown</code></td>
<td style="text-align:left">$\text{\textsterling}$ <code>\text{\textsterling}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textgreater}$ <code>\text{\textgreater}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\blacktriangleleft$ <code>\blacktriangleleft</code></td>
<td style="text-align:left">$\yen$ <code>\yen</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textbar}$ <code>\text{\textbar}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\blacktriangleright$ <code>\blacktriangleright</code></td>
<td style="text-align:left">$\surd$ <code>\surd</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textbardbl}$ <code>\text{\textbardbl}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\diamond$ <code>\diamond</code></td>
<td style="text-align:left">$\degree$ <code>\degree</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textbraceleft}$ <code>\text{\textbraceleft}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\Diamond$ <code>\Diamond</code></td>
<td style="text-align:left">$\text{\textdegree}$ <code>\text{\textdegree}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textbraceright}$ <code>\text{\textbraceright}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\lozenge$ <code>\lozenge</code></td>
<td style="text-align:left">$\mho$ <code>\mho</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textbackslash}$ <code>\text{\textbackslash}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\blacklozenge$ <code>\blacklozenge</code></td>
<td style="text-align:left">$\diagdown$ <code>\diagdown</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\P}$ <code>\text{\P}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\star$ <code>\star</code></td>
<td style="text-align:left">$\diagup$ <code>\diagup</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\S}$ <code>\text{\S}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\bigstar$ <code>\bigstar</code></td>
<td style="text-align:left">$\flat$ <code>\flat</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\sect}$ <code>\text{\sect}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\clubsuit$ <code>\clubsuit</code></td>
<td style="text-align:left">$\natural$ <code>\natural</code></td>
</tr>
<tr>
<td style="text-align:left">$\copyright$ <code>\copyright</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\clubs$ <code>\clubs</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\sharp$ <code>\sharp</code></td>
</tr>
<tr>
<td style="text-align:left">$\circledR$ <code>\circledR</code></td>
<td style="text-align:left">$\diamondsuit$ <code>\diamondsuit</code></td>
<td style="text-align:left">$\heartsuit$ <code>\heartsuit</code></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textregistered}$ <code>\text{\textregistered}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\diamonds$ <code>\diamonds</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
<td style="text-align:left">$\hearts$ <code>\hearts</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\circledS$ <code>\circledS</code></td>
<td style="text-align:left">$\spadesuit$ <code>\spadesuit</code></td>
<td style="text-align:left">$\spades$ <code>\spades</code><sup><a href="#fn_6" id="reffn_6">6</a></sup></td>
</tr>
<tr>
<td style="text-align:left">$\text{\textcircled a}$ <code>\text{\textcircled a}</code><sup><a href="#fn_7" id="reffn_7">7</a></sup></td>
<td style="text-align:left">$\maltese$ <code>\maltese</code></td>
</tr>
</tbody>
</table>
</div>
<p>可直接使用如下符号:<br>$£ ¥ ∇ ∞ · ∠ ∡ ∢ ♠ ♡ ♢ ♣ ♭ ♮ ♯ ✓ …  ⋮  ⋯  ⋱  !$ ‼</p>
<h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2><p>在KaTeX中, 单位和TeX一样按比例分配<br>KaTeX单位与CSS单位不同</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">KaTeX单位</th>
<th style="text-align:left">值</th>
<th style="text-align:left">KaTeX单位</th>
<th style="text-align:left">值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">em</td>
<td style="text-align:left">CSS em</td>
<td style="text-align:left">bp</td>
<td style="text-align:left">1/72​ inch × F × G</td>
</tr>
<tr>
<td style="text-align:left">ex</td>
<td style="text-align:left">CSS ex</td>
<td style="text-align:left">pc</td>
<td style="text-align:left">12 KaTeX pt</td>
</tr>
<tr>
<td style="text-align:left">mu</td>
<td style="text-align:left">1/18 CSS em</td>
<td style="text-align:left">dd</td>
<td style="text-align:left">1238/1157​ KaTeX pt</td>
</tr>
<tr>
<td style="text-align:left">pt</td>
<td style="text-align:left">1/72.27 inch × F × G</td>
<td style="text-align:left">cc</td>
<td style="text-align:left">14856/1157 KaTeX pt</td>
</tr>
<tr>
<td style="text-align:left">mm</td>
<td style="text-align:left">1 mm × F × G</td>
<td style="text-align:left">nd</td>
<td style="text-align:left">685/642 KaTeX pt</td>
</tr>
<tr>
<td style="text-align:left">cm</td>
<td style="text-align:left">1 cm × F × G</td>
<td style="text-align:left">nc</td>
<td style="text-align:left">1370/107​ KaTeX pt</td>
</tr>
<tr>
<td style="text-align:left">in</td>
<td style="text-align:left">1 inch × F × G</td>
<td style="text-align:left">sp</td>
<td style="text-align:left">1/65536 KaTeX pt</td>
</tr>
</tbody>
</table>
</div>
<p>其中:</p>
<ul>
<li>F = (周围HTML文本字体大小)/(10 pt)</li>
<li>G = 默认为1.21, 因为KaTeX字体大小通常为1.21 × 周围字体大小. HTML网页的CSS<a href="https://katex.org/docs/font.html#font-size-and-lengths" target="_blank" rel="noopener">可以覆盖</a>此值</li>
</ul>
<p>与样式, 大小复合的效果:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单位</th>
<th style="text-align:center">textstyle</th>
<th style="text-align:center">scriptscript</th>
<th style="text-align:center">huge</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">em or ex</td>
<td style="text-align:center">$\rule{1em}{1em}$</td>
<td style="text-align:center">$\scriptscriptstyle\rule{1em}{1em}$</td>
<td style="text-align:center">$\huge\rule{1em}{1em}$</td>
</tr>
<tr>
<td style="text-align:center">mu</td>
<td style="text-align:center">$\rule{18mu}{18mu}$</td>
<td style="text-align:center">$\scriptscriptstyle\rule{18mu}{18mu}$</td>
<td style="text-align:center">$\huge\rule{18mu}{18mu}$</td>
</tr>
<tr>
<td style="text-align:center">others</td>
<td style="text-align:center">$\rule{10pt}{10pt}$</td>
<td style="text-align:center">$\scriptscriptstyle\rule{10pt}{10pt}$</td>
<td style="text-align:center">$\huge\rule{10pt}{10pt}$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="附-表格转化程序"><a href="#附-表格转化程序" class="headerlink" title="附: 表格转化程序"></a>附: 表格转化程序</h2><p>来自 <a href="https://blog.csdn.net/tonydz0523/article/details/88420049" target="_blank" rel="noopener">https://blog.csdn.net/tonydz0523/article/details/88420049</a></p>
<p>实际上本篇博客的md源码来自<br><a href="https://github.com/KaTeX/KaTeX/blob/master/docs/supported.md" target="_blank" rel="noopener">https://github.com/KaTeX/KaTeX/blob/master/docs/supported.md</a>, 并未使用该程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">num = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">html = open(<span class="string">'html.txt'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">"lxml"</span>)</span><br><span class="line">all_code = soup.find_all(<span class="string">'code'</span>)</span><br><span class="line">codes = list(map(<span class="keyword">lambda</span> x: x.get_text(strip=<span class="literal">True</span>), all_code))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(codes)//num+<span class="number">1</span>):</span><br><span class="line">    code_list = list(map(<span class="keyword">lambda</span> x: <span class="string">' $&#123;0&#125;$ `&#123;0&#125;` '</span>.format(x), codes[i*num:(i+<span class="number">1</span>)*num]))</span><br><span class="line">    print(<span class="string">'|'</span>.join(code_list))</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'|:--:|:--:|:--:|:--:|'</span>)</span><br></pre></td></tr></table></figure>
<blockquote id="fn_1">
<sup>1</sup>. 目前测试结果表明MathJax仅支持<code>\llap</code>, <code>\rlap</code> 和 <code>\clap</code><a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_2">
<sup>2</sup>. 指令为<code>&#96;</code>, 效果为$`$ <a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_3">
<sup>3</sup>. KaTeX与MathJax均不支持<a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_4">
<sup>4</sup>. KaTeX不支持, 但MathJax支持<a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_5">
<sup>5</sup>. 注意有<code>\left</code>和<code>\right</code>修饰的定界符会自动调整尺寸<a href="#reffn_5" title="Jump back to footnote [5] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_6">
<sup>6</sup>. MathJax不支持<a href="#reffn_6" title="Jump back to footnote [6] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_7">
<sup>7</sup>. MathJax不能按正确方式渲染<a href="#reffn_7" title="Jump back to footnote [7] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_8">
<sup>8</sup>. 不确定MathJax是否支持<a href="#reffn_8" title="Jump back to footnote [8] in the text."> &#8617;</a>
</blockquote>
]]></content>
      <tags>
        <tag>测试</tag>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title>数论笔记-二次剩余,legendre符号与二次互反律</title>
    <url>/article/quadratic-residue-and-quadratic-reciprocity-law/</url>
    <content><![CDATA[<h1 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h1><p>满足$\exists x\in\Bbb{Z}_m, s.t. x^2\equiv a\pmod m$的$a$为模$p$的二次剩余</p>
<ul>
<li>以下所有内容假定<strong>模数为奇素数</strong></li>
</ul>
<a id="more"></a>
<h1 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h1><ol>
<li><p>来自<a href="../primitive-root-and-discrete-logarithm">数论笔记-原根与指数(离散对数)</a>中3.1.2的特化</p>
<ol>
<li>$a$为模$m$的二次剩余$\iff 2\mid\operatorname{ind}_ga\iff a^{m-1\over 2}\equiv1\pmod m$</li>
<li><p>$a$为模$m$的二次剩余  </p>
<p>$\implies|\{x|x^2\equiv a\pmod m\}|=2,\{x|x^2\equiv a\pmod m\}=\{\overline{g^{ {\operatorname{ind}_ga\over 2}+i{m-1\over 2} } }|i=0,1\}$</p>
</li>
<li>模$m$的二次剩余共${m-1\over 2}$个, 分别为$a\equiv g^{2i},i=0,…,{m-3\over 2}$; 模$m$的非二次剩余共${m-1\over 2}$个, 分别为$a\equiv g^{2i+1},i=0,…,{m-3\over 2}$</li>
</ol>
</li>
<li>在$p\nmid ab$时, $({ab\over p})=({a\over p})({b\over p})$</li>
</ol>
<h1 id="Legendre符号"><a href="#Legendre符号" class="headerlink" title="Legendre符号"></a>Legendre符号</h1><p>$\displaystyle\Big({a\over p}\Big)=\begin{cases}<br>  0&amp;,p\mid a\\<br>  1&amp;,p\nmid a\land\exists x\in\Bbb{Z}_p, s.t. x^2\equiv a\pmod p\\<br>  -1&amp;,p\nmid a\land\nexists x\in\Bbb{Z}_p, s.t. x^2\equiv a\pmod p\\<br>\end{cases}$</p>
<p>$\displaystyle\Big({a\over p}\Big)\equiv a^{p-1\over 2}\pmod p$</p>
<p>$({-1\over p})=(-1)^{p-1\over 2}=\begin{cases}<br>  1&amp;,p\equiv1\pmod 4\\<br>  -1&amp;,p\equiv3\pmod 4\\<br>\end{cases}$</p>
<h2 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h2><ol>
<li>$({ab\over p})=({a\over p})({b\over p})$ (完全积性)</li>
<li>$a\equiv b\pmod p\implies({a\over p})=({b\over p})$</li>
<li>$x^2\equiv a\pmod p$的解数为$1+({a\over p})$</li>
<li>Gauss引理(证明用途更大, 略)</li>
</ol>
<h1 id="二次互反律"><a href="#二次互反律" class="headerlink" title="二次互反律"></a>二次互反律</h1><p>设$p\ne q$</p>
<script type="math/tex; mode=display">({p\over q})({q\over p})=(-1)^{ {p-1\over2}{q-1\over2} }=\begin{cases}
  -1&,p\equiv q\equiv3\pmod 4\\
  1&,otherwise
\end{cases}</script>]]></content>
      <tags>
        <tag>数学</tag>
        <tag>笔记</tag>
        <tag>数论</tag>
        <tag>二次剩余</tag>
        <tag>Legendre符号</tag>
        <tag>二次互反律</tag>
      </tags>
  </entry>
  <entry>
    <title>数论笔记-原根与指数(离散对数)</title>
    <url>/article/primitive-root-and-discrete-logarithm/</url>
    <content><![CDATA[<h1 id="阶"><a href="#阶" class="headerlink" title="阶"></a>阶</h1><p>对$\gcd(a,m)=1$, $\operatorname{ord}_ma:=\min\{l\in\Bbb{N}^*|a^l\equiv1\pmod m\}$</p>
<a id="more"></a>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ol>
<li>$\operatorname{ord}_ma=l\implies\operatorname{ord}_ma^t={l\over(l,t)}$<ul>
<li>$espc. l\perp t\implies\operatorname{ord}_ma=\operatorname{ord}_ma^t$</li>
</ul>
</li>
<li>$a^k\equiv1\pmod m\iff\operatorname{ord}_ma\mid k$<ol>
<li>$espc. \operatorname{ord}_ma\mid\varphi(m)$</li>
<li>这条性质给出了求阶的方法, 即在$\varphi(m)$中找出这样的最小因子, 该因子满足定义, 同时<strong>该因子的所有素因子</strong>不满足定义</li>
<li>设 $\operatorname{ord}_ma=l$, 则$a^0,…,a^{l-1}$两两不同余</li>
<li>设$p$是素数, 若$l|\varphi(p)$, 则有$\varphi(l)$个两两不同余的数的阶为$l$</li>
<li>若$m=\displaystyle\prod_{i=1}^kp_i^{\alpha_i}$, 则$\operatorname{ord}_ma=\operatorname{lcm}(\operatorname{ord}_{p_1}a,…,\operatorname{ord}_{p_k}a)$</li>
</ol>
</li>
</ol>
<h1 id="原根"><a href="#原根" class="headerlink" title="原根"></a>原根</h1><p>对$\gcd(a,m)=1$, 若$\operatorname{ord}_ma=\varphi(m)$, 则称$a$是模$m$的原根</p>
<p>有原根的群$\Bbb{Z}_m^*$为<strong>循环群</strong></p>
<h2 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h2><ol>
<li>模$m$具有原根$\iff m\in\{n\in\Bbb{N}^*|(n=p^\alpha)\lor (n=2p^\alpha), p\in\{prime\},\alpha\in\Bbb{N}^*\}$</li>
<li>$g$是模$m$的原根$\implies\{g^l|1\leqslant l\leqslant\varphi(m),l\perp\varphi(m)\}\implies$模$m$的原根有$\varphi(\varphi(m))$个</li>
</ol>
<h1 id="指数-离散对数"><a href="#指数-离散对数" class="headerlink" title="指数(离散对数)"></a>指数(离散对数)</h1><p>设$g$为模$m$原根, $\operatorname{ind}_ga=k\iff a\equiv g^k\pmod m$</p>
<p>看定义就知道为什么指数又被叫做离散对数</p>
<h2 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h2><ol>
<li>设$a,b\perp m$,<ol>
<li>$a\equiv b\pmod m\iff\operatorname{ind}_ga=\operatorname{ind}_gb$</li>
<li>$\operatorname{ind}_g(ab)\equiv\operatorname{ind}_ga\operatorname{ind}_gb\pmod{\varphi(m)}$ <u><strong>(注意是$\varphi(m)$不是$m$)</strong></u><ol>
<li>$\operatorname{ind}_g(a^n)\equiv n\operatorname{ind}_ga\pmod{\varphi(m)}$</li>
</ol>
</li>
<li>若$g_1$也是模$m$原根, 则$\operatorname{ind}_ga\equiv\operatorname{ind}_{g_1}a\operatorname{ind}_gg_1\pmod{\varphi(m)}$</li>
</ol>
</li>
<li><p>与$k$次剩余的关系, 令$d=\gcd(k,\varphi(m))$</p>
<ol>
<li>$a$为模$m$的$k$次剩余$\iff d\mid\operatorname{ind}_ga\iff a^{\varphi(m)\over d}\equiv1\pmod m$</li>
<li><p>$a$为模$m$的$k$次剩余  </p>
<p>$\implies|\{x|x^k\equiv a\pmod m\}|=d,\{x|x^k\equiv a\pmod m\}=\{\overline{g^{({k\over d})^{-1}{\operatorname{ind}_ga\over d}+i{\varphi(m)\over d}}}|i=0,…,d-1\}$</p>
</li>
<li>模$m$的$k$次剩余共${\varphi(m)\over d}$个, 分别为$a\equiv g^{di},i=0,…,{\varphi(m)\over d}-1$</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>数学</tag>
        <tag>笔记</tag>
        <tag>数论</tag>
        <tag>阶</tag>
        <tag>原根</tag>
        <tag>离散对数</tag>
      </tags>
  </entry>
  <entry>
    <title>数论笔记-数论函数,dirichlet卷积与möbius反演</title>
    <url>/article/mobius-inverse-formula/</url>
    <content><![CDATA[<h1 id="开胃菜-数论分块"><a href="#开胃菜-数论分块" class="headerlink" title="开胃菜(数论分块)"></a>开胃菜(数论分块)</h1><ol>
<li>$\forall a,b,c\in\Bbb{N}^*,\displaystyle\Big\lfloor{a\over bc}\Big\rfloor=\bigg\lfloor{\lfloor{a\over b}\rfloor\over c}\bigg\rfloor$</li>
<li>$\Big|\Big\{n\in\Bbb{N}^*\Big|\displaystyle\Big\lfloor{n\over i}\Big\rfloor,1\leqslant i\leqslant n\Big\}\Big|\leqslant\lfloor2\sqrt{n}\rfloor$</li>
<li>$\forall i&lt;n,\max\{j\in\Bbb{N}^*|\lfloor{n\over i}\rfloor=\lfloor{n\over j}\rfloor\}=\displaystyle\bigg\lfloor{n\over\lfloor{n\over i}\rfloor}\bigg\rfloor$</li>
</ol>
<a id="more"></a>
<h1 id="数论函数"><a href="#数论函数" class="headerlink" title="数论函数"></a>数论函数</h1><p>定义域为正整数的函数</p>
<h2 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h2><p>满足$\forall m, n\in\Bbb{N}^*,m\perp n\implies f(mn)=f(m)f(n)$的$f(n)$</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul>
<li>$f,g$为积性函数$\implies fg,\displaystyle{f\over g},f*g$为积性函数</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ol>
<li>单位函数: $\epsilon(n):=[n=1]$</li>
<li>$\operatorname{id}_k(n):=n^k$<ul>
<li>$e(n):=\operatorname{id}_0(n)$</li>
<li>恒等映射: $\operatorname{id}(n):=\operatorname{id}_1(n)$</li>
</ul>
</li>
<li>$\omega(n):=|\{p\in\{prime\}|p\mid n\}|$</li>
<li>$\sigma_k(n):=\displaystyle\sum_{d\mid n}n^k$<ul>
<li>因子个数: $\tau(n):=\sigma_0(n)$</li>
<li>因子和: $\sigma(n):=\sigma_1(n)$</li>
</ul>
</li>
<li>euler函数: $\varphi(n):=\displaystyle\sum_{i=1}^n[i\perp n]$</li>
<li>möbius函数: $\mu(n):=[\forall p\in\{prime\},p^2\nmid n]*(-1)^{\omega(n)}$</li>
</ol>
<h2 id="完全积性函数"><a href="#完全积性函数" class="headerlink" title="完全积性函数"></a>完全积性函数</h2><p>满足$\forall m, n\in\Bbb{N}^*,f(mn)=f(m)f(n)$的$f(n)$</p>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>$\displaystyle\Big({a\over p}\Big)$</p>
<h1 id="Dirichlet卷积"><a href="#Dirichlet卷积" class="headerlink" title="Dirichlet卷积"></a>Dirichlet卷积</h1><p>$(f*g)(n):=\displaystyle\sum_{d\mid n}f(d)g({n\over d})$</p>
<h2 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h2><ol>
<li>结合律, 交换律, 幺元, 单位元<ul>
<li>幺元: $e(n)$</li>
<li>单位元: $\epsilon(n)$ </li>
</ul>
</li>
</ol>
<h2 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h2><ol>
<li>$\boldsymbol{\epsilon(n)=e(n)*\mu(n)}$ ($\implies[i\perp j]=\displaystyle\sum_{d\mid\gcd(i,j)}\mu(d)$)</li>
<li>$\sigma_k(n)=e(n)*\operatorname{id}_k(n)$</li>
<li>$\varphi(n)=\mu(n)*\operatorname{id}(n)\iff\operatorname{id}(n)=e(n)*\varphi(n)$</li>
</ol>
<h1 id="Mobius反演"><a href="#Mobius反演" class="headerlink" title="Möbius反演"></a>Möbius反演</h1><p>$f=g*e\iff g=f*\mu$</p>
]]></content>
      <tags>
        <tag>数学</tag>
        <tag>笔记</tag>
        <tag>数论</tag>
        <tag>数论分块</tag>
        <tag>数论函数</tag>
        <tag>Dirichlet卷积</tag>
        <tag>Möbius反演</tag>
      </tags>
  </entry>
  <entry>
    <title>“线段树的扩展之浅谈zkw线段树”一文的测试代码与结果更新</title>
    <url>/article/zkw-segment-tree-test2/</url>
    <content><![CDATA[<p>更新的原因主要是笔者觉得以前的码风很乱QwQ</p>
<a id="more"></a>
<p>测试平台:</p>
<ul>
<li><p>系统: Ubuntu 18.04 LTS 64位</p>
</li>
<li><p>CPU: Intel(R) Core(TM) i5-9300H CPU @ 2.40GHz</p>
</li>
</ul>
<p>所有代码均使用基于<code>fread</code>和<code>fwrite</code>的快读快写模板, 并在编译时使用C++98标准和O3优化</p>
<p>结果 (单位: s):</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">递归线段树</th>
<th style="text-align:center">zkw线段树</th>
<th style="text-align:center">树状数组</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1e6(5组)</td>
<td style="text-align:center">0.31803</td>
<td style="text-align:center">0.20853</td>
<td style="text-align:center">0.17850</td>
</tr>
<tr>
<td style="text-align:center">5e6(5组)</td>
<td style="text-align:center">2.04103</td>
<td style="text-align:center">0.96225</td>
<td style="text-align:center">1.45518</td>
</tr>
<tr>
<td style="text-align:center">1e7(5组)</td>
<td style="text-align:center">6.47973</td>
<td style="text-align:center">3.73674</td>
<td style="text-align:center">3.76717</td>
</tr>
<tr>
<td style="text-align:center">2e7(5组)</td>
<td style="text-align:center">14.7163</td>
<td style="text-align:center">8.07310</td>
<td style="text-align:center">7.91748</td>
</tr>
</tbody>
</table>
</div>
<p>可以注意到, 正如 @<a href="https://www.luogu.com.cn/user/23398" target="_blank" rel="noopener">frankchenfu</a> 在原文评论里所说, 开了O3优化后, zkw线段树得到了更显著的优化, 速度与树状数组更加接近(毕竟依zkw julao所说, 二者理论上速度应该差不多)</p>
<p>而且笔者自认为zkw线段树更优美, 所以还是推荐各位学习zkw线段树QwQ</p>
<p>测试代码:</p>
<ol>
<li>递归线段树:</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _for_u64(i, l, r) for (register u64 i = (l); i &lt;= (r); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _for_u32(i, l, r) for (register u32 i = (l); i &lt;= (r); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FINLINE __inline__ __attribute__((always_inline))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> u64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u32;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">start</span>, <span class="title">end</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> FastIO &#123;</span><br><span class="line"><span class="keyword">char</span> buf_read[<span class="number">1</span> &lt;&lt; <span class="number">21</span>], buf_print[<span class="number">1</span> &lt;&lt; <span class="number">21</span>], a[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> *p_read = buf_read, *p_print = buf_read;</span><br><span class="line"><span class="keyword">int</span> p, now_print = <span class="number">-1</span>;</span><br><span class="line"><span class="function">FINLINE <span class="keyword">int</span> <span class="title">getc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> p_read == p_print &amp;&amp; (p_print = (p_read = buf_read) +</span><br><span class="line">                                         fread(buf_read, <span class="number">1</span>, <span class="number">1</span> &lt;&lt; <span class="number">21</span>, <span class="built_in">stdin</span>),</span><br><span class="line">                               p_read == p_print)</span><br><span class="line">             ? EOF</span><br><span class="line">             : *p_read++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> ch = getc();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    ch = getc();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    x = x * <span class="number">10</span> + ch - <span class="number">48</span>;</span><br><span class="line">    ch = getc();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, T&amp; y)</span> </span>&#123;</span><br><span class="line">  read(x);</span><br><span class="line">  read(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  fwrite(buf_print, <span class="number">1</span>, now_print + <span class="number">1</span>, <span class="built_in">stdout</span>), now_print = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (now_print &gt; <span class="number">1</span> &lt;&lt; <span class="number">20</span>)</span><br><span class="line">    flush();</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    a[++p] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (x /= <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    buf_print[++now_print] = a[p];</span><br><span class="line">  &#125; <span class="keyword">while</span> (--p);</span><br><span class="line">  buf_print[++now_print] = <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace FastIO</span></span><br><span class="line"><span class="keyword">using</span> FastIO::print;</span><br><span class="line"><span class="keyword">using</span> FastIO::read;</span><br><span class="line"><span class="comment">//================================================================</span></span><br><span class="line"><span class="keyword">const</span> u32 N = <span class="number">2e7</span> + <span class="number">5</span>;</span><br><span class="line">u32 n, m;</span><br><span class="line">u64 a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Segtree &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ls(p) ((p) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _rs(p) ((p) &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _mid u64 m = ((r - l) &gt;&gt; 1) + l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _now tree[p]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _lch tree[_ls(p)]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _rch tree[_rs(p)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  u64 sum, lazy;</span><br><span class="line">  <span class="keyword">void</span> <span class="keyword">operator</span>+=(<span class="keyword">const</span> node&amp; other) &#123;</span><br><span class="line">    sum += other.sum;</span><br><span class="line">    lazy += other.lazy;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; tree[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">FINLINE <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(u32 p)</span> </span>&#123;</span><br><span class="line">  _now.sum = _lch.sum + _rch.sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">FINLINE <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(u32 p, u32 ln, u32 rn)</span> </span>&#123;</span><br><span class="line">  _lch += &#123;_now.lazy * ln, _now.lazy&#125;;</span><br><span class="line">  _rch += &#123;_now.lazy * rn, _now.lazy&#125;;</span><br><span class="line">  _now.lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(u32 l = <span class="number">1</span>, u32 r = n, u32 p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    _now = &#123;a[l], <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _mid;</span><br><span class="line">  init(l, m, _ls(p));</span><br><span class="line">  init(m + <span class="number">1</span>, r, _rs(p));</span><br><span class="line">  push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(u32 L, u32 R, u64 c, u32 l = <span class="number">1</span>, u32 r = n, u32 p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">    _now += &#123;c * (r - l + <span class="number">1</span>), c&#125;;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _mid;</span><br><span class="line">  push_down(p, m - l + <span class="number">1</span>, r - m);</span><br><span class="line">  <span class="keyword">if</span> (L &lt;= m)</span><br><span class="line">    update(L, R, c, l, m, _ls(p));</span><br><span class="line">  <span class="keyword">if</span> (R &gt; m)</span><br><span class="line">    update(L, R, c, m + <span class="number">1</span>, r, _rs(p));</span><br><span class="line">  push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">u64 <span class="title">query</span><span class="params">(u32 L, u32 R, u32 l = <span class="number">1</span>, u32 r = n, u32 p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">    <span class="keyword">return</span> _now.sum;</span><br><span class="line">  _mid;</span><br><span class="line">  u64 ans = <span class="number">0</span>;</span><br><span class="line">  push_down(p, m - l + <span class="number">1</span>, r - m);</span><br><span class="line">  <span class="keyword">if</span> (L &lt;= m)</span><br><span class="line">    ans += query(L, R, l, m, _ls(p));</span><br><span class="line">  <span class="keyword">if</span> (R &gt; m)</span><br><span class="line">    ans += query(L, R, m + <span class="number">1</span>, r, _rs(p));</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace Segtree</span></span><br><span class="line"><span class="keyword">using</span> Segtree::init;</span><br><span class="line"><span class="keyword">using</span> Segtree::query;</span><br><span class="line"><span class="keyword">using</span> Segtree::update;</span><br><span class="line"></span><br><span class="line">u32 o, x, y;</span><br><span class="line">u64 k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  assert(argc == <span class="number">4</span>);</span><br><span class="line">  freopen(argv[<span class="number">1</span>], <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(argv[<span class="number">2</span>], <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  freopen(argv[<span class="number">3</span>], <span class="string">"a"</span>, <span class="built_in">stderr</span>);</span><br><span class="line">  gettimeofday(&amp;start, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="comment">//================================================================</span></span><br><span class="line">  read(n, m);</span><br><span class="line">  _for_u32(i, <span class="number">1</span>, n) read(a[i]);</span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __linux</span></span><br><span class="line">    FastIO::getc();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    o = FastIO::getc();</span><br><span class="line">    read(x, y);</span><br><span class="line">    <span class="keyword">if</span> (o &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      read(k);</span><br><span class="line">      update(x, y, k);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      print(query(x, y));</span><br><span class="line">  &#125;</span><br><span class="line">  FastIO::flush();</span><br><span class="line">  <span class="comment">//================================================================</span></span><br><span class="line">  gettimeofday(&amp;end, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; start.tv_sec &lt;&lt; <span class="string">"."</span> &lt;&lt; start.tv_usec &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">            &lt;&lt; end.tv_sec &lt;&lt; <span class="string">"."</span> &lt;&lt; end.tv_usec &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">            &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>zkw线段树:</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> u64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u32;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FINLINE __inline__ __attribute__((always_inline))</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">start</span>, <span class="title">end</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> FastIO &#123;</span><br><span class="line"><span class="keyword">const</span> u32 MAX_BUFFER_SIZE = <span class="number">1</span> &lt;&lt; <span class="number">21</span>;</span><br><span class="line"><span class="keyword">char</span> buf_read[MAX_BUFFER_SIZE], buf_print[MAX_BUFFER_SIZE], a[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> *p_read = buf_read, *p_print = buf_read;</span><br><span class="line"><span class="keyword">int</span> p, now_print = <span class="number">-1</span>;</span><br><span class="line"><span class="function">FINLINE <span class="keyword">int</span> <span class="title">getc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> p_read == p_print &amp;&amp;</span><br><span class="line">                 (p_print = (p_read = buf_read) +</span><br><span class="line">                            fread(buf_read, <span class="number">1</span>, MAX_BUFFER_SIZE, <span class="built_in">stdin</span>),</span><br><span class="line">                  p_read == p_print)</span><br><span class="line">             ? EOF</span><br><span class="line">             : *p_read++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> ch = getc();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    ch = getc();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    x = x * <span class="number">10</span> + ch - <span class="number">48</span>;</span><br><span class="line">    ch = getc();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, T&amp; y)</span> </span>&#123;</span><br><span class="line">  read(x);</span><br><span class="line">  read(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  fwrite(buf_print, <span class="number">1</span>, now_print + <span class="number">1</span>, <span class="built_in">stdout</span>), now_print = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (now_print &gt; MAX_BUFFER_SIZE / <span class="number">2</span>)</span><br><span class="line">    flush();</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    a[++p] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (x /= <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    buf_print[++now_print] = a[p];</span><br><span class="line">  &#125; <span class="keyword">while</span> (--p);</span><br><span class="line">  buf_print[++now_print] = <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace FastIO</span></span><br><span class="line"><span class="keyword">using</span> FastIO::print;</span><br><span class="line"><span class="keyword">using</span> FastIO::read;</span><br><span class="line"><span class="comment">//================================================================</span></span><br><span class="line"><span class="keyword">const</span> u32 _N = <span class="number">2e7</span> + <span class="number">5</span>;</span><br><span class="line">u32 n, m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> zkwSegtree &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ls(p) ((p) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _rs(p) ((p) &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _now(p) tree[p]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _lch(p) tree[_ls(p)]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _rch(p) tree[_rs(p)]</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  u64 sum, lazy;</span><br><span class="line">  <span class="keyword">void</span> <span class="keyword">operator</span>+=(<span class="keyword">const</span> node&amp; other) &#123;</span><br><span class="line">    sum += other.sum;</span><br><span class="line">    lazy += other.lazy;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; tree[_N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">u32 N = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">FINLINE <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (; N &lt;= n + <span class="number">1</span>; N &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">for</span> (u32 i = N + <span class="number">1</span>; i &lt;= N + n; ++i)</span><br><span class="line">    read(_now(i).sum);</span><br><span class="line">  <span class="keyword">for</span> (u32 i = N - <span class="number">1</span>; i; --i)</span><br><span class="line">    _now(i).sum = _lch(i).sum + _rch(i).sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(u32&amp; s, u32&amp; t, u64&amp; k)</span> </span>&#123;</span><br><span class="line">  u64 lNum = <span class="number">0</span>, rNum = <span class="number">0</span>, nNum = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (s = N + s - <span class="number">1</span>, t = N + t + <span class="number">1</span>; s ^ t ^ <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>, nNum &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    _now(s).sum += k * lNum;</span><br><span class="line">    _now(t).sum += k * rNum;</span><br><span class="line">    <span class="keyword">if</span> (~s &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      _now(s ^ <span class="number">1</span>) += &#123;k * nNum, k&#125;;</span><br><span class="line">      lNum += nNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      _now(t ^ <span class="number">1</span>) += &#123;k * nNum, k&#125;;</span><br><span class="line">      rNum += nNum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (; s; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    _now(s).sum += k * lNum;</span><br><span class="line">    _now(t).sum += k * rNum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">u64 <span class="title">query</span><span class="params">(u32&amp; s, u32&amp; t)</span> </span>&#123;</span><br><span class="line">  u64 lNum = <span class="number">0</span>, rNum = <span class="number">0</span>, nNum = <span class="number">1</span>;</span><br><span class="line">  u64 ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (s = N + s - <span class="number">1</span>, t = N + t + <span class="number">1</span>; s ^ t ^ <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>, nNum &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_now(s).lazy)</span><br><span class="line">      ans += _now(s).lazy * lNum;</span><br><span class="line">    <span class="keyword">if</span> (_now(t).lazy)</span><br><span class="line">      ans += _now(t).lazy * rNum;</span><br><span class="line">    <span class="keyword">if</span> (~s &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      ans += _now(s ^ <span class="number">1</span>).sum;</span><br><span class="line">      lNum += nNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      ans += _now(t ^ <span class="number">1</span>).sum;</span><br><span class="line">      rNum += nNum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (; s; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">    ans += _now(s).lazy * lNum + _now(t).lazy * rNum;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace zkwSegtree</span></span><br><span class="line"><span class="keyword">using</span> zkwSegtree::init;</span><br><span class="line"><span class="keyword">using</span> zkwSegtree::query;</span><br><span class="line"><span class="keyword">using</span> zkwSegtree::update;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">u32 x, y;</span><br><span class="line">u64 k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  assert(argc == <span class="number">4</span>);</span><br><span class="line">  freopen(argv[<span class="number">1</span>], <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(argv[<span class="number">2</span>], <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  freopen(argv[<span class="number">3</span>], <span class="string">"a"</span>, <span class="built_in">stderr</span>);</span><br><span class="line">  gettimeofday(&amp;start, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="comment">//================================================================</span></span><br><span class="line">  read(n, m);</span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __linux</span></span><br><span class="line">    FastIO::getc();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    c = FastIO::getc();</span><br><span class="line">    assert(c == <span class="string">'1'</span> || c == <span class="string">'2'</span>);</span><br><span class="line">    read(x, y);</span><br><span class="line">    <span class="keyword">if</span> (c &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      read(k);</span><br><span class="line">      update(x, y, k);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      print(query(x, y));</span><br><span class="line">  &#125;</span><br><span class="line">  FastIO::flush();</span><br><span class="line">  <span class="comment">//================================================================</span></span><br><span class="line">  gettimeofday(&amp;end, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; start.tv_sec &lt;&lt; <span class="string">"."</span> &lt;&lt; start.tv_usec &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">            &lt;&lt; end.tv_sec &lt;&lt; <span class="string">"."</span> &lt;&lt; end.tv_usec &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">            &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>树状数组:</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _lowbit(x) (1 &lt;&lt; __builtin_ctz(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FINLINE __inline__ __attribute__((always_inline))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> u64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u32;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">start</span>, <span class="title">end</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> FastIO &#123;</span><br><span class="line"><span class="keyword">char</span> buf_read[<span class="number">1</span> &lt;&lt; <span class="number">21</span>], buf_print[<span class="number">1</span> &lt;&lt; <span class="number">21</span>], a[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> *p_read = buf_read, *p_print = buf_read;</span><br><span class="line"><span class="keyword">int</span> p, now_print = <span class="number">-1</span>;</span><br><span class="line"><span class="function">FINLINE <span class="keyword">int</span> <span class="title">getc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> p_read == p_print &amp;&amp; (p_print = (p_read = buf_read) +</span><br><span class="line">                                         fread(buf_read, <span class="number">1</span>, <span class="number">1</span> &lt;&lt; <span class="number">21</span>, <span class="built_in">stdin</span>),</span><br><span class="line">                               p_read == p_print)</span><br><span class="line">             ? EOF</span><br><span class="line">             : *p_read++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> ch = getc();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    ch = getc();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    x = x * <span class="number">10</span> + ch - <span class="number">48</span>;</span><br><span class="line">    ch = getc();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, T&amp; y)</span> </span>&#123;</span><br><span class="line">  read(x);</span><br><span class="line">  read(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  fwrite(buf_print, <span class="number">1</span>, now_print + <span class="number">1</span>, <span class="built_in">stdout</span>), now_print = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (now_print &gt; <span class="number">1</span> &lt;&lt; <span class="number">20</span>)</span><br><span class="line">    flush();</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    a[++p] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (x /= <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    buf_print[++now_print] = a[p];</span><br><span class="line">  &#125; <span class="keyword">while</span> (--p);</span><br><span class="line">  buf_print[++now_print] = <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace FastIO</span></span><br><span class="line"><span class="keyword">using</span> FastIO::print;</span><br><span class="line"><span class="keyword">using</span> FastIO::read;</span><br><span class="line"><span class="comment">//================================================================</span></span><br><span class="line"><span class="keyword">const</span> u32 N = <span class="number">2e7</span> + <span class="number">5</span>;</span><br><span class="line">u64 n, m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> bit &#123;</span><br><span class="line">u64 c1[N], c2[N], num[N];</span><br><span class="line">FINLINE <span class="keyword">void</span> _add(u64* r, u32 pos, <span class="keyword">const</span> u64&amp; v) &#123;</span><br><span class="line">  <span class="keyword">for</span> (; pos &lt;= n; pos += _lowbit(pos))</span><br><span class="line">    r[pos] += v;</span><br><span class="line">&#125;</span><br><span class="line">FINLINE u64 _query(u64* r, u32 pos) &#123;</span><br><span class="line">  <span class="function">u64 <span class="title">ans</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (; pos; pos -= _lowbit(pos))</span><br><span class="line">    ans += r[pos];</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">FINLINE <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (u32 i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    read(num[i]);</span><br><span class="line">    _add(c1, i, num[i] - num[i - <span class="number">1</span>]);</span><br><span class="line">    _add(c2, i, (i - <span class="number">1</span>) * (num[i] - num[i - <span class="number">1</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">FINLINE <span class="keyword">void</span> <span class="title">update</span><span class="params">(u32 x, u32 y, u64 k)</span> </span>&#123;</span><br><span class="line">  _add(c1, x, k);</span><br><span class="line">  _add(c1, y + <span class="number">1</span>, -k);</span><br><span class="line">  _add(c2, x, k * (x - <span class="number">1</span>));</span><br><span class="line">  _add(c2, y + <span class="number">1</span>, -k * y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">FINLINE u64 <span class="title">query</span><span class="params">(u32 x, u32 y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> y * _query(c1, y) - _query(c2, y) -</span><br><span class="line">         ((x - <span class="number">1</span>) * _query(c1, x - <span class="number">1</span>) - _query(c2, x - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace bit</span></span><br><span class="line"><span class="keyword">using</span> bit::init;</span><br><span class="line"><span class="keyword">using</span> bit::query;</span><br><span class="line"><span class="keyword">using</span> bit::update;</span><br><span class="line"></span><br><span class="line">u64 op, x, y, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  assert(argc == <span class="number">4</span>);</span><br><span class="line">  freopen(argv[<span class="number">1</span>], <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(argv[<span class="number">2</span>], <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  freopen(argv[<span class="number">3</span>], <span class="string">"a"</span>, <span class="built_in">stderr</span>);</span><br><span class="line">  gettimeofday(&amp;start, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="comment">//================================================================</span></span><br><span class="line">  read(n, m);</span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __linux</span></span><br><span class="line">    FastIO::getc();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    op = FastIO::getc();</span><br><span class="line">    read(x, y);</span><br><span class="line">    <span class="keyword">if</span> (op &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      read(k);</span><br><span class="line">      update(x, y, k);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      print(query(x, y));</span><br><span class="line">  &#125;</span><br><span class="line">  FastIO::flush();</span><br><span class="line">  <span class="comment">//================================================================</span></span><br><span class="line">  gettimeofday(&amp;end, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; start.tv_sec &lt;&lt; <span class="string">"."</span> &lt;&lt; start.tv_usec &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">            &lt;&lt; end.tv_sec &lt;&lt; <span class="string">"."</span> &lt;&lt; end.tv_usec &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">            &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>数据生成器:</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n[] = &#123;<span class="number">1</span>, (<span class="keyword">int</span>)<span class="number">1e6</span>, (<span class="keyword">int</span>)<span class="number">5e6</span>, (<span class="keyword">int</span>)<span class="number">1e7</span>, (<span class="keyword">int</span>)<span class="number">2e7</span>&#125;;</span><br><span class="line"></span><br><span class="line">ofstream out;</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line"><span class="built_in">string</span> filename;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="keyword">sizeof</span>(max_n) / <span class="keyword">sizeof</span>(max_n[<span class="number">0</span>]); ++i) &#123;</span><br><span class="line">    <span class="function">default_random_engine <span class="title">e</span><span class="params">(time(<span class="literal">NULL</span>))</span></span>;</span><br><span class="line">    uniform_int_distribution&lt;unsigned&gt; u_mn(max_n[i - 1], max_n[i]),</span><br><span class="line">        u_case(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">u_data</span><span class="params">(<span class="number">0</span>, ULLONG_MAX)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i, ++cnt) &#123;</span><br><span class="line">      ss.clear();</span><br><span class="line">      ss &lt;&lt; cnt &lt;&lt; <span class="string">".in"</span>;</span><br><span class="line">      ss &gt;&gt; filename;</span><br><span class="line">      out.open(filename);</span><br><span class="line">      <span class="keyword">int</span> n = u_mn(e), m = u_mn(e);</span><br><span class="line">      out &lt;&lt; n &lt;&lt; <span class="string">" "</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        out &lt;&lt; u_data(e) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">      out &lt;&lt; u_data(e) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="function">uniform_int_distribution&lt;<span class="keyword">unsigned</span>&gt; <span class="title">u_range</span><span class="params">(<span class="number">1</span>, n)</span></span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = u_case(e);</span><br><span class="line">        <span class="keyword">unsigned</span> x = u_range(e), y = u_range(e);</span><br><span class="line">        <span class="keyword">if</span> (op &amp; <span class="number">1</span>)</span><br><span class="line">          out &lt;&lt; op &lt;&lt; <span class="string">" "</span> &lt;&lt; min(x, y) &lt;&lt; <span class="string">" "</span> &lt;&lt; max(x, y) &lt;&lt; <span class="string">" "</span> &lt;&lt; u_data(e)</span><br><span class="line">              &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          out &lt;&lt; op &lt;&lt; <span class="string">" "</span> &lt;&lt; min(x, y) &lt;&lt; <span class="string">" "</span> &lt;&lt; max(x, y) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      out.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="../zkw-segment-tree">回到原文</a></p>
]]></content>
      <tags>
        <tag>程序设计</tag>
        <tag>洛谷日报</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 - [CQOI2018]异或序列</title>
    <url>/article/solution-luogu-p4462/</url>
    <content><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><ul>
<li><a href="https://www.luogu.com.cn/problem/P4462" target="_blank" rel="noopener">洛谷 P4462</a></li>
<li><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5301" target="_blank" rel="noopener">BZOJ 5301</a></li>
<li><a href="https://loj.ac/problem/2534" target="_blank" rel="noopener">LOJ 2534</a></li>
</ul>
<a id="more"></a>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>一句话题意: 查询区间内子区间异或和为一定值的个数</p>
<p>暴力: $O(n^3m)$ (查询:$O(m)$, 枚举子序列: $O(n^2)$, 计算异或和: $O(n)$)</p>
<p>优化:</p>
<ol>
<li><p>$\Rightarrow O(n^2m)$: 前缀和 (计算异或和: $O(n)\Rightarrow O(1)$)</p>
<p> 令</p>
<script type="math/tex; mode=display">s_i:=\bigoplus_{i=1}^x a_i</script><p> 则</p>
<script type="math/tex; mode=display">\bigoplus_{i=l}^r a_i=s_{l-1}\oplus s_r</script><ol>
<li><p>$\Rightarrow O(nm)$: 莫队</p>
<ul>
<li><p>转换思路</p>
<p>注意到</p>
<script type="math/tex; mode=display">a\oplus b=c\iff a\oplus c=b</script><p>用一个桶<code>cnt[x]</code>记录当前区间内<code>s[i]=x</code>的个数</p>
<p>则当前区间的结果为$\displaystyle\sum_{i=l}^r\mathrm{cnt}_{s_i\oplus k}$</p>
</li>
</ul>
</li>
<li>$\Rightarrow O(n\min\{m,\sqrt n\})$: 奇偶化排序优化</li>
</ol>
</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意异或的性质, 本题将a^b==c转为a^c==b</span></span><br><span class="line"><span class="keyword">int</span> n, m, sqrt_n, belongs[N];</span><br><span class="line">i64 k;</span><br><span class="line">i64 xor_num[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> l, r, id;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp; other) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (belongs[l] != belongs[other.l]) ? l &lt; other.l : (r &gt; other.r) ^ (belongs[l] &amp; <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; query[N];</span><br><span class="line">i64 ans[N];</span><br><span class="line"><span class="keyword">namespace</span> MO &#123;</span><br><span class="line">i64 cnt[M];</span><br><span class="line"><span class="function">i64 <span class="title">add</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">  i64 ans = cnt[xor_num[p] ^ k];</span><br><span class="line">  ++cnt[xor_num[p]];</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">i64 <span class="title">del</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">  --cnt[xor_num[p]];</span><br><span class="line">  <span class="keyword">return</span> cnt[xor_num[p] ^ k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace MO</span></span><br><span class="line"><span class="keyword">using</span> MO::add;</span><br><span class="line"><span class="keyword">using</span> MO::del;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  read(n, m, k);</span><br><span class="line">  sqrt_n = <span class="built_in">sqrt</span>(n);</span><br><span class="line">  _for(i, <span class="number">1</span>, n) belongs[i] = (i - <span class="number">1</span>) / sqrt_n + <span class="number">1</span>;</span><br><span class="line">  _for(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">    read(xor_num[i]);</span><br><span class="line">    xor_num[i] ^= xor_num[i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l, r; i &lt;= m; ++i) &#123;</span><br><span class="line">    read(l, r);</span><br><span class="line">    query[i] = &#123;l - <span class="number">1</span>, r, i&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::sort(query + <span class="number">1</span>, query + m + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">  i64 now_ans = <span class="number">0</span>;</span><br><span class="line">  _for(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">    <span class="keyword">int</span> now_l = query[i].l, now_r = query[i].r;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; now_l)</span><br><span class="line">      now_ans -= del(l++);</span><br><span class="line">    <span class="keyword">while</span> (l &gt; now_l)</span><br><span class="line">      now_ans += add(--l);</span><br><span class="line">    <span class="keyword">while</span> (r &lt; now_r)</span><br><span class="line">      now_ans += add(++r);</span><br><span class="line">    <span class="keyword">while</span> (r &gt; now_r)</span><br><span class="line">      now_ans -= del(r--);</span><br><span class="line">    ans[query[i].id] = now_ans;</span><br><span class="line">  &#125;</span><br><span class="line">  _for(i, <span class="number">1</span>, m) print(ans[i]);</span><br><span class="line">  FastIO::flush();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>程序设计</tag>
        <tag>算法</tag>
        <tag>题解</tag>
        <tag>省选</tag>
        <tag>洛谷</tag>
        <tag>BZOJ</tag>
        <tag>LOJ</tag>
        <tag>CQOI</tag>
        <tag>莫队</tag>
        <tag>前缀和&amp;差分</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 - Luogu P5462【X龙珠】</title>
    <url>/article/solution-luogu-p5462/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5462" target="_blank" rel="noopener">题目</a></p>
<p>我太菜了，只会用线段树+双向链表做QwQ</p>
<a id="more"></a>
<p>在读入时直接将序列转化成可能输出的数对</p>
<p>如样例1为<code>(3,1),(1,4),(4,2)</code></p>
<p>线段树维护<strong>全局最大数对</strong>，双向链表<strong>便于寻找前驱后继</strong></p>
<p>每次直接输出最大数对并删除与它有交集的数对</p>
<p>另外有一点需要注意：</p>
<p>如果最大数对出现在中间时，在删除自身、前驱和后继后会产生一个新的数对</p>
<p>例如<code>(3,4),(4,2),(2,1)</code>删除之后会产生数对<code>(3,1)</code><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _fp(i, l, r) for (register int i = (l); i &lt;= (r); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _rep(i, l, r) for (register int i = (l); i &lt; (r); ++i)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="comment">//为了便于套板子，所以把线段树放到namespace里了</span></span><br><span class="line"><span class="keyword">namespace</span> Seg &#123;</span><br><span class="line"><span class="comment">//为了清晰，用了一些宏定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _now tree[p]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _lch tree[p].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _rch tree[p].r</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> first, second, pos;  <span class="comment">//设pos是为了便于找下标，从而进行删除/修改操作</span></span><br><span class="line">&#125; pair[N];                 <span class="comment">//存数对</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segtree</span> &#123;</span></span><br><span class="line">  node val;</span><br><span class="line">  <span class="keyword">int</span>  l, r;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> segtree&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (val.first == a.val.first) ? val.second &lt; a.val.second : val.first &lt; a.val.first;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; print(val.first, val.second); &#125;  <span class="comment">//这里用了快写模板，注意修改</span></span><br><span class="line">&#125; tree[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="comment">//这里用内存池式写法是因为之前写的时候设想的是直接将没删除的儿子直接向上合并到父节点</span></span><br><span class="line"><span class="comment">//后来发现和其他操作搭配起来有点困难</span></span><br><span class="line"><span class="comment">//但我懒得换常见的数组写法了</span></span><br><span class="line"></span><br><span class="line">node _max(<span class="keyword">const</span> segtree&amp; a, <span class="keyword">const</span> segtree&amp; b) &#123;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? b.val : a.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123; _now.val = _max(tree[_lch], tree[_rch]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>&amp; p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  p = ++cnt;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    _now = &#123;pair[l], <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);  <span class="comment">//防溢出</span></span><br><span class="line">  build(_lch, l, mid);</span><br><span class="line">  build(_rch, mid + <span class="number">1</span>, r);</span><br><span class="line">  push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (_now.val.first == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    _now = &#123;pair[target] = &#123;<span class="number">-1</span>, <span class="number">-1</span>, target&#125;, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (target &lt;= mid)</span><br><span class="line">    del(_lch, l, mid, target);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    del(_rch, mid + <span class="number">1</span>, r, target);</span><br><span class="line">  push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> target, <span class="keyword">const</span> node&amp; a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    _now = &#123;pair[target] = a, <span class="number">0</span>, <span class="number">0</span>&#125;;  <span class="comment">//修改后一定要记得更新原数组</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (target &lt;= mid)</span><br><span class="line">    modify(_lch, l, mid, target, a);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    modify(_rch, mid + <span class="number">1</span>, r, target, a);</span><br><span class="line">  push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上都是线段树常规操作</span></span><br><span class="line">&#125;  <span class="comment">// namespace Seg</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> pre, suc;  <span class="comment">//pascal后遗症</span></span><br><span class="line">&#125; id[N];         <span class="comment">//双向链表</span></span><br><span class="line"><span class="keyword">int</span> head, rear, a[N], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del_rear</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pre)</span> </span>&#123;</span><br><span class="line">  Seg::del(<span class="number">1</span>, <span class="number">1</span>, n, p);</span><br><span class="line">  Seg::del(<span class="number">1</span>, <span class="number">1</span>, n, pre);</span><br><span class="line">  <span class="comment">//链表常规操作</span></span><br><span class="line">  rear        = id[pre].pre;</span><br><span class="line">  id[pre].pre = id[rear].suc = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del_head</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p, <span class="keyword">const</span> <span class="keyword">int</span>&amp; suc)</span> </span>&#123;</span><br><span class="line">  Seg::del(<span class="number">1</span>, <span class="number">1</span>, n, p);</span><br><span class="line">  Seg::del(<span class="number">1</span>, <span class="number">1</span>, n, suc);</span><br><span class="line">  <span class="comment">//链表常规操作*2</span></span><br><span class="line">  head        = id[suc].suc;</span><br><span class="line">  id[suc].suc = id[head].pre = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pre, <span class="keyword">const</span> <span class="keyword">int</span>&amp; suc)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//因为上面的代码中删除也会更新原数组，所以要把修改操作放到前面</span></span><br><span class="line">  Seg::modify(<span class="number">1</span>, <span class="number">1</span>, n, p, &#123;Seg::pair[pre].first, Seg::pair[suc].second, p&#125;);</span><br><span class="line"></span><br><span class="line">  Seg::del(<span class="number">1</span>, <span class="number">1</span>, n, pre);</span><br><span class="line">  <span class="comment">//链表常规操作*3</span></span><br><span class="line">  <span class="keyword">if</span> (!id[pre].pre)</span><br><span class="line">    head = p;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    id[id[pre].pre].suc = p;</span><br><span class="line">  id[p].pre = id[pre].pre;</span><br><span class="line"></span><br><span class="line">  Seg::del(<span class="number">1</span>, <span class="number">1</span>, n, suc);</span><br><span class="line">  <span class="comment">//链表常规操作*4</span></span><br><span class="line">  <span class="keyword">if</span> (!id[suc].suc)</span><br><span class="line">    rear = p;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    id[id[suc].suc].pre = p;</span><br><span class="line">  id[p].suc = id[suc].suc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  read(n);  <span class="comment">//这里用了快读模板，注意修改</span></span><br><span class="line">  _fp(i, <span class="number">1</span>, n) read(a[i]);</span><br><span class="line">  --n;  <span class="comment">//为了方便后面写代码</span></span><br><span class="line">  _fp(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">    Seg::pair[i] = &#123;a[i], a[i + <span class="number">1</span>], i&#125;;</span><br><span class="line">    id[i]        = &#123;i - <span class="number">1</span>, i + <span class="number">1</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> tmp1;</span><br><span class="line">  head      = <span class="number">1</span>;</span><br><span class="line">  rear      = n;</span><br><span class="line">  id[n].suc = <span class="number">0</span>;</span><br><span class="line">  Seg::build(tmp1, <span class="number">1</span>, n);</span><br><span class="line">  _rep(i, <span class="number">1</span>, (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) &#123;</span><br><span class="line">    Seg::tree[<span class="number">1</span>].print();  <span class="comment">//输出全局最值</span></span><br><span class="line">    <span class="keyword">int</span> tmp = Seg::tree[<span class="number">1</span>].val.pos;</span><br><span class="line">    <span class="keyword">int</span> suc = id[tmp].suc, pre = id[tmp].pre;  <span class="comment">//找前驱和后继</span></span><br><span class="line">    <span class="comment">//删数对</span></span><br><span class="line">    <span class="comment">//如果是表头就删掉当前和后继</span></span><br><span class="line">    <span class="comment">//如果是表尾就删掉当前和前驱</span></span><br><span class="line">    <span class="comment">//如果在中间就删除前驱和后继，并把当前节点修改一下</span></span><br><span class="line">    <span class="keyword">if</span> (tmp == rear)</span><br><span class="line">      del_rear(tmp, pre);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tmp == head)</span><br><span class="line">      del_head(tmp, suc);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      del(tmp, pre, suc);</span><br><span class="line">  &#125;</span><br><span class="line">  Seg::tree[<span class="number">1</span>].print();  <span class="comment">//把它单独提出来是为了省去不必要的操作</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>程序设计</tag>
        <tag>题解</tag>
        <tag>洛谷</tag>
        <tag>数据结构</tag>
        <tag>线段树</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 - Luogu P4896【Oier们的烦恼】</title>
    <url>/article/solution-luogu-p4896/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4896" target="_blank" rel="noopener">题目</a></p>
<p>这么好的题怎么能没有“位掩码”题解呢（滑稽</p>
<a id="more"></a>
<p>大致思路就是<strong>用一个char来记录老师是否在机房和学生是否被抓到</strong>（一共需要3+5=8位来记录，正好是一个char），再<strong>用一个char记录被抓到的学生的编号</strong>，就像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char in_room, dead;</span><br><span class="line">&#x2F;&#x2F;in_room的1～3位记录老师，4～8位记录学生</span><br></pre></td></tr></table></figure>
<p>然而为了降低调试难度，我们可以用两个char分别记录老师和学生的状态，就像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char onlineT, onlineS, deadS;</span><br><span class="line">&#x2F;&#x2F;按字面意思理解即可</span><br></pre></td></tr></table></figure>
<p>我们还需要定义一些函数来对它们进行操作，就像这样（这里以宏定义为例）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _teacher_in(i) onlineT |&#x3D; 1 &lt;&lt; i      &#x2F;&#x2F;老师进机房</span><br><span class="line">#define _teacher_out(i) onlineT &amp;&#x3D; ~(1 &lt;&lt; i)  &#x2F;&#x2F;老师出机房</span><br><span class="line">#define _student_in(i) onlineS |&#x3D; 1 &lt;&lt; i      &#x2F;&#x2F;学生开始玩游戏</span><br><span class="line">#define _student_out(i) onlineS &amp;&#x3D; ~(1 &lt;&lt; i)  &#x2F;&#x2F;学生停止玩游戏</span><br><span class="line">#define _dead(i) deadS&amp;(1 &lt;&lt; i)               &#x2F;&#x2F;查询学生是否被发现</span><br><span class="line">#define _kill_student deadS |&#x3D; onlineS        &#x2F;&#x2F;学生被发现</span><br></pre></td></tr></table></figure>
<p>其他就没什么了，可以参照其他题解<del>没错我就是懒（理直气壮</del></p>
]]></content>
      <tags>
        <tag>程序设计</tag>
        <tag>题解</tag>
        <tag>洛谷</tag>
        <tag>位掩码</tag>
      </tags>
  </entry>
  <entry>
    <title>【洛谷日报#46】浅谈自适应Simpson法</title>
    <url>/article/adaptive-simpson-rule/</url>
    <content><![CDATA[<p>一种经典的数值积分算法</p>
<p>老文章, 可能有很多错误, 懒得修了</p>
<a id="more"></a>
<h1 id="求面积诸法"><a href="#求面积诸法" class="headerlink" title="求面积诸法"></a>求面积诸法</h1><p>Simpson法是一种经典的数值积分方法, 一个重要应用就是求不规则图形面积<br>说到不规则图形, 我们往往都是先从曲边梯形开始</p>
<p>曲边梯形$ABCD$就是下图中曲线$AB$、线段$AC$、$CD$、$DB$围成的图形, 我们想要求出它的面积</p>
<p><img src="1.png" alt=""></p>
<p>一个简单而直接的解决方案是: 把曲边梯形分成$n$段, 每一段用一些规则的几何图形去近似, 然后累加每一段的面积, 这样我们就得出结果了</p>
<p>可以看出, 上述过程的关键就是选择什么样的几何图形去近似</p>
<p>当然, 用不同的几何图形近似, 效果是不同的</p>
<h2 id="用矩形去近似"><a href="#用矩形去近似" class="headerlink" title="用矩形去近似"></a>用矩形去近似</h2><p>大致这样</p>
<p><img src="2.png" alt=""></p>
<p>我们可以看出这种近似方法太粗糙了, 针对用矩形近似的方案, 我们可以做一些优化: </p>
<p>对于每一段, 我们取端点中点在函数上的对应点, 借助这个点来构造矩形: </p>
<p><img src="3.png" alt=""></p>
<p>这样看起来就舒服多了, 但感觉还是有些粗糙, 有没有更好的方法呢? </p>
<p>当然有了! </p>
<p>不过在继续之前, 我们先来看看如何实现这种方法</p>
<p>设$C(a,0)$, $D(b,0)$</p>
<p>那么</p>
<script type="math/tex; mode=display">\int_a^bf(x)\mathrm{d}x\thickapprox\Delta x_i\sum_{i=1}^{n-1}{f((i+\frac{1}{2})\Delta x_i)}</script><p>为了方便, 我们让每一段的长度相等, 即对于每一段, 均有</p>
<script type="math/tex; mode=display">\Delta x=\frac{b-a}{n}</script><p>那么</p>
<script type="math/tex; mode=display">\int_a^bf(x)\mathrm{d}x\thickapprox\Delta x\sum_{i=1}^{n-1}{f((i+\frac{1}{2})\Delta x)}</script><h2 id="用梯形去近似"><a href="#用梯形去近似" class="headerlink" title="用梯形去近似"></a>用梯形去近似</h2><p>大致这样</p>
<p><img src="4.png" alt=""></p>
<p><del>易知此法和上述的结果是一样的, 不过此法视觉效果好</del></p>
<p>有一些部分看起来已经足够精确了, 但感觉还是有些粗糙, 有没有更好的方法呢? </p>
<p>当然有了!</p>
<p>不过在继续之前, 我们还是先来看看如何实现这种方法</p>
<p>设$C(a,0)$, $D(b,0)$</p>
<p>那么</p>
<script type="math/tex; mode=display">\int_a^bf(x)\mathrm{d}x\thickapprox\Delta x_i(\sum_{i=1}^{n-1}{f(i\Delta x_i)}+\frac{f(a)+f(b)}{2})</script><p>为了方便, 我们让每一段的长度相等, 即对于每一段, 均有</p>
<script type="math/tex; mode=display">\Delta x=\frac{b-a}{n}</script><p>则</p>
<script type="math/tex; mode=display">\int_a^bf(x)\mathrm{d}x\thickapprox\Delta x(\sum_{i=1}^{n-1}{f(i\Delta x)}+\frac{f(a)+f(b)}{2})</script><h2 id="Simpson法"><a href="#Simpson法" class="headerlink" title="Simpson法"></a>Simpson法</h2><p>进入正题</p>
<p>Simpson法是先将原曲线近似成一段段抛物线, 然后再用Newton-Leibniz公式求每一段的面积</p>
<p><img src="5.png" alt=""></p>
<p>(因为笔者在GeoGebra里没找到根据三点画抛物线的工具, 所以这里用圆弧代替了QwQ)</p>
<p>可以看出, 此法效果相当不错</p>
<p>我们来看看如何实现</p>
<p>设$C(a,0)$, $D(b,0)$</p>
<p>为了方便, 我们让每一段的长度相等, 即对于每一段, 均有</p>
<script type="math/tex; mode=display">\Delta x=\frac{b-a}{n}</script><p>对于每一段区间, 我们如下处理: </p>
<p>设起点为$x_{2i-2}$, 中点为$x_{2i-1}$, 终点为$x_{2i}$</p>
<p>我们要用过点$(x_{2i-2},f(x_{2i-2}))$, $(x_{2i-1},f(x_{2i-1}))$, $(x_{2i},f(x_{2i}))$的抛物线$g(x)=Ax^2+Bx+C$来取代$f(x)$</p>
<p>有</p>
<script type="math/tex; mode=display">\begin{cases}
  f(x_{2i-2})&=g(x_{2i-2})\\
  f(x_{2i-1})&=g(x_{2i-1})\\
  f(x_{2i})&=g(x_{2i})
\end{cases}</script><p>于是</p>
<script type="math/tex; mode=display">\begin{aligned}
  \int_{x_{2i-2}}^{x_{2i}}f(x)\mathrm{d}x&\thickapprox\int_{x_{2i-2}}^{x_{2i}}g(x)\mathrm{d}x\\
  &=(\frac{A}{3}x^3+\frac{B}{2}x^2+Cx)\Big|_{x_{2i-2}}^{x_{2i}}\\
  &=\frac{\Delta x}{3}[f(x_{2i-2})+4f(x_{2i-1})+f(x_{2i})]
\end{aligned}</script><p>故</p>
<script type="math/tex; mode=display">\int_a^bf(x)\mathrm{d}x\thickapprox\frac{\Delta x}{3}\sum_{i=0}^{2n-2}[f(x_{2i})+4f(x_{2i+1})+f(x_{2i+2})]</script><p>一部分资料认为Simpson法只用一段抛物线替代, 即</p>
<script type="math/tex; mode=display">\displaystyle\int_a^bf(x)\mathrm{d}x\thickapprox\frac{b-a}{6}[f(a)+4f(\frac{a+b}{2})+f(b)]</script><p>下称此情况为三点Simpson法</p>
<h1 id="自适应Simpson法"><a href="#自适应Simpson法" class="headerlink" title="自适应Simpson法"></a>自适应Simpson法</h1><p>自适应Simpson法就是对Simpson法的一个优化</p>
<p>对一段区间$[a,b]$, 我们做如下操作</p>
<ol>
<li>取中点$mid=\frac{a+b}{2}$</li>
<li>分别对区间$[a,b]$、区间$[a,mid]$、区间$[mid,b]$应用三点Simpson法, 设得到的面积分别为$S_0$、$S_1$、$S_2$</li>
<li>若$S_0$与$S_1+S_2$差别不大, 就认为区间$[a,b]$面积的近似值已经求得, 否则分别对区间$[a,mid]$、区间$[mid,b]$递归应用本操作</li>
</ol>
<p>可以看出这个方法在保证了精度的同时保证了效率</p>
<p>我们注意到, 上述操作中有两个地方含糊不清</p>
<p>一个是如何确定“差别不大”, 一个是面积的近似值已经求得后返回的面积是多少</p>
<p>我们认为当且仅当$|S_1+S_2-S_0|&lt;15\epsilon$时$S_0$与$S_1+S_2$差别不大</p>
<blockquote>
<p>乘以$15$是经过一系列误差分析后得出的, 具体笔者可能会另写一篇文章<del>咕咕咕</del>, 感谢@<a href="https://www.luogu.org/space/show?uid=17930" target="_blank" rel="noopener">Marser</a>和@<a href="https://www.luogu.org/space/show?uid=7868" target="_blank" rel="noopener">_rqy</a>两位dalao的补充</p>
</blockquote>
<p>返回的面积则是$S_1+S_2+\frac{S_1+S_2-S_0}{15}$</p>
<p>附程序: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">F</span><span class="params">(<span class="keyword">double</span> num)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 按需补充</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">simpson</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 防溢出</span></span><br><span class="line">  <span class="keyword">double</span> c = a + (b - a) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> (F(a) + <span class="number">4</span> * F(c) + F(b)) * (b - a) / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// adaptive simpson rule</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">asr</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> eps, <span class="keyword">double</span> S)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> c  = a + (b - a) / <span class="number">2</span>,</span><br><span class="line">         lS = simpson(a, c), rS = simpson(c, b);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">fabs</span>(lS + rS - S) &lt;= <span class="number">15</span> * eps)</span><br><span class="line">    <span class="keyword">return</span> lS + rS + (lS + rS - S) / <span class="number">15.0</span>;</span><br><span class="line">  <span class="comment">// 注意这里eps要除以2</span></span><br><span class="line">  <span class="keyword">return</span> asr(a, c, eps / <span class="number">2</span>, lS) + asr(c, b, eps / <span class="number">2</span>, rS); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这篇文章笔者写了4h吧, 内容还算简单, 希望各位能够愉快地享用~(￣▽￣)~*</p>
<p>btw, 洛谷P4525、P4526是模板题ヾ(≧▽≦*)<del>连切两道紫题真开心</del></p>
<h1 id="主要参考书目"><a href="#主要参考书目" class="headerlink" title="主要参考书目"></a>主要参考书目</h1><ul>
<li>刘汝佳, 陈锋. 算法竞赛入门经典——训练指南. 北京: 清华大学出版社, 2012</li>
</ul>
]]></content>
      <tags>
        <tag>数学</tag>
        <tag>程序设计</tag>
        <tag>算法</tag>
        <tag>洛谷日报</tag>
        <tag>数值积分</tag>
        <tag>自适应Simpson算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【洛谷日报#53】浅谈一些求近似值的方法</title>
    <url>/article/approx-number/</url>
    <content><![CDATA[<p><del>只是为了拿本子随便写的</del></p>
<p>老文章, 可能有很多错误, 懒得修了</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于低于5次的多项式方程, 我们有通用的公式解法求零点的精确值</p>
<p>对于一些特殊高次多项式方程 (例如可以因式分解的或者满足一些特定形式的方程) 的和一些特殊的超越方程, 我们也有方法求零点的精确值</p>
<p>但是其余的情况呢？</p>
<p>目前来说我们只能求近似值QwQ (而且在实际应用中, 精确值往往也会被转换成近似值) </p>
<p>下面简要介绍几种方法</p>
<h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><p>可以说相当常见了</p>
<p>对于<strong>在区间$[l,r]$内单调、连续且有$f(l)\cdot f(r)&lt;0$成立的$f(x)$</strong>, 做如下操作: </p>
<ol>
<li>计算$mid=\displaystyle\frac{l+r}{2}$</li>
<li>若$f(l)f(mid)&lt;0$, 则令$r=mid$, 否则令$l=mid$</li>
<li>如果达到预定精度, 跳转到4, 否则跳转到1</li>
<li>结束</li>
</ol>
<p>循环次数: $\displaystyle\lceil\log_2 {\frac{r-l}{\epsilon}}\rceil$</p>
<p>附程序: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r, <span class="keyword">double</span> EPS)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> mid;</span><br><span class="line">  <span class="keyword">while</span> (r - l &gt; EPS) &#123;</span><br><span class="line">    mid = l + (r - l) / <span class="number">2</span>;  <span class="comment">//防溢出</span></span><br><span class="line">    <span class="keyword">if</span> (F(mid) * F(l) &lt;= <span class="number">0</span>)</span><br><span class="line">      r = mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      l = mid;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="0-618法-优选法"><a href="#0-618法-优选法" class="headerlink" title="0.618法\优选法"></a>0.618法\优选法</h1><p>常用于求<strong>单峰函数最值</strong></p>
<p>先证明一下它的最优性(摘自人教版高中数学选修4-7<del>没错真的有这本选修</del>) </p>
<blockquote>
<p>为了使每次去掉的区间有一定的规律性, 我们这样来考虑: <strong>每次舍去的区间占舍去前的区间的比例数相同</strong></p>
<p>下面进一步分析如何按上述两个原则确定合适的试点. 如图2-1 设第1试点、第2试点分别为$x_1$和$x_2$, $x_2&lt;x_1$且$x_1,x_2$关于$[a,b]$的中心对称, 即$x_2-a=b-x_1$</p>
<p><img src="2_1.PNG" alt=""></p>
<p> (图2-1, 由GeoGebra生成) </p>
<p>显然,  不论点$x_2$(或点$x_1$)是好点还是差点, 由对称性,  舍去的区间长度都等于$b-x_1$, 不妨设$x_2$是好点, $x_1$是差点, 于是舍去$(x_1,b]$. 再在存优范围$[a,x_1]$内安排第3次试验, 设试点为$x_3$, $x_3$与$x_2$关于$[a,x_1]$的中心对称 (如图2-2所示) . </p>
<p><img src="2_2.PNG" alt=""></p>
<p> (图2-2, 由GeoGebra生成) </p>
<p>点$x_3$应在点$x_2$左侧, 因为如果点$x_3$在点$x_2$的右侧, 那么当$x_3$是好点, $x_2$是差点时, 要舍去区间$[a,x_2]$, 而它的长度与上次舍去的区间$(x_1,b]$的长度相同, 违背成比例舍去的原则. 于是, 不论点$x_3$ (或点$x_2$) 是好点还是差点, 被舍去的区间长度都等于$x_1-x_2$, 按成比例舍去的原则, 我们有等式</p>
<script type="math/tex; mode=display">\frac{b-x_1}{b-a}=\frac{x_1-x_2}{x_1-a}\tag{1}</script><p>其中, 左边是第一次舍去的比例数, 右边是第二次舍去的比例数,  对式(1)变形, 得</p>
<script type="math/tex; mode=display">1-\frac{b-x_1}{b-a}=1-\frac{x_1-x_2}{x_1-a}</script><p>即</p>
<script type="math/tex; mode=display">\frac{x_1-a}{b-a}=\frac{x_2-a}{x_1-a}\tag{2}</script><p>式(2)两边分别是两次舍弁后的存优范围占舍弃前全区间的比例数, 设每次舍弃后的存优范围占舍弃前全区间的比例数为$t$, 即</p>
<script type="math/tex; mode=display">\frac{x_1-a}{b-a}=t\tag{3}</script><p>则由$b-x_2=x_1-a$可得</p>
<script type="math/tex; mode=display">\frac{x_2-a}{b-a}=1-t\tag{4}</script><p>由式(2)得</p>
<script type="math/tex; mode=display">\frac{x_1-a}{b-a}=\frac{\frac{x_2-a}{b-a}}{\frac{x_1-a}{b-a}}</script><p>把(3)与(4)代入(5), 得</p>
<script type="math/tex; mode=display">t=\frac{1-t}{t}</script><p>即</p>
<script type="math/tex; mode=display">t^2+t-1=0</script><p>解得$t_1=\displaystyle\frac{-1+\sqrt{5}}{2}, t_2=\frac{-1-\sqrt{5}}{2}$, 其中$t_1$为对本问题有意义的根, 这就是<strong>黄金分割常数</strong>, 用$\varphi$表示 (注: 原文用$\omega$表示) </p>
</blockquote>
<p>一句话概括就是在缩小区间后可以只计算一个试点坐标, 从而保证最优</p>
<p>流程如下</p>
<ol>
<li>计算$mid_1=l\varphi+r(1-\varphi)$, $mid_2=l(1-\varphi)+r\varphi$</li>
<li>若$f(l) f(mid_1)&gt;0$<ol>
<li>则令$l=mid_1,mid_1=mid_2,mid_2=l(1-\varphi)+r\varphi$</li>
<li>否则令$r=mid_2,mid_2=mid_1,mid_1=l\varphi+r(1-\varphi)$</li>
</ol>
</li>
<li>如果达到预定精度, 跳转到4, 否则跳转到2 <strong> (注意这里跳转到2) </strong></li>
<li>结束</li>
</ol>
<p>附程序: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PHI  = <span class="number">0.61803399</span>,  </span><br><span class="line">             mPHI = <span class="number">0.38196601</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">gold_search</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r, <span class="keyword">double</span> EPS)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> mid1 = l + mPHI * (r - l), mid2 = l + PHI * (r - l);</span><br><span class="line">  <span class="keyword">while</span> (r - l &gt; EPS) &#123;</span><br><span class="line">    <span class="keyword">if</span> (F(mid1) &lt; F(mid2)) &#123;</span><br><span class="line">      l    = mid1;</span><br><span class="line">      mid1 = mid2;</span><br><span class="line">      mid2 = l + PHI * (r - l);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      r    = mid2;</span><br><span class="line">      mid2 = mid1;</span><br><span class="line">      mid1 = l + mPHI * (r - l);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (mid1 + mid2) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>读者们可以在<a href="https://www.luogu.org/problemnew/show/P3382" target="_blank" rel="noopener">洛谷P3382</a>中测试一下(～o￣3￣)～</p>
<p>关于这个还有一个类似方法: 斐波那契法. 有兴趣的读者可以查阅相关资料<del>才不是笔者不想写</del><code>_(:3」∠)_</code></p>
<h1 id="Taylor公式"><a href="#Taylor公式" class="headerlink" title="Taylor公式"></a>Taylor公式</h1><p><strong>先讲这个是为了为下文Newton迭代法二次收敛的证明做铺垫, 不想看证明的可以略过QwQ (不过还是推荐了解一下, 挺有趣的)</strong></p>
<p><strong>这里假定函数$f(x)$在$x_0$处有任意阶导数</strong></p>
<p>我们可以很容易地求出多项式和类指数函数的近似值, 但是像三角函数、对数函数这样的我们又该如何求近似值呢</p>
<p>对了, 就是用<strong>Taylor公式</strong>QwQ</p>
<p>Taylor公式的想法很简单, 就是构造一个多项式函数$g(x)=\displaystyle\sum_{k=0}^n{a_kx^k}$, 使得它与函数$f(x)$在$x_0$处的<strong>原函数值和各阶导数</strong>均相等, 即</p>
<script type="math/tex; mode=display">\begin{aligned}
  f(x_0)&=g(x_0)\\
  f^\prime(x_0)&=g^\prime(x_0)\\
  f^{\prime\prime}(x_0)&=g^{\prime\prime}(x_0)\\
  &...\\
  f^{(n)}(x_0)&=g^{(n)}(x_0)
\end{aligned}</script><p>因为</p>
<script type="math/tex; mode=display">g^{(m)}(x)=\sum_{k=m}^n{\frac{k!}{(k-m)!}a_kx^{k-m}}</script><p>于是便有 </p>
<script type="math/tex; mode=display">g(x)=\sum_{k=0}^n{\frac{f^{(k)}(x_0)}{k!}(x-x_0)^k}</script><p>当$n\rightarrow\infty$时, 我们可以认为$f(x)=g(x)$</p>
<p>而当$n$有一个确定的值时, $f(x)$就可以写成$g(x)+R_n(x)$了</p>
<p>其中$R_n(x)$是余项, 它有好几种不同的写法, 比如Lagrange余项</p>
<script type="math/tex; mode=display">R_k(x)=\frac{f^{(k+1)}(\xi_L)}{(k+1)!}(x-x_0)^{k+1}</script><p>其中$\xi_L$在$x$和$x_0$之间</p>
<p>当$n\rightarrow\infty$时, 有(Taylor级数) </p>
<script type="math/tex; mode=display">\displaystyle\sum_{k=0}^\infty{\frac{f^{(k)}(x_0)}{k!}(x-x_0)^k}</script><p>特别地, 当$x_0=0$时, 有(Maclaurin级数) </p>
<script type="math/tex; mode=display">\displaystyle\sum_{k=0}^\infty{\frac{f^{(k)}(0)}{k!}}x^k</script><p>另外注意应用Maclaurin级数并且$x$在某个范围之外时, 得到的结果可能是发散的(这个不展开讲, 有兴趣的读者可以去学习无穷级数相关知识) </p>
<p>附上<a href="https://en.wikipedia.org/wiki/Taylor%27s_theorem" target="_blank" rel="noopener">Wikipedia</a>的动图</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/3/31/Tayloranimation.gif" alt=""></p>
<p>对证明感兴趣的读者可以自行查阅相关资料</p>
<p>下面给出几个常见的Taylor级数</p>
<script type="math/tex; mode=display">e^x=\displaystyle\sum_{k=0}^\infty{\frac{x^k}{k!}}</script><script type="math/tex; mode=display">\sin x=\displaystyle\sum_{k=0}^\infty{(-1)^k\frac{x^{2k+1}}{(2k+1)!}}</script><script type="math/tex; mode=display">\cos x=\displaystyle\sum_{k=0}^\infty{(-1)^k\frac{x^{2k}}{(2k)!}}</script><p>(有上面三个式子就可以证明欧拉公式之$e^{i\theta}=\cos\theta+i\sin\theta$了) </p>
<script type="math/tex; mode=display">\ln{(1+x)}=\displaystyle\sum_{k=1}^\infty{(-1)^{k+1}\frac{x^k}{k}}</script><script type="math/tex; mode=display">\frac{1}{1-x}=\displaystyle\sum_{k=0}^\infty{x^k}</script><script type="math/tex; mode=display">(1+x)^m=\displaystyle\sum_{k=0}^\infty{\binom{m}{k}x^k}</script><h1 id="Newton迭代法"><a href="#Newton迭代法" class="headerlink" title="Newton迭代法"></a>Newton迭代法</h1><p>先说说过程</p>
<ol>
<li>随便确定一个数$x_0$</li>
<li>求在$f(x_0)$处的切线$l:[y-f(x_0)]=f^\prime(x_0)(x-x_0)$</li>
<li>求切线$l$的零点$x_1$</li>
</ol>
<p>稍加计算便得到了</p>
<script type="math/tex; mode=display">x_1=x_0-\frac{f(x_0)}{f^\prime(x_0)}</script><p>既然是迭代, 那么自然就有</p>
<script type="math/tex; mode=display">x_{n+1}=x_n-\frac{f(x_n)}{f^\prime(x_n)}</script><p>其中$x_n$代表第$n$次迭代</p>
<p>附上<a href="https://en.wikipedia.org/wiki/Newton&#39;s_method" target="_blank" rel="noopener">Wikipedia</a>的动图</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e0/NewtonIteration_Ani.gif" alt=""></p>
<p>二次收敛证明: (Wikipedia上的, 笔者翻译QwQ)</p>
<blockquote>
<p>根据<a href="https://en.wikipedia.org/wiki/Taylor%27s_theorem" target="_blank" rel="noopener">Taylor’s theorem</a>, 任何二阶导数连续的函数$f(x)$ (设$\alpha$是根) 都可以写成</p>
<script type="math/tex; mode=display">f(\alpha)=f(x_n)+f^\prime(x_n)(\alpha-x_n)+R_1\tag{1}</script><p>由<a href="https://en.wikipedia.org/wiki/Lagrange_remainder" target="_blank" rel="noopener">Lagrange form of the Taylor series expansion remainder</a>得</p>
<script type="math/tex; mode=display">R_1=\frac{1}{2!}f^{\prime\prime}(\xi_n)(\alpha-x_n)^2</script><p>其中$\xi_n$在$x_n$和$\alpha$之间. </p>
<p>由于$\alpha$是根, 所以(1)式变为</p>
<script type="math/tex; mode=display">0=f(\alpha)=f(x_n)+f^\prime(x_n)(\alpha-x_n)+\frac{1}{2}f^{\prime\prime}(\xi_n)(\alpha-x_n)^2\tag{2}</script><p>(2)式两边同时除以$f^\prime(x_n)$, 整理得</p>
<script type="math/tex; mode=display">\frac{f(x_n)}{f^\prime(x_n)}+(\alpha-x_n)=\frac{-f^{\prime\prime}(\xi_n)}{2f^\prime(x_n)}(\alpha-x_n)^2\tag{3}</script><p>由于</p>
<script type="math/tex; mode=display">x_{n+1}=x_n-\frac{f(x_n)}{f^\prime(x_n)}\tag{4}</script><p>代入(3)式, 有</p>
<script type="math/tex; mode=display">\underbrace{\alpha-x_{n+1}}_{\epsilon_{n+1}}=\frac{-f^{\prime\prime}(\xi_n)}{2f^\prime(x_n)}(\underbrace{\alpha-x_n}_{\epsilon_n})^2</script><p>即</p>
<script type="math/tex; mode=display">\epsilon_{n+1}=\frac{-f^{\prime\prime}(\xi_n)}{2f^\prime(x_n)}\epsilon_n^2\tag{5}</script><p>两边取绝对值, 有</p>
<script type="math/tex; mode=display">|\epsilon_{n+1}|=\frac{|f^{\prime\prime}(\xi_n)|}{2|f^\prime(x_n)|}\epsilon_n^2\tag{6}</script><p>(6)式表明, 如果函数满足以下条件, 其为二次收敛</p>
<ol>
<li>对于所有的$x\in I$ ($I$为区间$[\alpha-r,\alpha+r]$,$r\geq |\alpha-x_0|$ (即$x_0\in I$) ) , 有$f^\prime(x)\neq 0$</li>
<li>对于所有的$x\in I$, $f^{\prime\prime}(x)$连续</li>
<li>$x_0$足够接近根</li>
</ol>
<p>“足够接近”意为</p>
<ol>
<li>Taylor近似足够准确 (可以忽略高阶项) </li>
<li>对于$C&lt;\infty$(原文如此), $\displaystyle\frac{1}{2}\Big|\frac{f^{\prime\prime}(x_n)}{f^\prime(x_n)}\Big|&lt;C\Big|\frac{f^{\prime\prime}(\alpha)}{f^\prime(\alpha)}\Big|$</li>
<li>对于$n\in\Bbb{N}$, $\displaystyle C\Big|\frac{f^{\prime\prime}(\alpha)}{f^\prime(\alpha)}\Big|\epsilon_n&lt;1$</li>
</ol>
<p>当满足上述条件时, (6)式可以写为: </p>
<script type="math/tex; mode=display">|\epsilon_{n+1}|\leq M\epsilon_n^2</script><p>其中</p>
<script type="math/tex; mode=display">M=\displaystyle\sup_{x\in I}{\frac{1}{2}\bigg|\frac{f^{\prime\prime}(x)}{f^\prime(x)}\bigg|}</script><p>由条件3得$M|\epsilon_0|&lt;1$</p>
</blockquote>
<p>程序: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">newton</span><span class="params">(<span class="keyword">double</span> x0;<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) x0 -= f(x0) / df(x0);</span><br><span class="line">    <span class="keyword">return</span> x0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>当然, 上述各方法的应用范围远不止于此, 有兴趣的读者可以自行查阅相关资料QwQ</p>
<h1 id="赠品"><a href="#赠品" class="headerlink" title="赠品"></a>赠品</h1><h2 id="cos-x-x-的解析解"><a href="#cos-x-x-的解析解" class="headerlink" title="$\cos x=x$的解析解"></a>$\cos x=x$的解析解</h2><p>对于PhOer来说, $\cos x=x$这个方程应该是相当熟悉了QwQ</p>
<p>笔者在这里放上解析解 (近似值$x=0.739$) , 详情见参考文献[2] (文献里讲的是$t\sin x=x-m$的解法, 不过笔者太弱了, 实在是看不懂QwQ) </p>
<script type="math/tex; mode=display">{\pi\over2}\exp\Bigg({1\over\pi}\int_0^1{\arctan\Big({(\pi x+2)\ln{({\sqrt{1-x^2}+1\over x})}x\over x^2\ln^2({\sqrt{1-x^2}+1\over x})-\pi x-1}\Big)\over x}\mathrm{d}x\Bigg)</script><h2 id="快速求-1-over-sqrt-x"><a href="#快速求-1-over-sqrt-x" class="headerlink" title="快速求${1\over\sqrt{x}}$"></a>快速求${1\over\sqrt{x}}$</h2><p>关于这个有一个相当有名的故事: <a href="https://diducoder.com/sotry-about-sqrt.html" target="_blank" rel="noopener">一个Sqrt函数引发的血案</a>(这是笔者能找到的最早一篇了QwQ) </p>
<p>测试程序:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">InvSqrt</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">int</span> it)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">float</span> xhalf = <span class="number">0.5f</span> * x;</span><br><span class="line">  <span class="keyword">int</span>   i     = *(<span class="keyword">int</span>*)&amp;x;</span><br><span class="line"></span><br><span class="line">  i = <span class="number">0x5f3759df</span> - (i &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  x = *(<span class="keyword">float</span>*)&amp;i;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= it; ++i)</span><br><span class="line">    x = x * (<span class="number">1.5f</span> - xhalf * x * x);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">GetRErr</span><span class="params">(<span class="keyword">float</span> test, <span class="keyword">float</span> real)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">fabs</span>((test - real) / real * <span class="number">100.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">float</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">if</span> (t &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> sys   = <span class="number">1.0</span> / <span class="built_in">sqrt</span>(t),</span><br><span class="line">          invs1 = InvSqrt(t, <span class="number">1</span>), invs2 = InvSqrt(t, <span class="number">2</span>),</span><br><span class="line">          invs3 = InvSqrt(t, <span class="number">3</span>), invs4 = InvSqrt(t, <span class="number">4</span>),</span><br><span class="line">          invs5 = InvSqrt(t, <span class="number">5</span>), invs6 = InvSqrt(t, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">      <span class="string">"Test#%d n=%f\n"</span></span><br><span class="line">      <span class="string">"System:\n%f\nTest:\n"</span></span><br><span class="line">      <span class="string">"it#1:%f RelativeErr:%.2f%%\n"</span></span><br><span class="line">      <span class="string">"it#2:%f RelativeErr:%.2f%%\n"</span></span><br><span class="line">      <span class="string">"it#3:%f RelativeErr:%.2f%%\n"</span></span><br><span class="line">      <span class="string">"it#4:%f RelativeErr:%.2f%%\n"</span></span><br><span class="line">      <span class="string">"it#5:%f RelativeErr:%.2f%%\n"</span></span><br><span class="line">      <span class="string">"it#6:%f RelativeErr:%.2f%%\n\n"</span>,</span><br><span class="line">      ++i,</span><br><span class="line">      t,</span><br><span class="line">      sys,</span><br><span class="line">      invs1,</span><br><span class="line">      GetRErr(invs1, sys),</span><br><span class="line">      invs2,</span><br><span class="line">      GetRErr(invs2, sys),</span><br><span class="line">      invs3,</span><br><span class="line">      GetRErr(invs3, sys),</span><br><span class="line">      invs4,</span><br><span class="line">      GetRErr(invs4, sys),</span><br><span class="line">      invs5,</span><br><span class="line">      GetRErr(invs5, sys),</span><br><span class="line">      invs6,</span><br><span class="line">      GetRErr(invs6, sys));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这篇文章偏数学一些, 如果不能理解的话请多读几遍QwQ</p>
<p>其实可写的还有很多, 限于篇幅就到此为止了 (现在在后台打个字都要卡两秒QwQ) </p>
<p>因为笔者是个蒟蒻, 所以如果有错误, 烦请各位dalao不吝赐教</p>
<h1 id="主要参考资料"><a href="#主要参考资料" class="headerlink" title="主要参考资料"></a>主要参考资料</h1><ul>
<li><p>[1] 人教版高中数学选修4-7 优选法与试验设计初步</p>
</li>
<li><p>[2] Siewert C E, Burniston E E. An exact analytical solution of Kepler’s equation[J]. Celestial Mechanics, 1972, 6(3):294-304.</p>
</li>
<li><p>[3] <a href="https://en.wikipedia.org/wiki/Newton&#39;s_method" target="_blank" rel="noopener">Newton’s method - Wikipedia</a></p>
</li>
<li><p>[4] <a href="https://en.wikipedia.org/wiki/Taylor%27s_theorem" target="_blank" rel="noopener">Taylor’s theorem - Wikipedia</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>数学</tag>
        <tag>程序设计</tag>
        <tag>算法</tag>
        <tag>洛谷日报</tag>
        <tag>二分</tag>
        <tag>0.618法</tag>
        <tag>Newton迭代法</tag>
        <tag>Taylor级数</tag>
      </tags>
  </entry>
  <entry>
    <title>“线段树的扩展之浅谈zkw线段树”一文的测试代码、数据、详细测试结果与生成器</title>
    <url>/article/zkw-segment-tree-test1/</url>
    <content><![CDATA[<h1 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h1><a id="more"></a>
<p><strong>因为笔者脑抽并没有调用fread注意</strong></p>
<h2 id="递归线段树："><a href="#递归线段树：" class="headerlink" title="递归线段树："></a>递归线段树：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fp(i,l,r) for(register unsigned long long i=(l);i&lt;=(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr(a) freopen((a),<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fw(a) freopen((a),<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fc fclose(stdin),fclose(stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mid unsigned long long m=((r-l)&gt;&gt;1)+l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tpn typename</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXBUF 140000000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> u64;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[MAXBUF],*p1=buf,*p2=buf;</span><br><span class="line">    <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,MAXBUF,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;tpn A&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(A &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span> (c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>);</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125; <span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;tpn A,tpn B&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(A &amp;a,B &amp;b)</span></span>&#123;</span><br><span class="line">read(a),read(b);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;tpn A,tpn B,tpn C&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(A &amp;a,B &amp;b,C &amp;c)</span></span>&#123;</span><br><span class="line">read(a),read(b),read(c);&#125;</span><br><span class="line"></span><br><span class="line">u64 sum[MAXN &lt;&lt; <span class="number">2</span>], add[MAXN &lt;&lt; <span class="number">2</span>], a[MAXN];</span><br><span class="line">const std::string str1("data"),str3(".in"),str4(".out");</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stringstream</span> tmp;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str2;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::ofstream <span class="title">fout</span><span class="params">(<span class="string">"test1.txt"</span>)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">start</span>,<span class="title">end</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">const</span> u64 &amp;rt)</span> </span>&#123;</span><br><span class="line">    sum[rt] = sum[ls] + sum[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">const</span> u64 &amp;rt, <span class="keyword">const</span> u64 &amp;ln, <span class="keyword">const</span> u64 &amp;rn)</span> </span>&#123;</span><br><span class="line">    add[ls] += add[rt];</span><br><span class="line">    sum[ls] += add[rt] * ln;</span><br><span class="line">    add[rs] += add[rt];</span><br><span class="line">    sum[rs] += add[rt] * rn;</span><br><span class="line">    add[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">const</span> u64 &amp;l, <span class="keyword">const</span> u64 &amp;r, <span class="keyword">const</span> u64 &amp;rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum[rt] = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mid;</span><br><span class="line">    Build(l, m, ls);</span><br><span class="line">    Build(m+<span class="number">1</span>, r, rs);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">const</span> u64 &amp;L, <span class="keyword">const</span> u64 &amp;R, <span class="keyword">const</span> u64 &amp;c, <span class="keyword">const</span> u64 &amp;l, <span class="keyword">const</span> u64 &amp;r, <span class="keyword">const</span> u64 &amp;rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        sum[rt] += c * (r - l + <span class="number">1</span>);</span><br><span class="line">        add[rt] += c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mid;</span><br><span class="line">    PushDown(rt, m-l+<span class="number">1</span>, r-m);</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m)</span><br><span class="line">        Update(L, R, c, l, m, ls);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; m)</span><br><span class="line">        Update(L, R, c, m+<span class="number">1</span>, r, rs);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">u64 <span class="title">Query</span><span class="params">(<span class="keyword">const</span> u64 &amp;L, <span class="keyword">const</span> u64 &amp;R, <span class="keyword">const</span> u64 &amp;l, <span class="keyword">const</span> u64 &amp;r, <span class="keyword">const</span> u64 &amp;rt)</span> </span>&#123;</span><br><span class="line">    u64 ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    Mid;</span><br><span class="line">    PushDown(rt, m-l+<span class="number">1</span>, r-m);</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m)</span><br><span class="line">        ans += Query(L, R, l, m, ls);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; m)</span><br><span class="line">        ans += Query(L, R, m+<span class="number">1</span>, r, rs);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fp(j,<span class="number">1</span>,<span class="number">16</span>) &#123;</span><br><span class="line">        tmp.clear();</span><br><span class="line">        tmp &lt;&lt; j;</span><br><span class="line">        tmp &gt;&gt; str2;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">file</span><span class="params">(str1+str2+str3)</span></span>;</span><br><span class="line">        fr(file.c_str());</span><br><span class="line">        file=str1+str2+str4;</span><br><span class="line">        fw(file.c_str());</span><br><span class="line">        gettimeofday(&amp;start, <span class="literal">NULL</span>);</span><br><span class="line">        u64 n=<span class="number">0</span>, m=<span class="number">0</span>;</span><br><span class="line">        read(n, m);</span><br><span class="line">        fp(i, <span class="number">1</span>, n) read(a[i]);</span><br><span class="line">        Build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        u64 o=<span class="number">0</span>, x=<span class="number">0</span>, y=<span class="number">0</span>, k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            read(o,x,y);</span><br><span class="line">            <span class="keyword">if</span> (o&amp;<span class="number">1</span>) &#123;</span><br><span class="line">                read(k);</span><br><span class="line">                Update(x, y, k, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%llu\n"</span>, Query(x, y, <span class="number">1</span>, n, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        gettimeofday(&amp;end, <span class="literal">NULL</span>);</span><br><span class="line">        fout &lt;&lt; <span class="string">"data#"</span> &lt;&lt; j &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        fout &lt;&lt; <span class="string">"\tstart:"</span> &lt;&lt;  start.tv_sec &lt;&lt; <span class="string">"."</span> &lt;&lt; start.tv_usec &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        fout &lt;&lt; <span class="string">"\tend:"</span> &lt;&lt; end.tv_sec &lt;&lt; <span class="string">"."</span> &lt;&lt; end.tv_usec &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        fc;</span><br><span class="line">    &#125;</span><br><span class="line">    fout.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="zkw线段树："><a href="#zkw线段树：" class="headerlink" title="zkw线段树："></a>zkw线段树：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fp(i,l,r) for(register unsigned long long (i)=(l);(i)&lt;=(r);(i)++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fd(i,l,r) for(register unsigned long long i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr(a) freopen((a),<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fw(a) freopen((a),<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fc fclose(stdin),fclose(stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tpn typename</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXBUF 140000000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> u64;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[MAXBUF],*p1=buf,*p2=buf;</span><br><span class="line">    <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,MAXBUF,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;tpn A&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(A &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span> (c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>);</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125; <span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;tpn A,tpn B&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(A &amp;a,B &amp;b)</span></span>&#123;</span><br><span class="line">read(a),read(b);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;tpn A,tpn B,tpn C&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(A &amp;a,B &amp;b,C &amp;c)</span></span>&#123;</span><br><span class="line">read(a),read(b),read(c);&#125;</span><br><span class="line"></span><br><span class="line">u64 tree[MAXN&lt;&lt;<span class="number">2</span>],add[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">u64 n,N=<span class="number">1</span>,m;</span><br><span class="line">const std::string str1("data"),str3(".in"),str4(".out");</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stringstream</span> tmp;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str2;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::ofstream <span class="title">fout</span><span class="params">(<span class="string">"test2.txt"</span>)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">start</span>,<span class="title">end</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  read(n, m);</span><br><span class="line">  <span class="keyword">for</span>(; N &lt;= n+<span class="number">1</span>; N &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">  fp(i, N+<span class="number">1</span>, N+n) read(tree[i]);</span><br><span class="line">  fd(i, N<span class="number">-1</span>, <span class="number">1</span>) tree[i] = tree[i &lt;&lt; <span class="number">1</span>] + tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(u64 &amp;s,u64 &amp;t,u64 &amp;k)</span> </span>&#123;</span><br><span class="line">    u64 lNum=<span class="number">0</span>,rNum=<span class="number">0</span>,nNum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(s=N+s<span class="number">-1</span>,t=N+t+<span class="number">1</span>;s^t^<span class="number">1</span>;s&gt;&gt;=<span class="number">1</span>,t&gt;&gt;=<span class="number">1</span>,nNum&lt;&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">        tree[s]+=k*lNum;</span><br><span class="line">        tree[t]+=k*rNum;</span><br><span class="line">        <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) &#123;add[s^<span class="number">1</span>]+=k; tree[s^<span class="number">1</span>]+=k*nNum; lNum+=nNum;&#125;</span><br><span class="line">        <span class="keyword">if</span>( t&amp;<span class="number">1</span>) &#123;add[t^<span class="number">1</span>]+=k; tree[t^<span class="number">1</span>]+=k*nNum; rNum+=nNum;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(;s;s&gt;&gt;=<span class="number">1</span>,t&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        tree[s]+=k*lNum;</span><br><span class="line">        tree[t]+=k*rNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il u64 <span class="title">query</span><span class="params">(u64 &amp;s,u64 &amp;t)</span></span>&#123;</span><br><span class="line">    u64 lNum=<span class="number">0</span>,rNum=<span class="number">0</span>,nNum=<span class="number">1</span>;</span><br><span class="line">    u64 ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(s=N+s<span class="number">-1</span>,t=N+t+<span class="number">1</span>;s^t^<span class="number">1</span>;s&gt;&gt;=<span class="number">1</span>,t&gt;&gt;=<span class="number">1</span>,nNum&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(add[s]) ans+=add[s]*lNum;</span><br><span class="line">        <span class="keyword">if</span>(add[t]) ans+=add[t]*rNum;</span><br><span class="line">        <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) &#123;ans+=tree[s^<span class="number">1</span>]; lNum+=nNum;&#125;</span><br><span class="line">        <span class="keyword">if</span>( t&amp;<span class="number">1</span>) &#123;ans+=tree[t^<span class="number">1</span>]; rNum+=nNum;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(;s;s&gt;&gt;=<span class="number">1</span>,t&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        ans+=add[s]*lNum;</span><br><span class="line">        ans+=add[t]*rNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fp(j,<span class="number">1</span>,<span class="number">16</span>) &#123;</span><br><span class="line">        tmp.clear();</span><br><span class="line">        tmp &lt;&lt; j;</span><br><span class="line">        tmp &gt;&gt; str2;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">file</span><span class="params">(str1+str2+str3)</span></span>;</span><br><span class="line">        fr(file.c_str());</span><br><span class="line">        file=str1+str2+str4;</span><br><span class="line">        fw(file.c_str());</span><br><span class="line">        gettimeofday(&amp;start, <span class="literal">NULL</span>);</span><br><span class="line">        build();</span><br><span class="line">        <span class="keyword">char</span> c=<span class="number">0</span>;</span><br><span class="line">        u64 x=<span class="number">0</span>,y=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">            read(c, x, y);</span><br><span class="line">            <span class="keyword">if</span>(c&amp;<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"%llu\n"</span>,query(x,y));</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                u64 k;</span><br><span class="line">                read(k);</span><br><span class="line">                update(x,y,k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        gettimeofday(&amp;end, <span class="literal">NULL</span>);</span><br><span class="line">        fout &lt;&lt; <span class="string">"data#"</span> &lt;&lt; j &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        fout &lt;&lt; <span class="string">"\tstart:"</span> &lt;&lt;  start.tv_sec &lt;&lt; <span class="string">"."</span> &lt;&lt; start.tv_usec &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        fout &lt;&lt; <span class="string">"\tend:"</span> &lt;&lt; end.tv_sec &lt;&lt; <span class="string">"."</span> &lt;&lt; end.tv_usec &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        fc;</span><br><span class="line">    &#125;</span><br><span class="line">    fout.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="树状数组："><a href="#树状数组：" class="headerlink" title="树状数组："></a>树状数组：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fp(i,l,r) for(register unsigned long long i=(l);i&lt;=(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr(a) freopen((a),<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fw(a) freopen((a),<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fc fclose(stdin),fclose(stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tpn typename</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXBUF 140000000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> u64;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[MAXBUF],*p1=buf,*p2=buf;</span><br><span class="line">    <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,MAXBUF,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;tpn A&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(A &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span> (c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>);</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125; <span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;tpn A,tpn B&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(A &amp;a,B &amp;b)</span></span>&#123;read(a);read(b);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;tpn A,tpn B,tpn C&gt; <span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(A &amp;a,B &amp;b,C &amp;c)</span></span>&#123;read(a);read(b);read(c);&#125;</span><br><span class="line"></span><br><span class="line">u64 n, m, c1[MAXN], c2[MAXN], num[MAXN];</span><br><span class="line">const std::string str1("data"),str3(".in"),str4(".out");</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stringstream</span> tmp;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str2;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::ofstream <span class="title">fout</span><span class="params">(<span class="string">"test3.txt"</span>)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">start</span>,<span class="title">end</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> il <span class="title">add</span><span class="params">(u64 *r, u64 pos, <span class="keyword">const</span> u64 &amp;v)</span> </span>&#123;<span class="keyword">for</span>(; pos &lt;= n; pos += lowbit(pos)) r[pos] += v;&#125;</span><br><span class="line"><span class="function">u64 il <span class="title">query</span><span class="params">(u64 *r, u64 pos)</span> </span>&#123;</span><br><span class="line">	<span class="function">u64 <span class="title">ans</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(; pos; pos -= lowbit(pos)) ans += r[pos];</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	fp(j,<span class="number">1</span>,<span class="number">16</span>) &#123;</span><br><span class="line">        tmp.clear();</span><br><span class="line">        tmp &lt;&lt; j;</span><br><span class="line">        tmp &gt;&gt; str2;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">file</span><span class="params">(str1+str2+str3)</span></span>;</span><br><span class="line">        fr(file.c_str());</span><br><span class="line">        file=str1+str2+str4;</span><br><span class="line">        fw(file.c_str());</span><br><span class="line">        gettimeofday(&amp;start, <span class="literal">NULL</span>);</span><br><span class="line">		u64 op, x, y, k, sum1, sum2;</span><br><span class="line">		read(n, m);</span><br><span class="line">		fp(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">			read(num[i]);</span><br><span class="line">			add(c1, i, num[i]-num[i<span class="number">-1</span>]);</span><br><span class="line">			add(c2, i, (i<span class="number">-1</span>)*(num[i]-num[i<span class="number">-1</span>]));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(m--) &#123;</span><br><span class="line">			read(op,x,y);</span><br><span class="line">			<span class="keyword">if</span>(op&amp;<span class="number">1</span>) &#123;</span><br><span class="line">				read(k);</span><br><span class="line">				add(c1,x,k);add(c1,y+<span class="number">1</span>,-k);</span><br><span class="line">				add(c2,x,k*(x<span class="number">-1</span>));add(c2,y+<span class="number">1</span>,-k*y);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				sum1=(x<span class="number">-1</span>)*query(c1,x<span class="number">-1</span>)-query(c2,x<span class="number">-1</span>);</span><br><span class="line">				sum2=y*query(c1,y)-query(c2,y);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%llu\n"</span>,sum2-sum1);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		gettimeofday(&amp;end, <span class="literal">NULL</span>);</span><br><span class="line">        fout &lt;&lt; <span class="string">"data#"</span> &lt;&lt; j &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        fout &lt;&lt; <span class="string">"\tstart:"</span> &lt;&lt;  start.tv_sec &lt;&lt; <span class="string">"."</span> &lt;&lt; start.tv_usec &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        fout &lt;&lt; <span class="string">"\tend:"</span> &lt;&lt; end.tv_sec &lt;&lt; <span class="string">"."</span> &lt;&lt; end.tv_usec &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        fc;</span><br><span class="line">    &#125;</span><br><span class="line">    fout.close();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="详细评测结果-1（以秒为单位）"><a href="#详细评测结果-1（以秒为单位）" class="headerlink" title="详细评测结果#1（以秒为单位）"></a>详细评测结果#1（以秒为单位）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test#1:</span><br><span class="line">time#1 &#x3D; 3.447280</span><br><span class="line">time#2 &#x3D; 3.696011</span><br><span class="line">time#3 &#x3D; 3.683904</span><br><span class="line">time#4 &#x3D; 3.648302</span><br><span class="line">time#5 &#x3D; 3.296298</span><br><span class="line">time#6 &#x3D; 7.708645</span><br><span class="line">time#7 &#x3D; 7.082259</span><br><span class="line">time#8 &#x3D; 7.126166</span><br><span class="line">time#9 &#x3D; 6.963065</span><br><span class="line">time#10 &#x3D; 7.756587</span><br><span class="line">time#11 &#x3D; 51.682691</span><br><span class="line">time#12 &#x3D; 48.633226</span><br><span class="line">time#13 &#x3D; 47.932671</span><br><span class="line">time#14 &#x3D; 105.835116</span><br><span class="line">time#15 &#x3D; 113.755264</span><br><span class="line">time#16 &#x3D; 158.988079</span><br><span class="line">Ave:</span><br><span class="line">3.554359</span><br><span class="line">7.327344</span><br><span class="line">49.416196</span><br><span class="line">126.192820</span><br><span class="line"></span><br><span class="line">test#2:</span><br><span class="line">time#1 &#x3D; 2.511897</span><br><span class="line">time#2 &#x3D; 1.695306</span><br><span class="line">time#3 &#x3D; 2.118245</span><br><span class="line">time#4 &#x3D; 2.079538</span><br><span class="line">time#5 &#x3D; 1.934902</span><br><span class="line">time#6 &#x3D; 4.719447</span><br><span class="line">time#7 &#x3D; 4.817881</span><br><span class="line">time#8 &#x3D; 4.623501</span><br><span class="line">time#9 &#x3D; 5.097146</span><br><span class="line">time#10 &#x3D; 5.355650</span><br><span class="line">time#11 &#x3D; 34.865590</span><br><span class="line">time#12 &#x3D; 34.907769</span><br><span class="line">time#13 &#x3D; 32.463151</span><br><span class="line">time#14 &#x3D; 74.738552</span><br><span class="line">time#15 &#x3D; 73.855234</span><br><span class="line">time#16 &#x3D; 74.000259</span><br><span class="line">Ave:</span><br><span class="line">2.067978</span><br><span class="line">4.922725</span><br><span class="line">34.078837</span><br><span class="line">74.198015</span><br><span class="line"></span><br><span class="line">test#3:</span><br><span class="line">time#1 &#x3D; 2.060278</span><br><span class="line">time#2 &#x3D; 1.992258</span><br><span class="line">time#3 &#x3D; 2.002796</span><br><span class="line">time#4 &#x3D; 1.820297</span><br><span class="line">time#5 &#x3D; 1.964742</span><br><span class="line">time#6 &#x3D; 4.490217</span><br><span class="line">time#7 &#x3D; 4.383801</span><br><span class="line">time#8 &#x3D; 4.159582</span><br><span class="line">time#9 &#x3D; 4.358566</span><br><span class="line">time#10 &#x3D; 4.404194</span><br><span class="line">time#11 &#x3D; 26.816804</span><br><span class="line">time#12 &#x3D; 26.666548</span><br><span class="line">time#13 &#x3D; 26.862968</span><br><span class="line">time#14 &#x3D; 57.438784</span><br><span class="line">time#15 &#x3D; 57.584326</span><br><span class="line">time#16 &#x3D; 57.433181</span><br><span class="line">Ave:</span><br><span class="line">1.968074</span><br><span class="line">4.359272</span><br><span class="line">26.782107</span><br><span class="line">57.485430</span><br></pre></td></tr></table></figure>
<h1 id="详细评测结果-2（以秒为单位）"><a href="#详细评测结果-2（以秒为单位）" class="headerlink" title="详细评测结果#2（以秒为单位）"></a>详细评测结果#2（以秒为单位）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test#1:</span><br><span class="line">time#1 &#x3D; 3.723513</span><br><span class="line">time#2 &#x3D; 4.895209</span><br><span class="line">time#3 &#x3D; 4.096053</span><br><span class="line">time#4 &#x3D; 3.921210</span><br><span class="line">time#5 &#x3D; 3.291190</span><br><span class="line">time#6 &#x3D; 6.779961</span><br><span class="line">time#7 &#x3D; 7.278650</span><br><span class="line">time#8 &#x3D; 7.048792</span><br><span class="line">time#9 &#x3D; 6.539919</span><br><span class="line">time#10 &#x3D; 7.330734</span><br><span class="line">time#11 &#x3D; 45.730535</span><br><span class="line">time#12 &#x3D; 45.291213</span><br><span class="line">time#13 &#x3D; 45.184196</span><br><span class="line">time#14 &#x3D; 99.981685</span><br><span class="line">time#15 &#x3D; 99.947381</span><br><span class="line">time#16 &#x3D; 99.487397</span><br><span class="line">Ave:</span><br><span class="line">3.985435</span><br><span class="line">6.995611</span><br><span class="line">45.401981</span><br><span class="line">99.805488</span><br><span class="line"></span><br><span class="line">test#2:</span><br><span class="line">time#1 &#x3D; 1.830346</span><br><span class="line">time#2 &#x3D; 2.099576</span><br><span class="line">time#3 &#x3D; 2.085104</span><br><span class="line">time#4 &#x3D; 2.171504</span><br><span class="line">time#5 &#x3D; 2.239576</span><br><span class="line">time#6 &#x3D; 4.618806</span><br><span class="line">time#7 &#x3D; 3.836848</span><br><span class="line">time#8 &#x3D; 4.119962</span><br><span class="line">time#9 &#x3D; 4.149363</span><br><span class="line">time#10 &#x3D; 4.619962</span><br><span class="line">time#11 &#x3D; 29.606656</span><br><span class="line">time#12 &#x3D; 29.431768</span><br><span class="line">time#13 &#x3D; 29.710447</span><br><span class="line">time#14 &#x3D; 67.893993</span><br><span class="line">time#15 &#x3D; 66.520776</span><br><span class="line">time#16 &#x3D; 68.217186</span><br><span class="line">Ave:</span><br><span class="line">2.085221</span><br><span class="line">4.268988</span><br><span class="line">29.582957</span><br><span class="line">67.543985</span><br><span class="line"></span><br><span class="line">test#3:</span><br><span class="line">time#1 &#x3D; 1.943302</span><br><span class="line">time#2 &#x3D; 2.128660</span><br><span class="line">time#3 &#x3D; 2.122796</span><br><span class="line">time#4 &#x3D; 1.828443</span><br><span class="line">time#5 &#x3D; 1.882570</span><br><span class="line">time#6 &#x3D; 3.893438</span><br><span class="line">time#7 &#x3D; 4.130842</span><br><span class="line">time#8 &#x3D; 3.821628</span><br><span class="line">time#9 &#x3D; 3.872965</span><br><span class="line">time#10 &#x3D; 4.239745</span><br><span class="line">time#11 &#x3D; 25.007103</span><br><span class="line">time#12 &#x3D; 25.088401</span><br><span class="line">time#13 &#x3D; 25.442503</span><br><span class="line">time#14 &#x3D; 54.489850</span><br><span class="line">time#15 &#x3D; 54.187768</span><br><span class="line">time#16 &#x3D; 54.235232</span><br><span class="line">Ave:</span><br><span class="line">1.981154</span><br><span class="line">3.991724</span><br><span class="line">25.179336</span><br><span class="line">54.304283</span><br></pre></td></tr></table></figure>
<p><a href="../zkw-segment-tree">回到原文</a></p>
]]></content>
      <tags>
        <tag>程序设计</tag>
        <tag>洛谷日报</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>【洛谷日报#35】线段树的扩展之浅谈zkw线段树</title>
    <url>/article/zkw-segment-tree/</url>
    <content><![CDATA[<p>又叫堆式线段树, 是一种简单的常数优化</p>
<p>老文章, 可能有很多错误, 懒得修了</p>
<a id="more"></a>
<h1 id="阅读本文前请先阅读"><a href="#阅读本文前请先阅读" class="headerlink" title="阅读本文前请先阅读:"></a>阅读本文前请先阅读:</h1><ul>
<li><a href="https://www.luogu.com.cn/blog/pks-LOVING/senior-data-structure-qian-tan-xian-duan-shu-segment-tree" target="_blank" rel="noopener">【洛谷日报#4】浅谈线段树(Segment Tree)</a></li>
</ul>
<p>本文主要是上面文章的延伸, 所以上文有讲的东西本文就不详细讲了QwQ</p>
<p>笔者的测试代码可能写丑了, 所以如果慢请自行卡常QwQ</p>
<p>这里还是以RSQ为例</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>简单来说, zkw线段树就是<strong>非递归式</strong>线段树</p>
<p>众所周知, 普通线段树的常数很大, 经常被卡, 而zkw线段树的常数很小</p>
<p>这里用<a href="https://www.luogu.com.cn/problem/P3372" target="_blank" rel="noopener">洛谷P3372</a>做一个演示(更详细的补充见文末)</p>
<p><strong>普通线段树</strong><a href="https://www.luogu.com.cn/record/9389075" target="_blank" rel="noopener">R9389075</a></p>
<p><img src="seg0_4.png" alt=""></p>
<p><strong>zkw线段树</strong><a href="https://www.luogu.com.cn/record/9388963" target="_blank" rel="noopener">R9388963</a></p>
<p><img src="seg0_5.png" alt=""></p>
<p>前者运行时间是后者运行时间的<strong>2.05</strong>倍！Σ(°Д°;</p>
<p><strong>详细测试见后文</strong></p>
<p>其实zkw线段树不仅快, 而且码量小, 空间小, 好调试<del>吊打普通线段树</del>orz</p>
<p>而普通线段树的优点则是方便理解与学习, 并且适用范围更广(zkw线段树<strong>不能处理有运算优先级的问题</strong>, 如<a href="https://www.luogu.com.cn/problem/P3373" target="_blank" rel="noopener">洛谷P3373</a>)</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>我们观察一下普通线段树的代码, 很容易就会发现:无论是建树、修改还是查询, 都是<strong>自顶向下</strong>的.</p>
<p>zkw线段树则正好反过来, 即<strong>自底向上</strong></p>
<p>具体来说, 就是先把线段树填充成满二叉树(堆式存储), 之后就可以直接找到叶节点, 然后回溯上去了</p>
<p>听起来好像很简单QwQ</p>
<p>其实真的很简单QwQ</p>
<h2 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h2><p>首先是定义变量:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> tree[MAXN&lt;&lt;<span class="number">2</span>]; <span class="comment">//tree是线段树数组</span></span><br><span class="line"><span class="keyword">int</span> n, N=<span class="number">1</span>;        <span class="comment">//n是原数组实际长度, N下面会解释</span></span><br></pre></td></tr></table></figure></p>
<p>我们以下图为例</p>
<p><img src="seg1_6.png" alt=""></p>
<p>(由<a href="https://visualgo.net/zh/segmenttree" target="_blank" rel="noopener">visualgo</a>生成. 为便于讲解, 笔者做了一些改动)</p>
<p>下面的黄圈是原数据, 黄圈下面的红色数字是原数组的下标</p>
<p>上面的树就是线段树了, 每一个节点内部都是节点下方标明的区间中所有元素的总和, 上边的黑色数字就是线段树的下标</p>
<p><strong>visualgo生成的数组下标默认是从0开始的, 所以线段树下的区间和原数组有错位, 请注意区分<del>(笔者懒得改了</del></strong></p>
<p>通过观察, 我们发现一个规律:线段树对应叶子节点的下标和原数组的下标的差值是恒定的($8-1=9-2=…=15-8=7$)</p>
<p>这个差值就是一个和<code>N</code>很接近的数了(<code>N</code>是叶子节点数)</p>
<blockquote>
<p>实际上, $N=2^{\lceil\log_2{(n+1)}\rceil}$</p>
</blockquote>
<p>根据这一点, 我们可以这样建树:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fp(i,l,r) for(register int i=(l);i&lt;=(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fd(i,r,l) for(register int i=(r);i&gt;=(l);--i)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span>(; N &lt;= n+<span class="number">1</span>; N &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">  fp(i, N+<span class="number">1</span>, N+n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, tree+i); <span class="comment">// 等价于scanf("%d", &amp;tree[i])</span></span><br><span class="line">  fd(i, N<span class="number">-1</span>, <span class="number">1</span>) tree[i] = tree[i &lt;&lt; <span class="number">1</span>] + tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]; <span class="comment">// 等价于tree[i] = tree[i*2] + tree[i*2 + 1]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大家可以和递归版线段树做一下对比</p>
<p>有细心的读者可能发现了:上例计算出的<code>N</code>是<code>16</code>而不是<code>8</code>!</p>
<p>还有, 原数组在线段树对应的为止整体向后平移了1位！</p>
<p>其实这都是为了方便查找</p>
<p>后面再详细解释</p>
<h2 id="单点修改-区间查询-amp-区间修改-区间查询"><a href="#单点修改-区间查询-amp-区间修改-区间查询" class="headerlink" title="单点修改+区间查询&amp;区间修改+区间查询"></a>单点修改+区间查询&amp;区间修改+区间查询</h2><h3 id="单点修改-区间查询"><a href="#单点修改-区间查询" class="headerlink" title="单点修改+区间查询"></a>单点修改+区间查询</h3><h4 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h4><p>实现很简单, 所以直接放代码<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(x += N; x; x &gt;&gt;= <span class="number">1</span>) tree[x] += k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>完了?Σ(°Д°;</p>
<p>完了！</p>
<p>单点查询更简单, 相信各位读者都能想到QwQ</p>
<h4 id="单点修改下的区间查询"><a href="#单点修改下的区间查询" class="headerlink" title="单点修改下的区间查询"></a>单点修改下的区间查询</h4><p>我们以查询<code>[2,6]</code>为例(线段树上的, 下同)</p>
<p><img src="seg1_7.png" alt=""></p>
<p>ans=<font color=#b5e61d>[2,2]+[3,3]+[4,4]+[5,5]+[6,6]</font></p>
<p>观察上图可以发现, 因为在线段树上我们可以直接找到<font color=#00a2e8>[2,3]</font>和<font color=#00a2e8>[4,5]</font>, 所以我们只需要用<font color=#00a2e8>[2,3]</font>代替<font color=#b5e61d>[2,2]</font>和<font color=#b5e61d>[3,3]</font>; 用<font color=#00a2e8>[4,5]</font>代替<font color=#b5e61d>[4,4]</font>和<font color=#b5e61d>[5,5]</font></p>
<p>于是 ans=<font color=#00a2e8>[2,3]</font>+<font color=#00a2e8>[4,5]</font>+<font color=#b5e61d>[6,6]</font></p>
<p>自顶向下求和很简单, 怎么实现自底向上的求和呢?</p>
<p>我们分别在区间左端点-1和右端点+1的位置放两个指针(令其为<code>s,t</code>), 就像这样:</p>
<p><img src="seg1_8.png" alt=""></p>
<p>接着不断将<code>s,t</code>移动到对应节点的父节点处, 直到<code>s,t</code>指向的节点的父节点相同时停止</p>
<p><img src="seg1_9.png" alt=""></p>
<p>在这期间, 如果:</p>
<ol>
<li><p><code>s</code>指向的节点是左儿子, 那么<code>ans += 右儿子的值</code></p>
</li>
<li><p><code>t</code>指向的节点是右儿子, 那么<code>ans += 左儿子的值</code></p>
</li>
</ol>
<p>如果不能理解就看看上图, 多看几遍就懂了QwQ</p>
<p>下面是代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个for的信息量有点大</span></span><br><span class="line">  <span class="comment">// 第一个分号前面就是将s和t初始化</span></span><br><span class="line">  <span class="comment">// s ^ r ^ 1就是判断对应节点的父节点是否相同</span></span><br><span class="line">  <span class="comment">// 很容易看出来当对应节点互为左右儿子时, s^t = 1, 再^1之后就是0</span></span><br><span class="line">  <span class="comment">// 而其他情况时, s^t大于1, ^1后当然不是0</span></span><br><span class="line">  <span class="comment">// 第二个分号后面就是s,t上移</span></span><br><span class="line">  <span class="keyword">for</span>(s = N + s - <span class="number">1</span>, r = N + r + <span class="number">1</span>; s ^ r ^ <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, r &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) ans += tree[s^<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(r&amp;<span class="number">1</span>) ans += tree[r^<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 这两句的含义对照上面的实现过程看就能明白</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的那两个疑问现在可以解释了</p>
<p>仔细观察上述流程可以发现:我们只能查询<code>[1,n-1]</code>范围(这里还是线段树上标的)内的数据</p>
<p>如果我们想要查询<code>[0,m]</code>范围内($0\leq m\leq n$)的呢?</p>
<p><strong>将数组整体平移！</strong></p>
<p>如果我们想要查询<code>[m,n]</code>范围内($0\leq m\leq n$)的呢?</p>
<p><strong>把<code>N</code>直接扩大2倍!</strong></p>
<p><del>_zkw:就是这么狠_</del></p>
<hr>
<p>到目前为止zkw线段树还是比较简短的</p>
<p>可能有人觉得这个和树状数组有点像, 这就对了</p>
<p>_zkw:树状数组究竟是什么?就是省掉一半空间后的线段树加上中序遍历_ </p>
<p>orz</p>
<p><strong>单点修改+区间查询</strong>完结, 整理一下代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单点修改+区间查询</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fp(i,l,r) for(register int i=(l);i&lt;=(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fd(i,r,l) for(register int i=(r);i&gt;=(l);--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n, N=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span>(; N &lt;= n+<span class="number">1</span>; N &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">  fp(i, N+<span class="number">1</span>, N+n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, tree+i);</span><br><span class="line">  fd(i, N<span class="number">-1</span>, <span class="number">1</span>) tree[i] = tree[i &lt;&lt; <span class="number">1</span>] + tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(x += N; x; x &gt;&gt;= <span class="number">1</span>) tree[x] += k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(s = N + s - <span class="number">1</span>, r = N + r + <span class="number">1</span>; s ^ r ^ <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, r &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) ans += tree[s^<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(r&amp;<span class="number">1</span>) ans += tree[r^<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 按需补充吧</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="区间修改-区间查询"><a href="#区间修改-区间查询" class="headerlink" title="区间修改+区间查询"></a>区间修改+区间查询</h3><h4 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h4><p>很显然, 我们不能用上面的方法暴力修改(还不如普通线段树)</p>
<p>其实堆式存储也可以自顶向下访问</p>
<p>就是上下各走一次而已</p>
<p>但是我们有更好的办法 <del>_zkw:使劲想想就知道了_</del></p>
<p>这里我们采用<strong>标记永久化</strong>的思想(就是<strong>不下推lazy tag</strong><del>让他彻底lazy下去</del>)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> add[MAXN&lt;&lt;<span class="number">2</span>]; <span class="comment">//这个lazy tag表示当前节点已经更新完, 需要更新子节点</span></span><br></pre></td></tr></table></figure>
<p>我们需要在自底向上时更新节点的值, 所以我们还需要一个变量记录该节点<strong>包含元素的个数</strong></p>
<p>另外要注意<strong>修改某个节点的标记时要更新上面的值</strong></p>
<p>举个例子；我们换一棵树</p>
<p><img src="seg2_2.png" alt=""></p>
<p>以修改<code>[2,10]</code>为例</p>
<p><img src="seg2_3.png" alt=""></p>
<p>当<code>s</code>到了<code>[2,2]</code>节点时, <code>[3,3]</code>节点的add加<code>k</code>, 那么接下来<code>[2,3]</code>、<code>[0,3]</code>节点的值都要加上<code>k*1</code>, 而到了<code>[0,7]</code>节点时, 因为<code>[4,7]</code>节点的add加了<code>k</code>, 所以<code>[0,7]</code>节点的值要加上<code>k*(1+4)=k*5</code>, 自然<code>k</code>要乘的系数又需要一个变量来记录</p>
<p>需要注意的是, 这次的<strong>修改要上推到根节点</strong></p>
<p>下面是代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> lNum=<span class="number">0</span>, rNum=<span class="number">0</span>, nNum=<span class="number">1</span>;</span><br><span class="line">  <span class="comment">//lNum:  s一路走来已经包含了几个数</span></span><br><span class="line">  <span class="comment">//rNum:  t一路走来已经包含了几个数</span></span><br><span class="line">  <span class="comment">//nNum:  本层每个节点包含几个数</span></span><br><span class="line">  <span class="keyword">for</span>(s = N+s<span class="number">-1</span>, t = N+t+<span class="number">1</span>; s^t^<span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>, nNum &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//更新tree</span></span><br><span class="line">    tree[s] += k*lNum;</span><br><span class="line">    tree[t] += k*rNum;</span><br><span class="line">    <span class="comment">//处理add</span></span><br><span class="line">    <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) &#123;add[s^<span class="number">1</span>] += k; tree[s^<span class="number">1</span>] += k*nNum; lNum += nNum;&#125;</span><br><span class="line">    <span class="keyword">if</span>(t&amp;<span class="number">1</span>) &#123;add[t^<span class="number">1</span>] += k; tree[t^<span class="number">1</span>] += k*nNum; rNum += nNum;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//更新上层tree</span></span><br><span class="line">  <span class="keyword">for</span>(; s; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    tree[s] += k*lNum;</span><br><span class="line">    tree[t] += k*rNum;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h4><p>我们以查询<code>[2,10]</code>为例<del>没错笔者我就是要用一张图</del></p>
<p><img src="seg2_3.png" alt=""></p>
<p>过程类似, 要注意<code>s,t</code>每次上推时都要根据当前所在节点的标记和<code>lNum / rNum</code>更新<code>ans</code> (<code>ans += add[s]*lNum</code>)</p>
<p>可能有些难懂, 多读两遍或者看看代码或者自己手推一下就好了QwQ</p>
<p>同样, 这个也需要上推到根节点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> lNum=<span class="number">0</span>, rNum=<span class="number">0</span>, nNum=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(s = N+s<span class="number">-1</span>, t = N+t+<span class="number">1</span>; s^t^<span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>, nNum &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//根据标记更新</span></span><br><span class="line">    <span class="keyword">if</span>(add[s]) ans += add[s]*lNum;</span><br><span class="line">    <span class="keyword">if</span>(add[t]) ans += add[t]*rNum;</span><br><span class="line">    <span class="comment">//常规求和</span></span><br><span class="line">    <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) &#123;ans += tree[s^<span class="number">1</span>]; lNum += nNum;&#125;</span><br><span class="line">    <span class="keyword">if</span>(t&amp;<span class="number">1</span>) &#123;ans += tree[t^<span class="number">1</span>]; rNum += nNum;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//处理上层标记</span></span><br><span class="line">  <span class="keyword">for</span>(; s; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    ans += add[s]*lNum;</span><br><span class="line">    ans += add[t]*rNum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>区间修改+区间查询告一段落, 整理一下代码:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//区间修改+区间查询1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fp(i,l,r) for(register int i=(l);i&lt;=(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fd(i,r,l) for(register int i=(r);i&gt;=(l);--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tree[MAXN&lt;&lt;<span class="number">2</span>], add[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n, N=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span>(; N &lt;= n+<span class="number">1</span>; N &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">  fp(i, N+<span class="number">1</span>, N+n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, tree+i);</span><br><span class="line">  fd(i, N<span class="number">-1</span>, <span class="number">1</span>) tree[i] = tree[i &lt;&lt; <span class="number">1</span>] + tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> lNum=<span class="number">0</span>, rNum=<span class="number">0</span>, nNum=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(s = N+s<span class="number">-1</span>, t = N+t+<span class="number">1</span>; s^t^<span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>, nNum &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    tree[s] += k*lNum;</span><br><span class="line">    tree[t] += k*rNum;</span><br><span class="line">    <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) &#123;add[s^<span class="number">1</span>] += k; tree[s^<span class="number">1</span>] += k*nNum; lNum += nNum;&#125;</span><br><span class="line">    <span class="keyword">if</span>(t&amp;<span class="number">1</span>) &#123;add[t^<span class="number">1</span>] += k; tree[t^<span class="number">1</span>] += k*nNum; rNum += nNum;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(; s; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    tree[s] += k*lNum;</span><br><span class="line">    tree[t] += k*rNum;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> lNum=<span class="number">0</span>, rNum=<span class="number">0</span>, nNum=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(s = N+s<span class="number">-1</span>, t = N+t+<span class="number">1</span>; s^t^<span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>, nNum &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(add[s]) ans += add[s]*lNum;</span><br><span class="line">    <span class="keyword">if</span>(add[t]) ans += add[t]*rNum;</span><br><span class="line">    <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) &#123;ans += tree[s^<span class="number">1</span>]; lNum += nNum;&#125;</span><br><span class="line">    <span class="keyword">if</span>(t&amp;<span class="number">1</span>) &#123;ans += tree[t^<span class="number">1</span>]; rNum += nNum;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(; s; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    ans += add[s]*lNum;</span><br><span class="line">    ans += add[t]*rNum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 同上</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="区间修改-区间查询的空间优化"><a href="#区间修改-区间查询的空间优化" class="headerlink" title="区间修改+区间查询的空间优化"></a>区间修改+区间查询的空间优化</h4><p>也许有的读者发现了:标记和值好像可以看成一个东西</p>
<p>所以, 我们可不可以<strong>不存值, 只存标记</strong>?</p>
<p><strong>当然可以！</strong></p>
<p><strong>zkw:永久化的标记就是值!</strong></p>
<p>_<del>zkw:狗拿耗子, 猫下岗了</del>_ </p>
<p>那么, 怎么实现呢?</p>
<p>下面是<strong>区间最值(RMQ)版本</strong>的(以最小值为例)</p>
<blockquote>
<p>在这里, 我们不存总和了, 存<code>tree[i]=sum[i]-sum[i&gt;&gt;1] //sum[i]对应上述两个版本代码中的tree[i]</code>(即为子节点-父节点)</p>
<p>区间修改就直接改<code>tree[i]</code></p>
<p>查询就从当前节点一直加到根(<code>tree[i]+tree[i&gt;&gt;1]+...+tree[1]</code>)</p>
<blockquote>
<p>或者数学一点</p>
<script type="math/tex; mode=display">\sum_{\text{j}=0}^{\lfloor\log_2\text{i}\rfloor}\mathrm{tree}_{i\cdot2^j}</script></blockquote>
<p>(修改时的<code>s,t</code>)遇到节点<code>x</code>, 则</p>
<p><code>A=min(tree[x&gt;&gt;1],tree[x&gt;&gt;1|1]), tree[x]+=A, tree[x&gt;&gt;1]-=A, tree[x&gt;&gt;1|1]-=A</code></p>
<blockquote>
<p>这一步可能有一些难懂, 就是修改了一个区间, 可能会导致父节点存储的最值(普通情况下)发生改变, 所以用这一步来修正</p>
</blockquote>
</blockquote>
<p>为什么笔者没有放<strong>区间求和(RSQ)版本</strong>的呢?</p>
<p>因为笔者觉得求和版本的依然要维护两棵树(一棵存<code>tree[i]-tree[i-1]</code>, 另一棵存<code>i*(tree[i]-tree[i-1])</code>, 类似树状数组), 也就是没有优化(可能是笔者太弱了, 没有想到别的方法)</p>
<p>当然, 这个版本也是可以单点修改/单点查询的, 不过没有上述代码实用, 所以这里就不讨论了</p>
<p>直接放代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (N = <span class="number">1</span>; N &lt;= n + <span class="number">1</span>; N &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">  fp(i, N + <span class="number">1</span>, N + n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, tree + i);</span><br><span class="line">  fd(i, N - <span class="number">1</span>, <span class="number">1</span>) &#123;</span><br><span class="line">    tree[i] = min(tree[i &lt;&lt; <span class="number">1</span>], tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    tree[i &lt;&lt; <span class="number">1</span>] -= tree[i];</span><br><span class="line">    tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] -= tree[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> tmp;</span><br><span class="line">  <span class="keyword">for</span> (s += N - <span class="number">1</span>, t += N + <span class="number">1</span>; s ^ t ^ <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (~s &amp; <span class="number">1</span>) tree[s ^ <span class="number">1</span>] += k;</span><br><span class="line">    <span class="keyword">if</span> (t &amp; <span class="number">1</span>) tree[t ^ <span class="number">1</span>] += k;</span><br><span class="line">    tmp = min(tree[s], tree[s ^ <span class="number">1</span>]);</span><br><span class="line">    tree[s] -= tmp;</span><br><span class="line">    tree[s ^ <span class="number">1</span>] -= tmp;</span><br><span class="line">    tree[s &gt;&gt; <span class="number">1</span>] += tmp;</span><br><span class="line">    tmp = min(tree[t], tree[t ^ <span class="number">1</span>]);</span><br><span class="line">    tree[t] -= tmp;</span><br><span class="line">    tree[t ^ <span class="number">1</span>] -= tmp;</span><br><span class="line">    tree[t &gt;&gt; <span class="number">1</span>] += tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (; s != <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>) &#123;  <span class="comment">//记得要上推到根节点</span></span><br><span class="line">    tmp = min(tree[s], tree[s ^ <span class="number">1</span>]);</span><br><span class="line">    tree[s] -= tmp;</span><br><span class="line">    tree[s ^ <span class="number">1</span>] -= tmp;</span><br><span class="line">    tree[s &gt;&gt; <span class="number">1</span>] += tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;  <span class="comment">//闭区间</span></span><br><span class="line">  <span class="keyword">int</span> sAns = <span class="number">0</span>, tAns = <span class="number">0</span>;</span><br><span class="line">  s += N, t += N;</span><br><span class="line">  <span class="keyword">if</span> (s != t) &#123;  <span class="comment">//防止查询单点时死循环</span></span><br><span class="line">    <span class="keyword">for</span> (; s ^ t ^ <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      sAns += tree[s];</span><br><span class="line">      tAns += tree[t];</span><br><span class="line">      <span class="keyword">if</span> (~s &amp; <span class="number">1</span>) sAns = min(sAns, tree[s ^ <span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span> (t &amp; <span class="number">1</span>) tAns = min(tAns, tree[t ^ <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ans = min(sAns + tree[s], tAns + tree[t]);</span><br><span class="line">  <span class="keyword">while</span> (s &gt; <span class="number">1</span>) ans += tree[s &gt;&gt;= <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="大数据测试"><a href="#大数据测试" class="headerlink" title="大数据测试"></a>大数据测试</h1><p><strong><a href="../zkw-segment-tree-test2">测试已更新</a></strong></p>
<p>先来看一看参赛选手:</p>
<p>1号:递归线段树</p>
<p>2号:zkw线段树(非差分版本, 差分版本的常数略大, 就不测了)</p>
<p>3号:树状数组</p>
<p><del>zkw线段树:说好的我的主场呢?</del></p>
<p>先以<a href="https://www.luogu.com.cn/problem/P3372" target="_blank" rel="noopener">洛谷P3372</a>做一个热身</p>
<p>因为图太多, 所以不贴出来了, 有兴趣的读者可以查看提交记录</p>
<p><strong>读入优化</strong></p>
<p>1号:递归线段树 412ms / 6.31MB (<a href="https://www.luogu.com.cn/record/9424058" target="_blank" rel="noopener">R9424058</a>)</p>
<p>2号:zkw线段树 208ms / 4.74MB (<a href="https://www.luogu.com.cn/record/9424567" target="_blank" rel="noopener">R9424567</a>)</p>
<p>3号:树状数组 196ms / 3.71MB (<a href="https://www.luogu.com.cn/record/9424624" target="_blank" rel="noopener">R9424624</a>)</p>
<p><strong>读入优化+O2</strong></p>
<p>1号:递归线段树 220ms / 6.21MB (<a href="https://www.luogu.com.cn/record/9424921" target="_blank" rel="noopener">R9424921</a>)</p>
<p>2号:zkw线段树 160ms / 4.86MB (<a href="https://www.luogu.com.cn/record/9424805" target="_blank" rel="noopener">R9424805</a>)</p>
<p>3号:树状数组  96ms / 3.74MB (<a href="https://www.luogu.com.cn/record/9424762" target="_blank" rel="noopener">R9424762</a>)</p>
<p>可以看到, 没有O2时2号和3号相差无几, 有了O2之后3号吊打全场<del>可能是笔者写的zkw线段树常数太大QwQ</del></p>
<p>为了<del>防止zkw线段树被吊打得太惨</del>反应算法真实水平以及模拟NOIp竞赛环境, 下面就不开O2了</p>
<p>在这里先放一下结果, 测试代码和大数据放在<a href="../zkw-segment-tree-test1">另一篇文章</a>里</p>
<p>保证所有输入数据在unsigned long long 范围内, 结果对$2^{64}$取模, 表格中的时间为平均值</p>
<p>测试环境:</p>
<blockquote>
<p>系统:noilinux-1.4.1</p>
<p>内存:2GB</p>
<p>CPU:AMD Athlon(tm) II X4 631 Quad-Core Processor 2600 MHz</p>
</blockquote>
<ul>
<li>测试#1:</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据规模</th>
<th style="text-align:center">递归线段树(ms)</th>
<th style="text-align:center">zkw线段树(ms)</th>
<th style="text-align:center">树状数组(ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">5e5(5组)</td>
<td style="text-align:center">3554.359</td>
<td style="text-align:center">2067.978</td>
<td style="text-align:center">1968.074</td>
</tr>
<tr>
<td style="text-align:center">1e6(5组)</td>
<td style="text-align:center">7327.344</td>
<td style="text-align:center">4922.725</td>
<td style="text-align:center">4359.272</td>
</tr>
<tr>
<td style="text-align:center">5e6(3组)</td>
<td style="text-align:center">49416.196</td>
<td style="text-align:center">34078.837</td>
<td style="text-align:center">26782.107</td>
</tr>
<tr>
<td style="text-align:center">1e7(3组)</td>
<td style="text-align:center">126192.820</td>
<td style="text-align:center">74198.015</td>
<td style="text-align:center">57485.430</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>测试#2:</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据规模</th>
<th style="text-align:center">递归线段树(ms)</th>
<th style="text-align:center">zkw线段树(ms)</th>
<th style="text-align:center">树状数组(ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">5e5(5组)</td>
<td style="text-align:center">3985.435</td>
<td style="text-align:center">2085.221</td>
<td style="text-align:center">1981.154</td>
</tr>
<tr>
<td style="text-align:center">1e6(5组)</td>
<td style="text-align:center">6995.611</td>
<td style="text-align:center">4268.988</td>
<td style="text-align:center">3991.724</td>
</tr>
<tr>
<td style="text-align:center">5e6(3组)</td>
<td style="text-align:center">45401.981</td>
<td style="text-align:center">29582.957</td>
<td style="text-align:center">25179.336</td>
</tr>
<tr>
<td style="text-align:center">1e7(3组)</td>
<td style="text-align:center">99805.488</td>
<td style="text-align:center">67543.985</td>
<td style="text-align:center">54304.283</td>
</tr>
</tbody>
</table>
</div>
<p>结论:<strong>不考虑有运算优先级的情况</strong>下, 树状数组吊打全场(zkw线段树哭晕在厕所</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这篇文章笔者写了<del>将近一天</del>整整三天</p>
<p>因为笔者是个蒟蒻, 所以这篇文章难免会有错误, 在此希望各位dalao批评的时候别把笔者喷得太惨QwQ</p>
<p>另外, zkw julao在他的ppt中还讲了许多高端操作, 有兴趣读者可以看一看<del>膜拜orz</del></p>
<h1 id="主要参考资料"><a href="#主要参考资料" class="headerlink" title="主要参考资料"></a>主要参考资料</h1><ul>
<li><p><a href="https://artofproblemsolving.com/community/c1368h1020439" target="_blank" rel="noopener">统计的力量——线段树全接触</a><del>(膜拜zkw julao)</del></p>
</li>
<li><p><a href="https://blog.csdn.net/zearot/article/details/48299459" target="_blank" rel="noopener">线段树详解 (原理, 实现与应用) - CSDN博客</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>程序设计</tag>
        <tag>洛谷日报</tag>
        <tag>笔记</tag>
        <tag>数据结构</tag>
        <tag>线段树</tag>
        <tag>zkw线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>加密测试</title>
    <url>/article/encrypt-test/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码(123456)</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="84ebbac840a025394911fe091493afbbd4456ff46cb219193431d08a884e647b">c178bfcf42be0853f87a30315420f0b50e6088349860ee50f05b013d370793c2031a9b8ea96c883654d01db9191bc4be9fe80eebe26e02aa57673ecade689ff0c373ab2c42f0e7851ad7cd015c4c4fa11d1ca9b1a70f6c2a41f5405392dc35bedb1d92be4d11012ccb82422de9bd005ef5244a93502260c23b6b932339ac45a8123b060d47b71d7679e40c6b1db3401228af071ccc1a93e5d68adbd62d4359ca32ed5d69dcd4dd847a60fbe27c8c9813e62c2865fd58d810ea358089253c14240e521900c74d7f12e1876eb342faef013bcfa3a6979f8f97430d319eb42057ca</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文章</title>
    <url>/article/test-a/</url>
    <content><![CDATA[<p>主要用于测试文章样式</p>
<a id="more"></a>
<h1 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h1><p>不能单独以mermaid做标题, 否则会崩</p>
<p>部分示例来自 <a href="https://mermaid-js.github.io/mermaid" target="_blank" rel="noopener">https://mermaid-js.github.io/mermaid</a></p>
<h2 id="Flowchart"><a href="#Flowchart" class="headerlink" title="Flowchart"></a>Flowchart</h2><pre class="mermaid">graph LR;
A-->B
B---C
C===D
C--text---E
id1(A)-->id2((B))
id1---id3>C]
id2-.-id4{D}
A-.text.->id1
id3==text===id5[(E)]</pre>

<pre class="mermaid">graph TB
    c1-->a2
    subgraph one
    a1-->a2
    end
    subgraph two
    b1-->b2
    end
    subgraph three
    c1-->c2
    end</pre>

<pre class="mermaid">graph LR
    id1(Start)-->id2(Stop)
    style id1 fill:#f9f,stroke:#333,stroke-width:4px
    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5, 5</pre>

<h2 id="Sequence-diagram"><a href="#Sequence-diagram" class="headerlink" title="Sequence diagram"></a>Sequence diagram</h2><pre class="mermaid">sequenceDiagram
　　　participant Alice
　　　participant Bob
　　　Alice->John:Hello John, how are you?
　　　loop Healthcheck
　　　　　John->John:Fight against hypochondria
　　　end
　　　Note right of John:Rational thoughts <br/>prevail...
　　　John-->Alice:Great!
　　　John->Bob: How about you?
　　　Bob-->John: Jolly good!</pre>

<h2 id="Gantt-diagram"><a href="#Gantt-diagram" class="headerlink" title="Gantt diagram"></a>Gantt diagram</h2><pre class="mermaid">gantt
　　　dateFormat　YYYY-MM-DD
　　　title Adding GANTT diagram functionality to mermaid
　　　section A section
　　　Completed task　　:done, des1, 2014-01-06,2014-01-08
　　　Active task 　　　　:active, des2, 2014-01-09, 3d
　　　future task 　　　　:　　　  des3, after des2, 5d
　　　future task2　　　　:　　　  des4, after des3, 5d
　　　section Critical tasks
　　　Completed task in the critical line　:crit, done, 2014-01-06,24h
　　　Implement parser and json　　　　　　:crit, done, after des1, 2d
　　　Create tests for parser　　　　　　　:crit, active, 3d
　　　Future task in critical line　　　　　:crit, 5d
　　　Create tests for renderer　　　　　　:2d
　　　Add to ,mermaid　　　　　　　　　　　:1d</pre>

<h2 id="Class-diagram-experimental"><a href="#Class-diagram-experimental" class="headerlink" title="Class diagram - experimental"></a>Class diagram - experimental</h2><pre class="mermaid">classDiagram
Class01 <|-- AveryLongClass : Cool
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 --> C2 : Where am i?
Class09 --* C3
Class09 --|> Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
Class08 <--> C2: Cool label</pre>

<h2 id="Git-graph-experimental"><a href="#Git-graph-experimental" class="headerlink" title="Git graph - experimental"></a>Git graph - experimental</h2><pre class="mermaid">gitGraph:
options
{
    "nodeSpacing": 150,
    "nodeRadius": 10
}
end
commit
branch newbranch
checkout newbranch
commit
commit
checkout master
commit
commit
merge newbranch</pre>

<h2 id="Entity-Relationship-Diagram-experimental"><a href="#Entity-Relationship-Diagram-experimental" class="headerlink" title="Entity Relationship Diagram - experimental"></a>Entity Relationship Diagram - experimental</h2><pre class="mermaid">erDiagram
    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ LINE-ITEM : contains
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</pre>

<h2 id="Pie-Chart"><a href="#Pie-Chart" class="headerlink" title="Pie Chart"></a>Pie Chart</h2><pre class="mermaid">pie title What Voldemort doesn't have?
         "FRIENDS" : 2
         "FAMILY" : 3
         "NOSE" : 45</pre>

<h2 id="State-Diagram"><a href="#State-Diagram" class="headerlink" title="State Diagram"></a>State Diagram</h2><pre class="mermaid">stateDiagram
    [*] --> First

    state First {
        [*] --> Second

        state Second {
            [*] --> second
            second --> Third

            state Third {
                [*] --> third
                third --> [*]
            }
        }
    }</pre>

<pre class="mermaid">stateDiagram
    [*] --> First
    First --> Second
    First --> Third

    state First {
        [*] --> fir
        fir --> [*]
    }
    state Second {
        [*] --> sec
        sec --> [*]
    }
    state Third {
        [*] --> thi
        thi --> [*]
    }</pre>

<h1 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h1><p><a href="../katex-supported-functions">参见</a></p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
