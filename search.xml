<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>&lt;洛谷日报#46&gt;浅谈自适应Simpson法</title>
    <url>/2018/08/12/adaptive-simpson-rule/</url>
    <content><![CDATA[<p>一种经典的数值积分算法</p>
<p>老文章, 可能有很多错误, 懒得修了</p>
<a id="more"></a>
<h1 id="求面积诸法"><a href="#求面积诸法" class="headerlink" title="求面积诸法"></a>求面积诸法</h1><p>Simpson法是一种经典的数值积分方法, 一个重要应用就是求不规则图形面积<br>说到不规则图形, 我们往往都是先从曲边梯形开始</p>
<p>曲边梯形$ABCD$就是下图中曲线$AB$、线段$AC$、$CD$、$DB$围成的图形, 我们想要求出它的面积</p>
<p><img src="/.io//1.png" alt></p>
<p>一个简单而直接的解决方案是: 把曲边梯形分成$n$段, 每一段用一些规则的几何图形去近似, 然后累加每一段的面积, 这样我们就得出结果了</p>
<p>可以看出, 上述过程的关键就是选择什么样的几何图形去近似</p>
<p>当然, 用不同的几何图形近似, 效果是不同的</p>
<h2 id="用矩形去近似"><a href="#用矩形去近似" class="headerlink" title="用矩形去近似"></a>用矩形去近似</h2><p>大致这样</p>
<p><img src="/.io//2.png" alt></p>
<p>我们可以看出这种近似方法太粗糙了, 针对用矩形近似的方案, 我们可以做一些优化: </p>
<p>对于每一段, 我们取端点中点在函数上的对应点, 借助这个点来构造矩形: </p>
<p><img src="/.io//3.png" alt></p>
<p>这样看起来就舒服多了, 但感觉还是有些粗糙, 有没有更好的方法呢? </p>
<p>当然有了! </p>
<p>不过在继续之前, 我们先来看看如何实现这种方法</p>
<p>设$C(a,0)$, $D(b,0)$</p>
<p>那么</p>
<script type="math/tex; mode=display">\int_a^bf(x)\mathrm{d}x\thickapprox\Delta x_i\sum_{i=1}^{n-1}{f((i+\frac{1}{2})\Delta x_i)}</script><p>为了方便, 我们让每一段的长度相等, 即对于每一段, 均有</p>
<script type="math/tex; mode=display">\Delta x=\frac{b-a}{n}</script><p>那么</p>
<script type="math/tex; mode=display">\int_a^bf(x)\mathrm{d}x\thickapprox\Delta x\sum_{i=1}^{n-1}{f((i+\frac{1}{2})\Delta x)}</script><h2 id="用梯形去近似"><a href="#用梯形去近似" class="headerlink" title="用梯形去近似"></a>用梯形去近似</h2><p>大致这样</p>
<p><img src="/.io//4.png" alt></p>
<p><del>易知此法和上述的结果是一样的, 不过此法视觉效果好</del></p>
<p>有一些部分看起来已经足够精确了, 但感觉还是有些粗糙, 有没有更好的方法呢? </p>
<p>当然有了!</p>
<p>不过在继续之前, 我们还是先来看看如何实现这种方法</p>
<p>设$C(a,0)$, $D(b,0)$</p>
<p>那么</p>
<script type="math/tex; mode=display">\int_a^bf(x)\mathrm{d}x\thickapprox\Delta x_i(\sum_{i=1}^{n-1}{f(i\Delta x_i)}+\frac{f(a)+f(b)}{2})</script><p>为了方便, 我们让每一段的长度相等, 即对于每一段, 均有</p>
<script type="math/tex; mode=display">\Delta x=\frac{b-a}{n}</script><p>则</p>
<script type="math/tex; mode=display">\int_a^bf(x)\mathrm{d}x\thickapprox\Delta x(\sum_{i=1}^{n-1}{f(i\Delta x)}+\frac{f(a)+f(b)}{2})</script><h2 id="Simpson法"><a href="#Simpson法" class="headerlink" title="Simpson法"></a>Simpson法</h2><p>进入正题</p>
<p>Simpson法是先将原曲线近似成一段段抛物线, 然后再用Newton-Leibniz公式求每一段的面积</p>
<p><img src="/.io//5.png" alt></p>
<p>(因为笔者在GeoGebra里没找到根据三点画抛物线的工具, 所以这里用圆弧代替了QwQ)</p>
<p>可以看出, 此法效果相当不错</p>
<p>我们来看看如何实现</p>
<p>设$C(a,0)$, $D(b,0)$</p>
<p>为了方便, 我们让每一段的长度相等, 即对于每一段, 均有</p>
<script type="math/tex; mode=display">\Delta x=\frac{b-a}{n}</script><p>对于每一段区间, 我们如下处理: </p>
<p>设起点为$x_{2i-2}$, 中点为$x_{2i-1}$, 终点为$x_{2i}$</p>
<p>我们要用过点$(x_{2i-2},f(x_{2i-2}))$, $(x_{2i-1},f(x_{2i-1}))$, $(x_{2i},f(x_{2i}))$的抛物线$g(x)=Ax^2+Bx+C$来取代$f(x)$</p>
<p>有</p>
<script type="math/tex; mode=display">\begin{cases}
  f(x_{2i-2})&=g(x_{2i-2})\\
  f(x_{2i-1})&=g(x_{2i-1})\\
  f(x_{2i})&=g(x_{2i})
\end{cases}</script><p>于是</p>
<script type="math/tex; mode=display">\begin{aligned}
  \int_{x_{2i-2}}^{x_{2i}}f(x)\mathrm{d}x&\thickapprox\int_{x_{2i-2}}^{x_{2i}}g(x)\mathrm{d}x\\
  &=(\frac{A}{3}x^3+\frac{B}{2}x^2+Cx)\Big|_{x_{2i-2}}^{x_{2i}}\\
  &=\frac{\Delta x}{3}[f(x_{2i-2})+4f(x_{2i-1})+f(x_{2i})]
\end{aligned}</script><p>故</p>
<script type="math/tex; mode=display">\int_a^bf(x)\mathrm{d}x\thickapprox\frac{\Delta x}{3}\sum_{i=0}^{2n-2}[f(x_{2i})+4f(x_{2i+1})+f(x_{2i+2})]</script><p>一部分资料认为Simpson法只用一段抛物线替代, 即</p>
<script type="math/tex; mode=display">\displaystyle\int_a^bf(x)\mathrm{d}x\thickapprox\frac{b-a}{6}[f(a)+4f(\frac{a+b}{2})+f(b)]</script><p>下称此情况为三点Simpson法</p>
<h1 id="自适应Simpson法"><a href="#自适应Simpson法" class="headerlink" title="自适应Simpson法"></a>自适应Simpson法</h1><p>自适应Simpson法就是对Simpson法的一个优化</p>
<p>对一段区间$[a,b]$, 我们做如下操作</p>
<ol>
<li>取中点$mid=\frac{a+b}{2}$</li>
<li>分别对区间$[a,b]$、区间$[a,mid]$、区间$[mid,b]$应用三点Simpson法, 设得到的面积分别为$S_0$、$S_1$、$S_2$</li>
<li>若$S_0$与$S_1+S_2$差别不大, 就认为区间$[a,b]$面积的近似值已经求得, 否则分别对区间$[a,mid]$、区间$[mid,b]$递归应用本操作</li>
</ol>
<p>可以看出这个方法在保证了精度的同时保证了效率</p>
<p>我们注意到, 上述操作中有两个地方含糊不清</p>
<p>一个是如何确定“差别不大”, 一个是面积的近似值已经求得后返回的面积是多少</p>
<p>我们认为当且仅当$|S_1+S_2-S_0|&lt;15\epsilon$时$S_0$与$S_1+S_2$差别不大</p>
<blockquote>
<p>乘以$15$是经过一系列误差分析后得出的, 具体笔者可能会另写一篇文章<del>咕咕咕</del>, 感谢@<a href="https://www.luogu.org/space/show?uid=17930" target="_blank" rel="noopener">Marser</a>和@<a href="https://www.luogu.org/space/show?uid=7868" target="_blank" rel="noopener">_rqy</a>两位dalao的补充</p>
</blockquote>
<p>返回的面积则是$S_1+S_2+\frac{S_1+S_2-S_0}{15}$</p>
<p>附程序: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">F</span><span class="params">(<span class="keyword">double</span> num)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 按需补充</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">simpson</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 防溢出</span></span><br><span class="line">  <span class="keyword">double</span> c = a + (b - a) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> (F(a) + <span class="number">4</span> * F(c) + F(b)) * (b - a) / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// adaptive simpson rule</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">asr</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> eps, <span class="keyword">double</span> S)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> c  = a + (b - a) / <span class="number">2</span>,</span><br><span class="line">         lS = simpson(a, c), rS = simpson(c, b);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">fabs</span>(lS + rS - S) &lt;= <span class="number">15</span> * eps)</span><br><span class="line">    <span class="keyword">return</span> lS + rS + (lS + rS - S) / <span class="number">15.0</span>;</span><br><span class="line">  <span class="comment">// 注意这里eps要除以2</span></span><br><span class="line">  <span class="keyword">return</span> asr(a, c, eps / <span class="number">2</span>, lS) + asr(c, b, eps / <span class="number">2</span>, rS); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这篇文章笔者写了4h吧, 内容还算简单, 希望各位能够愉快地享用~(￣▽￣)~*</p>
<p>btw, 洛谷P4525、P4526是模板题ヾ(≧▽≦*)<del>连切两道紫题真开心</del></p>
<h1 id="主要参考书目"><a href="#主要参考书目" class="headerlink" title="主要参考书目"></a>主要参考书目</h1><ul>
<li>刘汝佳, 陈锋. 算法竞赛入门经典——训练指南. 北京: 清华大学出版社, 2012</li>
</ul>
]]></content>
      <tags>
        <tag>数学</tag>
        <tag>程序设计</tag>
        <tag>算法</tag>
        <tag>洛谷日报</tag>
        <tag>数值积分</tag>
        <tag>自适应Simpson算法</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;洛谷日报#53&gt;浅谈一些求近似值的方法</title>
    <url>/2018/08/09/approx-number/</url>
    <content><![CDATA[<p><del>只是为了拿本子随便写的</del></p>
<p>老文章, 可能有很多错误, 懒得修了</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于低于5次的多项式方程, 我们有通用的公式解法求零点的精确值</p>
<p>对于一些特殊高次多项式方程 (例如可以因式分解的或者满足一些特定形式的方程) 的和一些特殊的超越方程, 我们也有方法求零点的精确值</p>
<p>但是其余的情况呢？</p>
<p>目前来说我们只能求近似值QwQ (而且在实际应用中, 精确值往往也会被转换成近似值) </p>
<p>下面简要介绍几种方法</p>
<h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><p>可以说相当常见了</p>
<p>对于<strong>在区间$[l,r]$内单调、连续且有$f(l)\cdot f(r)&lt;0$成立的$f(x)$</strong>, 做如下操作: </p>
<ol>
<li>计算$mid=\displaystyle\frac{l+r}{2}$</li>
<li>若$f(l)f(mid)&lt;0$, 则令$r=mid$, 否则令$l=mid$</li>
<li>如果达到预定精度, 跳转到4, 否则跳转到1</li>
<li>结束</li>
</ol>
<p>循环次数: $\displaystyle\lceil\log_2 {\frac{r-l}{\epsilon}}\rceil$</p>
<p>附程序: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r, <span class="keyword">double</span> EPS)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> mid;</span><br><span class="line">  <span class="keyword">while</span> (r - l &gt; EPS) &#123;</span><br><span class="line">    mid = l + (r - l) / <span class="number">2</span>;  <span class="comment">//防溢出</span></span><br><span class="line">    <span class="keyword">if</span> (F(mid) * F(l) &lt;= <span class="number">0</span>)</span><br><span class="line">      r = mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      l = mid;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="0-618法-优选法"><a href="#0-618法-优选法" class="headerlink" title="0.618法\优选法"></a>0.618法\优选法</h1><p>常用于求<strong>单峰函数最值</strong></p>
<p>先证明一下它的最优性(摘自人教版高中数学选修4-7<del>没错真的有这本选修</del>) </p>
<blockquote>
<p>为了使每次去掉的区间有一定的规律性, 我们这样来考虑: <strong>每次舍去的区间占舍去前的区间的比例数相同</strong></p>
<p>下面进一步分析如何按上述两个原则确定合适的试点. 如图2-1 设第1试点、第2试点分别为$x_1$和$x_2$, $x_2&lt;x_1$且$x_1,x_2$关于$[a,b]$的中心对称, 即$x_2-a=b-x_1$</p>
<p><img src="/.io//2_1.PNG" alt></p>
<p> (图2-1, 由GeoGebra生成) </p>
<p>显然,  不论点$x_2$(或点$x_1$)是好点还是差点, 由对称性,  舍去的区间长度都等于$b-x_1$, 不妨设$x_2$是好点, $x_1$是差点, 于是舍去$(x_1,b]$. 再在存优范围$[a,x_1]$内安排第3次试验, 设试点为$x_3$, $x_3$与$x_2$关于$[a,x_1]$的中心对称 (如图2-2所示) . </p>
<p><img src="/.io//2_2.PNG" alt></p>
<p> (图2-2, 由GeoGebra生成) </p>
<p>点$x_3$应在点$x_2$左侧, 因为如果点$x_3$在点$x_2$的右侧, 那么当$x_3$是好点, $x_2$是差点时, 要舍去区间$[a,x_2]$, 而它的长度与上次舍去的区间$(x_1,b]$的长度相同, 违背成比例舍去的原则. 于是, 不论点$x_3$ (或点$x_2$) 是好点还是差点, 被舍去的区间长度都等于$x_1-x_2$, 按成比例舍去的原则, 我们有等式</p>
<script type="math/tex; mode=display">\frac{b-x_1}{b-a}=\frac{x_1-x_2}{x_1-a}\tag{1}</script><p>其中, 左边是第一次舍去的比例数, 右边是第二次舍去的比例数,  对式(1)变形, 得</p>
<script type="math/tex; mode=display">1-\frac{b-x_1}{b-a}=1-\frac{x_1-x_2}{x_1-a}</script><p>即</p>
<script type="math/tex; mode=display">\frac{x_1-a}{b-a}=\frac{x_2-a}{x_1-a}\tag{2}</script><p>式(2)两边分别是两次舍弁后的存优范围占舍弃前全区间的比例数, 设每次舍弃后的存优范围占舍弃前全区间的比例数为$t$, 即</p>
<script type="math/tex; mode=display">\frac{x_1-a}{b-a}=t\tag{3}</script><p>则由$b-x_2=x_1-a$可得</p>
<script type="math/tex; mode=display">\frac{x_2-a}{b-a}=1-t\tag{4}</script><p>由式(2)得</p>
<script type="math/tex; mode=display">\frac{x_1-a}{b-a}=\frac{\frac{x_2-a}{b-a}}{\frac{x_1-a}{b-a}}</script><p>把(3)与(4)代入(5), 得</p>
<script type="math/tex; mode=display">t=\frac{1-t}{t}</script><p>即</p>
<script type="math/tex; mode=display">t^2+t-1=0</script><p>解得$t_1=\displaystyle\frac{-1+\sqrt{5}}{2}, t_2=\frac{-1-\sqrt{5}}{2}$, 其中$t_1$为对本问题有意义的根, 这就是<strong>黄金分割常数</strong>, 用$\varphi$表示 (注: 原文用$\omega$表示) </p>
</blockquote>
<p>一句话概括就是在缩小区间后可以只计算一个试点坐标, 从而保证最优</p>
<p>流程如下</p>
<ol>
<li>计算$mid_1=l\varphi+r(1-\varphi)$, $mid_2=l(1-\varphi)+r\varphi$</li>
<li>若$f(l) f(mid_1)&gt;0$<ol>
<li>则令$l=mid_1,mid_1=mid_2,mid_2=l(1-\varphi)+r\varphi$</li>
<li>否则令$r=mid_2,mid_2=mid_1,mid_1=l\varphi+r(1-\varphi)$</li>
</ol>
</li>
<li>如果达到预定精度, 跳转到4, 否则跳转到2 <strong> (注意这里跳转到2) </strong></li>
<li>结束</li>
</ol>
<p>附程序: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PHI  = <span class="number">0.61803399</span>,  </span><br><span class="line">             mPHI = <span class="number">0.38196601</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">gold_search</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r, <span class="keyword">double</span> EPS)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> mid1 = l + mPHI * (r - l), mid2 = l + PHI * (r - l);</span><br><span class="line">  <span class="keyword">while</span> (r - l &gt; EPS) &#123;</span><br><span class="line">    <span class="keyword">if</span> (F(mid1) &lt; F(mid2)) &#123;</span><br><span class="line">      l    = mid1;</span><br><span class="line">      mid1 = mid2;</span><br><span class="line">      mid2 = l + PHI * (r - l);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      r    = mid2;</span><br><span class="line">      mid2 = mid1;</span><br><span class="line">      mid1 = l + mPHI * (r - l);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (mid1 + mid2) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>读者们可以在<a href="https://www.luogu.org/problemnew/show/P3382" target="_blank" rel="noopener">洛谷P3382</a>中测试一下(～o￣3￣)～</p>
<p>关于这个还有一个类似方法: 斐波那契法. 有兴趣的读者可以查阅相关资料<del>才不是笔者不想写</del><code>_(:3」∠)_</code></p>
<h1 id="Taylor公式"><a href="#Taylor公式" class="headerlink" title="Taylor公式"></a>Taylor公式</h1><p><strong>先讲这个是为了为下文Newton迭代法二次收敛的证明做铺垫, 不想看证明的可以略过QwQ (不过还是推荐了解一下, 挺有趣的)</strong></p>
<p><strong>这里假定函数$f(x)$在$x_0$处有任意阶导数</strong></p>
<p>我们可以很容易地求出多项式和类指数函数的近似值, 但是像三角函数、对数函数这样的我们又该如何求近似值呢</p>
<p>对了, 就是用<strong>Taylor公式</strong>QwQ</p>
<p>Taylor公式的想法很简单, 就是构造一个多项式函数$g(x)=\displaystyle\sum_{k=0}^n{a_kx^k}$, 使得它与函数$f(x)$在$x_0$处的<strong>原函数值和各阶导数</strong>均相等, 即</p>
<script type="math/tex; mode=display">\begin{aligned}
  f(x_0)&=g(x_0)\\
  f^\prime(x_0)&=g^\prime(x_0)\\
  f^{\prime\prime}(x_0)&=g^{\prime\prime}(x_0)\\
  &...\\
  f^{(n)}(x_0)&=g^{(n)}(x_0)
\end{aligned}</script><p>因为</p>
<script type="math/tex; mode=display">g^{(m)}(x)=\sum_{k=m}^n{\frac{k!}{(k-m)!}a_kx^{k-m}}</script><p>于是便有 </p>
<script type="math/tex; mode=display">g(x)=\sum_{k=0}^n{\frac{f^{(k)}(x_0)}{k!}(x-x_0)^k}</script><p>当$n\rightarrow\infty$时, 我们可以认为$f(x)=g(x)$</p>
<p>而当$n$有一个确定的值时, $f(x)$就可以写成$g(x)+R_n(x)$了</p>
<p>其中$R_n(x)$是余项, 它有好几种不同的写法, 比如Lagrange余项</p>
<script type="math/tex; mode=display">R_k(x)=\frac{f^{(k+1)}(\xi_L)}{(k+1)!}(x-x_0)^{k+1}</script><p>其中$\xi_L$在$x$和$x_0$之间</p>
<p>当$n\rightarrow\infty$时, 有(Taylor级数) </p>
<script type="math/tex; mode=display">\displaystyle\sum_{k=0}^\infty{\frac{f^{(k)}(x_0)}{k!}(x-x_0)^k}</script><p>特别地, 当$x_0=0$时, 有(Maclaurin级数) </p>
<script type="math/tex; mode=display">\displaystyle\sum_{k=0}^\infty{\frac{f^{(k)}(0)}{k!}}x^k</script><p>另外注意应用Maclaurin级数并且$x$在某个范围之外时, 得到的结果可能是发散的(这个不展开讲, 有兴趣的读者可以去学习无穷级数相关知识) </p>
<p>附上<a href="https://en.wikipedia.org/wiki/Taylor%27s_theorem" target="_blank" rel="noopener">Wikipedia</a>的动图</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/3/31/Tayloranimation.gif" alt></p>
<p>对证明感兴趣的读者可以自行查阅相关资料</p>
<p>下面给出几个常见的Taylor级数</p>
<script type="math/tex; mode=display">e^x=\displaystyle\sum_{k=0}^\infty{\frac{x^k}{k!}}</script><script type="math/tex; mode=display">\sin x=\displaystyle\sum_{k=0}^\infty{(-1)^k\frac{x^{2k+1}}{(2k+1)!}}</script><script type="math/tex; mode=display">\cos x=\displaystyle\sum_{k=0}^\infty{(-1)^k\frac{x^{2k}}{(2k)!}}</script><p>(有上面三个式子就可以证明欧拉公式之$e^{i\theta}=\cos\theta+i\sin\theta$了) </p>
<script type="math/tex; mode=display">\ln{(1+x)}=\displaystyle\sum_{k=1}^\infty{(-1)^{k+1}\frac{x^k}{k}}</script><script type="math/tex; mode=display">\frac{1}{1-x}=\displaystyle\sum_{k=0}^\infty{x^k}</script><script type="math/tex; mode=display">(1+x)^m=\displaystyle\sum_{k=0}^\infty{\binom{m}{k}x^k}</script><h1 id="Newton迭代法"><a href="#Newton迭代法" class="headerlink" title="Newton迭代法"></a>Newton迭代法</h1><p>先说说过程</p>
<ol>
<li>随便确定一个数$x_0$</li>
<li>求在$f(x_0)$处的切线$l:[y-f(x_0)]=f^\prime(x_0)(x-x_0)$</li>
<li>求切线$l$的零点$x_1$</li>
</ol>
<p>稍加计算便得到了</p>
<script type="math/tex; mode=display">x_1=x_0-\frac{f(x_0)}{f^\prime(x_0)}</script><p>既然是迭代, 那么自然就有</p>
<script type="math/tex; mode=display">x_{n+1}=x_n-\frac{f(x_n)}{f^\prime(x_n)}</script><p>其中$x_n$代表第$n$次迭代</p>
<p>附上<a href="https://en.wikipedia.org/wiki/Newton&#39;s_method" target="_blank" rel="noopener">Wikipedia</a>的动图</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e0/NewtonIteration_Ani.gif" alt></p>
<p>二次收敛证明: (Wikipedia上的, 笔者翻译QwQ)</p>
<blockquote>
<p>根据<a href="https://en.wikipedia.org/wiki/Taylor%27s_theorem" target="_blank" rel="noopener">Taylor’s theorem</a>, 任何二阶导数连续的函数$f(x)$ (设$\alpha$是根) 都可以写成</p>
<script type="math/tex; mode=display">f(\alpha)=f(x_n)+f^\prime(x_n)(\alpha-x_n)+R_1\tag{1}</script><p>由<a href="https://en.wikipedia.org/wiki/Lagrange_remainder" target="_blank" rel="noopener">Lagrange form of the Taylor series expansion remainder</a>得</p>
<script type="math/tex; mode=display">R_1=\frac{1}{2!}f^{\prime\prime}(\xi_n)(\alpha-x_n)^2</script><p>其中$\xi_n$在$x_n$和$\alpha$之间. </p>
<p>由于$\alpha$是根, 所以(1)式变为</p>
<script type="math/tex; mode=display">0=f(\alpha)=f(x_n)+f^\prime(x_n)(\alpha-x_n)+\frac{1}{2}f^{\prime\prime}(\xi_n)(\alpha-x_n)^2\tag{2}</script><p>(2)式两边同时除以$f^\prime(x_n)$, 整理得</p>
<script type="math/tex; mode=display">\frac{f(x_n)}{f^\prime(x_n)}+(\alpha-x_n)=\frac{-f^{\prime\prime}(\xi_n)}{2f^\prime(x_n)}(\alpha-x_n)^2\tag{3}</script><p>由于</p>
<script type="math/tex; mode=display">x_{n+1}=x_n-\frac{f(x_n)}{f^\prime(x_n)}\tag{4}</script><p>代入(3)式, 有</p>
<script type="math/tex; mode=display">\underbrace{\alpha-x_{n+1}}_{\epsilon_{n+1}}=\frac{-f^{\prime\prime}(\xi_n)}{2f^\prime(x_n)}(\underbrace{\alpha-x_n}_{\epsilon_n})^2</script><p>即</p>
<script type="math/tex; mode=display">\epsilon_{n+1}=\frac{-f^{\prime\prime}(\xi_n)}{2f^\prime(x_n)}\epsilon_n^2\tag{5}</script><p>两边取绝对值, 有</p>
<script type="math/tex; mode=display">|\epsilon_{n+1}|=\frac{|f^{\prime\prime}(\xi_n)|}{2|f^\prime(x_n)|}\epsilon_n^2\tag{6}</script><p>(6)式表明, 如果函数满足以下条件, 其为二次收敛</p>
<ol>
<li>对于所有的$x\in I$ ($I$为区间$[\alpha-r,\alpha+r]$,$r\geq |\alpha-x_0|$ (即$x_0\in I$) ) , 有$f^\prime(x)\neq 0$</li>
<li>对于所有的$x\in I$, $f^{\prime\prime}(x)$连续</li>
<li>$x_0$足够接近根</li>
</ol>
<p>“足够接近”意为</p>
<ol>
<li>Taylor近似足够准确 (可以忽略高阶项) </li>
<li>对于$C&lt;\infty$(原文如此), $\displaystyle\frac{1}{2}\Big|\frac{f^{\prime\prime}(x_n)}{f^\prime(x_n)}\Big|&lt;C\Big|\frac{f^{\prime\prime}(\alpha)}{f^\prime(\alpha)}\Big|$</li>
<li>对于$n\in\Bbb{N}$, $\displaystyle C\Big|\frac{f^{\prime\prime}(\alpha)}{f^\prime(\alpha)}\Big|\epsilon_n&lt;1$</li>
</ol>
<p>当满足上述条件时, (6)式可以写为: </p>
<script type="math/tex; mode=display">|\epsilon_{n+1}|\leq M\epsilon_n^2</script><p>其中</p>
<script type="math/tex; mode=display">M=\displaystyle\sup_{x\in I}{\frac{1}{2}\bigg|\frac{f^{\prime\prime}(x)}{f^\prime(x)}\bigg|}</script><p>由条件3得$M|\epsilon_0|&lt;1$</p>
</blockquote>
<p>程序: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">newton</span><span class="params">(<span class="keyword">double</span> x0;<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) x0 -= f(x0) / df(x0);</span><br><span class="line">    <span class="keyword">return</span> x0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>当然, 上述各方法的应用范围远不止于此, 有兴趣的读者可以自行查阅相关资料QwQ</p>
<h1 id="赠品"><a href="#赠品" class="headerlink" title="赠品"></a>赠品</h1><h2 id="cos-x-x-的解析解"><a href="#cos-x-x-的解析解" class="headerlink" title="$\cos x=x$的解析解"></a>$\cos x=x$的解析解</h2><p>对于PhOer来说, $\cos x=x$这个方程应该是相当熟悉了QwQ</p>
<p>笔者在这里放上解析解 (近似值$x=0.739$) , 详情见参考文献[2] (文献里讲的是$t\sin x=x-m$的解法, 不过笔者太弱了, 实在是看不懂QwQ) </p>
<script type="math/tex; mode=display">{\pi\over2}\exp\Bigg({1\over\pi}\int_0^1{\arctan\Big({(\pi x+2)\ln{({\sqrt{1-x^2}+1\over x})}x\over x^2\ln^2({\sqrt{1-x^2}+1\over x})-\pi x-1}\Big)\over x}\mathrm{d}x\Bigg)</script><h2 id="快速求-1-over-sqrt-x"><a href="#快速求-1-over-sqrt-x" class="headerlink" title="快速求${1\over\sqrt{x}}$"></a>快速求${1\over\sqrt{x}}$</h2><p>关于这个有一个相当有名的故事: <a href="https://diducoder.com/sotry-about-sqrt.html" target="_blank" rel="noopener">一个Sqrt函数引发的血案</a>(这是笔者能找到的最早一篇了QwQ) </p>
<p>测试程序:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">InvSqrt</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">int</span> it)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">float</span> xhalf = <span class="number">0.5f</span> * x;</span><br><span class="line">  <span class="keyword">int</span>   i     = *(<span class="keyword">int</span>*)&amp;x;</span><br><span class="line"></span><br><span class="line">  i = <span class="number">0x5f3759df</span> - (i &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  x = *(<span class="keyword">float</span>*)&amp;i;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= it; ++i)</span><br><span class="line">    x = x * (<span class="number">1.5f</span> - xhalf * x * x);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">GetRErr</span><span class="params">(<span class="keyword">float</span> test, <span class="keyword">float</span> real)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">fabs</span>((test - real) / real * <span class="number">100.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">float</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">if</span> (t &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> sys   = <span class="number">1.0</span> / <span class="built_in">sqrt</span>(t),</span><br><span class="line">          invs1 = InvSqrt(t, <span class="number">1</span>), invs2 = InvSqrt(t, <span class="number">2</span>),</span><br><span class="line">          invs3 = InvSqrt(t, <span class="number">3</span>), invs4 = InvSqrt(t, <span class="number">4</span>),</span><br><span class="line">          invs5 = InvSqrt(t, <span class="number">5</span>), invs6 = InvSqrt(t, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">      <span class="string">"Test#%d n=%f\n"</span></span><br><span class="line">      <span class="string">"System:\n%f\nTest:\n"</span></span><br><span class="line">      <span class="string">"it#1:%f RelativeErr:%.2f%%\n"</span></span><br><span class="line">      <span class="string">"it#2:%f RelativeErr:%.2f%%\n"</span></span><br><span class="line">      <span class="string">"it#3:%f RelativeErr:%.2f%%\n"</span></span><br><span class="line">      <span class="string">"it#4:%f RelativeErr:%.2f%%\n"</span></span><br><span class="line">      <span class="string">"it#5:%f RelativeErr:%.2f%%\n"</span></span><br><span class="line">      <span class="string">"it#6:%f RelativeErr:%.2f%%\n\n"</span>,</span><br><span class="line">      ++i,</span><br><span class="line">      t,</span><br><span class="line">      sys,</span><br><span class="line">      invs1,</span><br><span class="line">      GetRErr(invs1, sys),</span><br><span class="line">      invs2,</span><br><span class="line">      GetRErr(invs2, sys),</span><br><span class="line">      invs3,</span><br><span class="line">      GetRErr(invs3, sys),</span><br><span class="line">      invs4,</span><br><span class="line">      GetRErr(invs4, sys),</span><br><span class="line">      invs5,</span><br><span class="line">      GetRErr(invs5, sys),</span><br><span class="line">      invs6,</span><br><span class="line">      GetRErr(invs6, sys));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这篇文章偏数学一些, 如果不能理解的话请多读几遍QwQ</p>
<p>其实可写的还有很多, 限于篇幅就到此为止了 (现在在后台打个字都要卡两秒QwQ) </p>
<p>因为笔者是个蒟蒻, 所以如果有错误, 烦请各位dalao不吝赐教</p>
<h1 id="主要参考资料"><a href="#主要参考资料" class="headerlink" title="主要参考资料"></a>主要参考资料</h1><ul>
<li><p>[1] 人教版高中数学选修4-7 优选法与试验设计初步</p>
</li>
<li><p>[2] Siewert C E, Burniston E E. An exact analytical solution of Kepler’s equation[J]. Celestial Mechanics, 1972, 6(3):294-304.</p>
</li>
<li><p>[3] <a href="https://en.wikipedia.org/wiki/Newton&#39;s_method" target="_blank" rel="noopener">Newton’s method - Wikipedia</a></p>
</li>
<li><p>[4] <a href="https://en.wikipedia.org/wiki/Taylor%27s_theorem" target="_blank" rel="noopener">Taylor’s theorem - Wikipedia</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>数学</tag>
        <tag>程序设计</tag>
        <tag>算法</tag>
        <tag>洛谷日报</tag>
        <tag>二分</tag>
        <tag>0.618法</tag>
        <tag>Newton迭代法</tag>
        <tag>Taylor级数</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;洛谷日报#35&gt;线段树的扩展之浅谈zkw线段树</title>
    <url>/2018/08/06/zkw-segment-tree/</url>
    <content><![CDATA[<p>又叫堆式线段树, 是一种简单的常数优化</p>
<p>老文章, 可能有很多错误, 懒得修了</p>
<a id="more"></a>
<h1 id="阅读本文前请先阅读"><a href="#阅读本文前请先阅读" class="headerlink" title="阅读本文前请先阅读:"></a>阅读本文前请先阅读:</h1><ul>
<li><a href="https://pks-loving.blog.luogu.com.cn/senior-data-structure-qian-tan-xian-duan-shu-segment-tree" target="_blank" rel="noopener">【洛谷日报#4】浅谈线段树(Segment Tree)</a></li>
</ul>
<p>本文主要是上面文章的延伸, 所以上文有讲的东西本文就不详细讲了QwQ</p>
<p>笔者的测试代码可能写丑了, 所以如果慢请自行卡常QwQ</p>
<p>这里还是以RSQ为例</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>简单来说, zkw线段树就是<strong>非递归式</strong>线段树</p>
<p>众所周知, 普通线段树的常数很大, 经常被卡, 而zkw线段树的常数很小</p>
<p>这里用<a href="https://www.luogu.com.cn/problem/P3372" target="_blank" rel="noopener">洛谷P3372</a>做一个演示(更详细的补充见文末)</p>
<p><strong>普通线段树</strong><a href="https://www.luogu.com.cn/record/9389075" target="_blank" rel="noopener">R9389075</a></p>
<p><img src="/.io//seg0_4.png" alt></p>
<p><strong>zkw线段树</strong><a href="https://www.luogu.com.cn/record/9388963" target="_blank" rel="noopener">R9388963</a></p>
<p><img src="/.io//seg0_5.png" alt></p>
<p>前者运行时间是后者运行时间的<strong>2.05</strong>倍！Σ(°Д°;</p>
<p><strong>详细测试见后文</strong></p>
<p>其实zkw线段树不仅快, 而且码量小, 空间小, 好调试<del>吊打普通线段树</del>orz</p>
<p>而普通线段树的优点则是方便理解与学习, 并且适用范围更广(zkw线段树<strong>不能处理有运算优先级的问题</strong>, 如<a href="https://www.luogu.com.cn/problem/P3373" target="_blank" rel="noopener">洛谷P3373</a>)</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>我们观察一下普通线段树的代码, 很容易就会发现:无论是建树、修改还是查询, 都是<strong>自顶向下</strong>的.</p>
<p>zkw线段树则正好反过来, 即<strong>自底向上</strong></p>
<p>具体来说, 就是先把线段树填充成满二叉树(堆式存储), 之后就可以直接找到叶节点, 然后回溯上去了</p>
<p>听起来好像很简单QwQ</p>
<p>其实真的很简单QwQ</p>
<h2 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h2><p>首先是定义变量:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> tree[MAXN&lt;&lt;<span class="number">2</span>]; <span class="comment">//tree是线段树数组</span></span><br><span class="line"><span class="keyword">int</span> n, N=<span class="number">1</span>;        <span class="comment">//n是原数组实际长度, N下面会解释</span></span><br></pre></td></tr></table></figure></p>
<p>我们以下图为例</p>
<p><img src="/.io//seg1_6.png" alt></p>
<p>(由<a href="https://visualgo.net/zh/segmenttree" target="_blank" rel="noopener">visualgo</a>生成. 为便于讲解, 笔者做了一些改动)</p>
<p>下面的黄圈是原数据, 黄圈下面的红色数字是原数组的下标</p>
<p>上面的树就是线段树了, 每一个节点内部都是节点下方标明的区间中所有元素的总和, 上边的黑色数字就是线段树的下标</p>
<p><strong>visualgo生成的数组下标默认是从0开始的, 所以线段树下的区间和原数组有错位, 请注意区分<del>(笔者懒得改了</del></strong></p>
<p>通过观察, 我们发现一个规律:线段树对应叶子节点的下标和原数组的下标的差值是恒定的($8-1=9-2=…=15-8=7$)</p>
<p>这个差值就是一个和<code>N</code>很接近的数了(<code>N</code>是叶子节点数)</p>
<blockquote>
<p>实际上, $N=2^{\lceil\log_2{(n+1)}\rceil}$</p>
</blockquote>
<p>根据这一点, 我们可以这样建树:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fp(i,l,r) for(register int i=(l);i&lt;=(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fd(i,r,l) for(register int i=(r);i&gt;=(l);--i)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span>(; N &lt;= n+<span class="number">1</span>; N &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">  fp(i, N+<span class="number">1</span>, N+n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, tree+i); <span class="comment">// 等价于scanf("%d", &amp;tree[i])</span></span><br><span class="line">  fd(i, N<span class="number">-1</span>, <span class="number">1</span>) tree[i] = tree[i &lt;&lt; <span class="number">1</span>] + tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]; <span class="comment">// 等价于tree[i] = tree[i*2] + tree[i*2 + 1]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大家可以和递归版线段树做一下对比</p>
<p>有细心的读者可能发现了:上例计算出的<code>N</code>是<code>16</code>而不是<code>8</code>!</p>
<p>还有, 原数组在线段树对应的为止整体向后平移了1位！</p>
<p>其实这都是为了方便查找</p>
<p>后面再详细解释</p>
<h2 id="单点修改-区间查询-amp-区间修改-区间查询"><a href="#单点修改-区间查询-amp-区间修改-区间查询" class="headerlink" title="单点修改+区间查询&amp;区间修改+区间查询"></a>单点修改+区间查询&amp;区间修改+区间查询</h2><h3 id="单点修改-区间查询"><a href="#单点修改-区间查询" class="headerlink" title="单点修改+区间查询"></a>单点修改+区间查询</h3><h4 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h4><p>实现很简单, 所以直接放代码<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(x += N; x; x &gt;&gt;= <span class="number">1</span>) tree[x] += k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>完了?Σ(°Д°;</p>
<p>完了！</p>
<p>单点查询更简单, 相信各位读者都能想到QwQ</p>
<h4 id="单点修改下的区间查询"><a href="#单点修改下的区间查询" class="headerlink" title="单点修改下的区间查询"></a>单点修改下的区间查询</h4><p>我们以查询<code>[2,6]</code>为例(线段树上的, 下同)</p>
<p><img src="/.io//seg1_7.png" alt></p>
<p>ans=<font color="#b5e61d">[2,2]+[3,3]+[4,4]+[5,5]+[6,6]</font></p>
<p>观察上图可以发现, 因为在线段树上我们可以直接找到<font color="#00a2e8">[2,3]</font>和<font color="#00a2e8">[4,5]</font>, 所以我们只需要用<font color="#00a2e8">[2,3]</font>代替<font color="#b5e61d">[2,2]</font>和<font color="#b5e61d">[3,3]</font>; 用<font color="#00a2e8">[4,5]</font>代替<font color="#b5e61d">[4,4]</font>和<font color="#b5e61d">[5,5]</font></p>
<p>于是 ans=<font color="#00a2e8">[2,3]</font>+<font color="#00a2e8">[4,5]</font>+<font color="#b5e61d">[6,6]</font></p>
<p>自顶向下求和很简单, 怎么实现自底向上的求和呢?</p>
<p>我们分别在区间左端点-1和右端点+1的位置放两个指针(令其为<code>s,t</code>), 就像这样:</p>
<p><img src="/.io//seg1_8.png" alt></p>
<p>接着不断将<code>s,t</code>移动到对应节点的父节点处, 直到<code>s,t</code>指向的节点的父节点相同时停止</p>
<p><img src="/.io//seg1_9.png" alt></p>
<p>在这期间, 如果:</p>
<ol>
<li><p><code>s</code>指向的节点是左儿子, 那么<code>ans += 右儿子的值</code></p>
</li>
<li><p><code>t</code>指向的节点是右儿子, 那么<code>ans += 左儿子的值</code></p>
</li>
</ol>
<p>如果不能理解就看看上图, 多看几遍就懂了QwQ</p>
<p>下面是代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个for的信息量有点大</span></span><br><span class="line">  <span class="comment">// 第一个分号前面就是将s和t初始化</span></span><br><span class="line">  <span class="comment">// s ^ r ^ 1就是判断对应节点的父节点是否相同</span></span><br><span class="line">  <span class="comment">// 很容易看出来当对应节点互为左右儿子时, s^t = 1, 再^1之后就是0</span></span><br><span class="line">  <span class="comment">// 而其他情况时, s^t大于1, ^1后当然不是0</span></span><br><span class="line">  <span class="comment">// 第二个分号后面就是s,t上移</span></span><br><span class="line">  <span class="keyword">for</span>(s = N + s - <span class="number">1</span>, r = N + r + <span class="number">1</span>; s ^ r ^ <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, r &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) ans += tree[s^<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(r&amp;<span class="number">1</span>) ans += tree[r^<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 这两句的含义对照上面的实现过程看就能明白</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的那两个疑问现在可以解释了</p>
<p>仔细观察上述流程可以发现:我们只能查询<code>[1,n-1]</code>范围(这里还是线段树上标的)内的数据</p>
<p>如果我们想要查询<code>[0,m]</code>范围内($0\leq m\leq n$)的呢?</p>
<p><strong>将数组整体平移！</strong></p>
<p>如果我们想要查询<code>[m,n]</code>范围内($0\leq m\leq n$)的呢?</p>
<p><strong>把<code>N</code>直接扩大2倍!</strong></p>
<p><del>_zkw:就是这么狠_</del></p>
<hr>
<p>到目前为止zkw线段树还是比较简短的</p>
<p>可能有人觉得这个和树状数组有点像, 这就对了</p>
<p>_zkw:树状数组究竟是什么?就是省掉一半空间后的线段树加上中序遍历_ </p>
<p>orz</p>
<p><strong>单点修改+区间查询</strong>完结, 整理一下代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单点修改+区间查询</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fp(i,l,r) for(register int i=(l);i&lt;=(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fd(i,r,l) for(register int i=(r);i&gt;=(l);--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n, N=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span>(; N &lt;= n+<span class="number">1</span>; N &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">  fp(i, N+<span class="number">1</span>, N+n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, tree+i);</span><br><span class="line">  fd(i, N<span class="number">-1</span>, <span class="number">1</span>) tree[i] = tree[i &lt;&lt; <span class="number">1</span>] + tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(x += N; x; x &gt;&gt;= <span class="number">1</span>) tree[x] += k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(s = N + s - <span class="number">1</span>, r = N + r + <span class="number">1</span>; s ^ r ^ <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, r &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) ans += tree[s^<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(r&amp;<span class="number">1</span>) ans += tree[r^<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 按需补充吧</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="区间修改-区间查询"><a href="#区间修改-区间查询" class="headerlink" title="区间修改+区间查询"></a>区间修改+区间查询</h3><h4 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h4><p>很显然, 我们不能用上面的方法暴力修改(还不如普通线段树)</p>
<p>其实堆式存储也可以自顶向下访问</p>
<p>就是上下各走一次而已</p>
<p>但是我们有更好的办法 <del>_zkw:使劲想想就知道了_</del></p>
<p>这里我们采用<strong>标记永久化</strong>的思想(就是<strong>不下推lazy tag</strong><del>让他彻底lazy下去</del>)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> add[MAXN&lt;&lt;<span class="number">2</span>]; <span class="comment">//这个lazy tag表示当前节点已经更新完, 需要更新子节点</span></span><br></pre></td></tr></table></figure>
<p>我们需要在自底向上时更新节点的值, 所以我们还需要一个变量记录该节点<strong>包含元素的个数</strong></p>
<p>另外要注意<strong>修改某个节点的标记时要更新上面的值</strong></p>
<p>举个例子；我们换一棵树</p>
<p><img src="/.io//seg2_2.png" alt></p>
<p>以修改<code>[2,10]</code>为例</p>
<p><img src="/.io//seg2_3.png" alt></p>
<p>当<code>s</code>到了<code>[2,2]</code>节点时, <code>[3,3]</code>节点的add加<code>k</code>, 那么接下来<code>[2,3]</code>、<code>[0,3]</code>节点的值都要加上<code>k*1</code>, 而到了<code>[0,7]</code>节点时, 因为<code>[4,7]</code>节点的add加了<code>k</code>, 所以<code>[0,7]</code>节点的值要加上<code>k*(1+4)=k*5</code>, 自然<code>k</code>要乘的系数又需要一个变量来记录</p>
<p>需要注意的是, 这次的<strong>修改要上推到根节点</strong></p>
<p>下面是代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> lNum=<span class="number">0</span>, rNum=<span class="number">0</span>, nNum=<span class="number">1</span>;</span><br><span class="line">  <span class="comment">//lNum:  s一路走来已经包含了几个数</span></span><br><span class="line">  <span class="comment">//rNum:  t一路走来已经包含了几个数</span></span><br><span class="line">  <span class="comment">//nNum:  本层每个节点包含几个数</span></span><br><span class="line">  <span class="keyword">for</span>(s = N+s<span class="number">-1</span>, t = N+t+<span class="number">1</span>; s^t^<span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>, nNum &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//更新tree</span></span><br><span class="line">    tree[s] += k*lNum;</span><br><span class="line">    tree[t] += k*rNum;</span><br><span class="line">    <span class="comment">//处理add</span></span><br><span class="line">    <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) &#123;add[s^<span class="number">1</span>] += k; tree[s^<span class="number">1</span>] += k*nNum; lNum += nNum;&#125;</span><br><span class="line">    <span class="keyword">if</span>(t&amp;<span class="number">1</span>) &#123;add[t^<span class="number">1</span>] += k; tree[t^<span class="number">1</span>] += k*nNum; rNum += nNum;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//更新上层tree</span></span><br><span class="line">  <span class="keyword">for</span>(; s; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    tree[s] += k*lNum;</span><br><span class="line">    tree[t] += k*rNum;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h4><p>我们以查询<code>[2,10]</code>为例<del>没错笔者我就是要用一张图</del></p>
<p><img src="/.io//seg2_3.png" alt></p>
<p>过程类似, 要注意<code>s,t</code>每次上推时都要根据当前所在节点的标记和<code>lNum / rNum</code>更新<code>ans</code> (<code>ans += add[s]*lNum</code>)</p>
<p>可能有些难懂, 多读两遍或者看看代码或者自己手推一下就好了QwQ</p>
<p>同样, 这个也需要上推到根节点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> lNum=<span class="number">0</span>, rNum=<span class="number">0</span>, nNum=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(s = N+s<span class="number">-1</span>, t = N+t+<span class="number">1</span>; s^t^<span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>, nNum &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//根据标记更新</span></span><br><span class="line">    <span class="keyword">if</span>(add[s]) ans += add[s]*lNum;</span><br><span class="line">    <span class="keyword">if</span>(add[t]) ans += add[t]*rNum;</span><br><span class="line">    <span class="comment">//常规求和</span></span><br><span class="line">    <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) &#123;ans += tree[s^<span class="number">1</span>]; lNum += nNum;&#125;</span><br><span class="line">    <span class="keyword">if</span>(t&amp;<span class="number">1</span>) &#123;ans += tree[t^<span class="number">1</span>]; rNum += nNum;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//处理上层标记</span></span><br><span class="line">  <span class="keyword">for</span>(; s; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    ans += add[s]*lNum;</span><br><span class="line">    ans += add[t]*rNum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>区间修改+区间查询告一段落, 整理一下代码:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//区间修改+区间查询1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fp(i,l,r) for(register int i=(l);i&lt;=(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fd(i,r,l) for(register int i=(r);i&gt;=(l);--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tree[MAXN&lt;&lt;<span class="number">2</span>], add[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n, N=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span>(; N &lt;= n+<span class="number">1</span>; N &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">  fp(i, N+<span class="number">1</span>, N+n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, tree+i);</span><br><span class="line">  fd(i, N<span class="number">-1</span>, <span class="number">1</span>) tree[i] = tree[i &lt;&lt; <span class="number">1</span>] + tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> lNum=<span class="number">0</span>, rNum=<span class="number">0</span>, nNum=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(s = N+s<span class="number">-1</span>, t = N+t+<span class="number">1</span>; s^t^<span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>, nNum &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    tree[s] += k*lNum;</span><br><span class="line">    tree[t] += k*rNum;</span><br><span class="line">    <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) &#123;add[s^<span class="number">1</span>] += k; tree[s^<span class="number">1</span>] += k*nNum; lNum += nNum;&#125;</span><br><span class="line">    <span class="keyword">if</span>(t&amp;<span class="number">1</span>) &#123;add[t^<span class="number">1</span>] += k; tree[t^<span class="number">1</span>] += k*nNum; rNum += nNum;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(; s; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    tree[s] += k*lNum;</span><br><span class="line">    tree[t] += k*rNum;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> lNum=<span class="number">0</span>, rNum=<span class="number">0</span>, nNum=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(s = N+s<span class="number">-1</span>, t = N+t+<span class="number">1</span>; s^t^<span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>, nNum &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(add[s]) ans += add[s]*lNum;</span><br><span class="line">    <span class="keyword">if</span>(add[t]) ans += add[t]*rNum;</span><br><span class="line">    <span class="keyword">if</span>(~s&amp;<span class="number">1</span>) &#123;ans += tree[s^<span class="number">1</span>]; lNum += nNum;&#125;</span><br><span class="line">    <span class="keyword">if</span>(t&amp;<span class="number">1</span>) &#123;ans += tree[t^<span class="number">1</span>]; rNum += nNum;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(; s; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    ans += add[s]*lNum;</span><br><span class="line">    ans += add[t]*rNum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 同上</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="区间修改-区间查询的空间优化"><a href="#区间修改-区间查询的空间优化" class="headerlink" title="区间修改+区间查询的空间优化"></a>区间修改+区间查询的空间优化</h4><p>也许有的读者发现了:标记和值好像可以看成一个东西</p>
<p>所以, 我们可不可以<strong>不存值, 只存标记</strong>?</p>
<p><strong>当然可以！</strong></p>
<p><strong>zkw:永久化的标记就是值!</strong></p>
<p>_<del>zkw:狗拿耗子, 猫下岗了</del>_ </p>
<p>那么, 怎么实现呢?</p>
<p>下面是<strong>区间最值(RMQ)版本</strong>的(以最小值为例)</p>
<blockquote>
<p>在这里, 我们不存总和了, 存<code>tree[i]=sum[i]-sum[i&gt;&gt;1] //sum[i]对应上述两个版本代码中的tree[i]</code>(即为子节点-父节点)</p>
<p>区间修改就直接改<code>tree[i]</code></p>
<p>查询就从当前节点一直加到根(<code>tree[i]+tree[i&gt;&gt;1]+...+tree[1]</code>)</p>
<blockquote>
<p>或者数学一点</p>
<script type="math/tex; mode=display">\sum_{\text{j}=0}^{\lfloor\log_2\text{i}\rfloor}\mathrm{tree}_{i\cdot2^j}</script></blockquote>
<p>(修改时的<code>s,t</code>)遇到节点<code>x</code>, 则</p>
<p><code>A=min(tree[x&gt;&gt;1],tree[x&gt;&gt;1|1]), tree[x]+=A, tree[x&gt;&gt;1]-=A, tree[x&gt;&gt;1|1]-=A</code></p>
<blockquote>
<p>这一步可能有一些难懂, 就是修改了一个区间, 可能会导致父节点存储的最值(普通情况下)发生改变, 所以用这一步来修正</p>
</blockquote>
</blockquote>
<p>为什么笔者没有放<strong>区间求和(RSQ)版本</strong>的呢?</p>
<p>因为笔者觉得求和版本的依然要维护两棵树(一棵存<code>tree[i]-tree[i-1]</code>, 另一棵存<code>i*(tree[i]-tree[i-1])</code>, 类似树状数组), 也就是没有优化(可能是笔者太弱了, 没有想到别的方法)</p>
<p>当然, 这个版本也是可以单点修改/单点查询的, 不过没有上述代码实用, 所以这里就不讨论了</p>
<p>直接放代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (N = <span class="number">1</span>; N &lt;= n + <span class="number">1</span>; N &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">  fp(i, N + <span class="number">1</span>, N + n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, tree + i);</span><br><span class="line">  fd(i, N - <span class="number">1</span>, <span class="number">1</span>) &#123;</span><br><span class="line">    tree[i] = min(tree[i &lt;&lt; <span class="number">1</span>], tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    tree[i &lt;&lt; <span class="number">1</span>] -= tree[i];</span><br><span class="line">    tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] -= tree[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> tmp;</span><br><span class="line">  <span class="keyword">for</span> (s += N - <span class="number">1</span>, t += N + <span class="number">1</span>; s ^ t ^ <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (~s &amp; <span class="number">1</span>) tree[s ^ <span class="number">1</span>] += k;</span><br><span class="line">    <span class="keyword">if</span> (t &amp; <span class="number">1</span>) tree[t ^ <span class="number">1</span>] += k;</span><br><span class="line">    tmp = min(tree[s], tree[s ^ <span class="number">1</span>]);</span><br><span class="line">    tree[s] -= tmp;</span><br><span class="line">    tree[s ^ <span class="number">1</span>] -= tmp;</span><br><span class="line">    tree[s &gt;&gt; <span class="number">1</span>] += tmp;</span><br><span class="line">    tmp = min(tree[t], tree[t ^ <span class="number">1</span>]);</span><br><span class="line">    tree[t] -= tmp;</span><br><span class="line">    tree[t ^ <span class="number">1</span>] -= tmp;</span><br><span class="line">    tree[t &gt;&gt; <span class="number">1</span>] += tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (; s != <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>) &#123;  <span class="comment">//记得要上推到根节点</span></span><br><span class="line">    tmp = min(tree[s], tree[s ^ <span class="number">1</span>]);</span><br><span class="line">    tree[s] -= tmp;</span><br><span class="line">    tree[s ^ <span class="number">1</span>] -= tmp;</span><br><span class="line">    tree[s &gt;&gt; <span class="number">1</span>] += tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;  <span class="comment">//闭区间</span></span><br><span class="line">  <span class="keyword">int</span> sAns = <span class="number">0</span>, tAns = <span class="number">0</span>;</span><br><span class="line">  s += N, t += N;</span><br><span class="line">  <span class="keyword">if</span> (s != t) &#123;  <span class="comment">//防止查询单点时死循环</span></span><br><span class="line">    <span class="keyword">for</span> (; s ^ t ^ <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>, t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      sAns += tree[s];</span><br><span class="line">      tAns += tree[t];</span><br><span class="line">      <span class="keyword">if</span> (~s &amp; <span class="number">1</span>) sAns = min(sAns, tree[s ^ <span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span> (t &amp; <span class="number">1</span>) tAns = min(tAns, tree[t ^ <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ans = min(sAns + tree[s], tAns + tree[t]);</span><br><span class="line">  <span class="keyword">while</span> (s &gt; <span class="number">1</span>) ans += tree[s &gt;&gt;= <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="大数据测试"><a href="#大数据测试" class="headerlink" title="大数据测试"></a>大数据测试</h1><p>(2020.02.10 upd: <a href="https://www.luogu.com.cn/blog/82152/test-of-zkwSegTree" target="_blank" rel="noopener">测试更新了</a>)</p>
<p>先来看一看参赛选手:</p>
<p>1号:递归线段树</p>
<p>2号:zkw线段树(非差分版本, 差分版本的常数略大, 就不测了)</p>
<p>3号:树状数组</p>
<p><del>zkw线段树:说好的我的主场呢?</del></p>
<p>先以<a href="https://www.luogu.com.cn/problem/P3372" target="_blank" rel="noopener">洛谷P3372</a>做一个热身</p>
<p>因为图太多, 所以不贴出来了, 有兴趣的读者可以查看提交记录</p>
<p><strong>读入优化</strong></p>
<p>1号:递归线段树 412ms / 6.31MB (<a href="https://www.luogu.com.cn/record/9424058" target="_blank" rel="noopener">R9424058</a>)</p>
<p>2号:zkw线段树 208ms / 4.74MB (<a href="https://www.luogu.com.cn/record/9424567" target="_blank" rel="noopener">R9424567</a>)</p>
<p>3号:树状数组 196ms / 3.71MB (<a href="https://www.luogu.com.cn/record/9424624" target="_blank" rel="noopener">R9424624</a>)</p>
<p><strong>读入优化+O2</strong></p>
<p>1号:递归线段树 220ms / 6.21MB (<a href="https://www.luogu.com.cn/record/9424921" target="_blank" rel="noopener">R9424921</a>)</p>
<p>2号:zkw线段树 160ms / 4.86MB (<a href="https://www.luogu.com.cn/record/9424805" target="_blank" rel="noopener">R9424805</a>)</p>
<p>3号:树状数组  96ms / 3.74MB (<a href="https://www.luogu.com.cn/record/9424762" target="_blank" rel="noopener">R9424762</a>)</p>
<p>可以看到, 没有O2时2号和3号相差无几, 有了O2之后3号吊打全场<del>可能是笔者写的zkw线段树常数太大QwQ</del></p>
<p>为了<del>防止zkw线段树被吊打得太惨</del>反应算法真实水平以及模拟NOIp竞赛环境, 下面就不开O2了</p>
<p>在这里先放一下结果, 测试代码和大数据放在<a href="https://www.luogu.com.cn/blog/82152/TestData-and-Code-of-the-text-Introduction-of-zkwSegmentTree" target="_blank" rel="noopener">另一篇文章</a>里</p>
<p>保证所有输入数据在unsigned long long 范围内, 结果对$2^{64}$取模, 表格中的时间为平均值</p>
<p>测试环境:</p>
<blockquote>
<p>系统:noilinux-1.4.1</p>
<p>内存:2GB</p>
<p>CPU:AMD Athlon(tm) II X4 631 Quad-Core Processor 2600 MHz</p>
</blockquote>
<ul>
<li>测试#1:</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据规模</th>
<th style="text-align:center">递归线段树(ms)</th>
<th style="text-align:center">zkw线段树(ms)</th>
<th style="text-align:center">树状数组(ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">5e5(5组)</td>
<td style="text-align:center">3554.359</td>
<td style="text-align:center">2067.978</td>
<td style="text-align:center">1968.074</td>
</tr>
<tr>
<td style="text-align:center">1e6(5组)</td>
<td style="text-align:center">7327.344</td>
<td style="text-align:center">4922.725</td>
<td style="text-align:center">4359.272</td>
</tr>
<tr>
<td style="text-align:center">5e6(3组)</td>
<td style="text-align:center">49416.196</td>
<td style="text-align:center">34078.837</td>
<td style="text-align:center">26782.107</td>
</tr>
<tr>
<td style="text-align:center">1e7(3组)</td>
<td style="text-align:center">126192.820</td>
<td style="text-align:center">74198.015</td>
<td style="text-align:center">57485.430</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>测试#2:</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据规模</th>
<th style="text-align:center">递归线段树(ms)</th>
<th style="text-align:center">zkw线段树(ms)</th>
<th style="text-align:center">树状数组(ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">5e5(5组)</td>
<td style="text-align:center">3985.435</td>
<td style="text-align:center">2085.221</td>
<td style="text-align:center">1981.154</td>
</tr>
<tr>
<td style="text-align:center">1e6(5组)</td>
<td style="text-align:center">6995.611</td>
<td style="text-align:center">4268.988</td>
<td style="text-align:center">3991.724</td>
</tr>
<tr>
<td style="text-align:center">5e6(3组)</td>
<td style="text-align:center">45401.981</td>
<td style="text-align:center">29582.957</td>
<td style="text-align:center">25179.336</td>
</tr>
<tr>
<td style="text-align:center">1e7(3组)</td>
<td style="text-align:center">99805.488</td>
<td style="text-align:center">67543.985</td>
<td style="text-align:center">54304.283</td>
</tr>
</tbody>
</table>
</div>
<p>结论:<strong>不考虑有运算优先级的情况</strong>下, 树状数组吊打全场(zkw线段树哭晕在厕所</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这篇文章笔者写了<del>将近一天</del>整整三天</p>
<p>因为笔者是个蒟蒻, 所以这篇文章难免会有错误, 在此希望各位dalao批评的时候别把笔者喷得太惨QwQ</p>
<p>另外, zkw julao在他的ppt中还讲了许多高端操作, 有兴趣读者可以看一看<del>膜拜orz</del></p>
<h1 id="主要参考资料"><a href="#主要参考资料" class="headerlink" title="主要参考资料"></a>主要参考资料</h1><ul>
<li><p><a href="https://artofproblemsolving.com/community/c1368h1020439" target="_blank" rel="noopener">统计的力量——线段树全接触</a><del>(膜拜zkw julao)</del></p>
</li>
<li><p><a href="https://blog.csdn.net/zearot/article/details/48299459" target="_blank" rel="noopener">线段树详解 (原理, 实现与应用) - CSDN博客</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>程序设计</tag>
        <tag>洛谷日报</tag>
        <tag>数据结构</tag>
        <tag>线段树</tag>
        <tag>笔记</tag>
        <tag>zkw线段树</tag>
      </tags>
  </entry>
</search>
